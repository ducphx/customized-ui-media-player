/** @jsx jsx */
import { Component } from 'react';
import { jsx } from '@instructure/emotion';
import type { TextProps } from './props';
/**
---
category: components
---
@tsProps
**/
declare class Text extends Component<TextProps> {
    static readonly componentId = "Text";
    static allowedProps: readonly (keyof {
        as?: import("@instructure/shared-types/types/CommonProps").AsElementType | undefined;
        color?: "primary" | "secondary" | "brand" | "success" | "danger" | "alert" | "primary-inverse" | "secondary-inverse" | "warning" | undefined;
        elementRef?: ((element: Element | null) => void) | undefined;
        fontStyle?: "italic" | "normal" | undefined;
        letterSpacing?: "normal" | "condensed" | "expanded" | undefined;
        lineHeight?: "condensed" | "default" | "fit" | "double" | undefined;
        size?: "small" | "x-small" | "medium" | "large" | "x-large" | "xx-large" | undefined;
        transform?: "none" | "capitalize" | "uppercase" | "lowercase" | undefined;
        weight?: "normal" | "light" | "bold" | undefined;
        wrap?: "normal" | "break-word" | undefined;
        children?: import("react").ReactNode;
    })[];
    static propTypes: import("@instructure/shared-types/types/UtilityTypes").PropValidators<keyof {
        as?: import("@instructure/shared-types/types/CommonProps").AsElementType | undefined;
        color?: "primary" | "secondary" | "brand" | "success" | "danger" | "alert" | "primary-inverse" | "secondary-inverse" | "warning" | undefined;
        elementRef?: ((element: Element | null) => void) | undefined;
        fontStyle?: "italic" | "normal" | undefined;
        letterSpacing?: "normal" | "condensed" | "expanded" | undefined;
        lineHeight?: "condensed" | "default" | "fit" | "double" | undefined;
        size?: "small" | "x-small" | "medium" | "large" | "x-large" | "xx-large" | undefined;
        transform?: "none" | "capitalize" | "uppercase" | "lowercase" | undefined;
        weight?: "normal" | "light" | "bold" | undefined;
        wrap?: "normal" | "break-word" | undefined;
        children?: import("react").ReactNode;
    }>;
    static defaultProps: {
        readonly as: "span";
        readonly wrap: "normal";
        readonly size: "medium";
        readonly letterSpacing: "normal";
        readonly children: null;
    };
    componentDidMount(): void;
    componentDidUpdate(): void;
    render(): jsx.JSX.Element;
}
export default Text;
export { Text };
//# sourceMappingURL=index.d.ts.map