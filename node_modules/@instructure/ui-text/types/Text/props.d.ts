import React from 'react';
import type { PropValidators, AsElementType, TextTheme, OtherHTMLAttributes } from '@instructure/shared-types';
import type { WithStyleProps, ComponentStyle } from '@instructure/emotion';
declare type TextOwnProps = {
    /**
     * the element type to render as
     */
    as?: AsElementType;
    /**
     * Color of the text
     *
     * __Deprecated__: The `warning` color variant will be removed in version 9.0.0, because it doesn't have sufficient color contrast with the background (4.5:1) required for text.
     */
    color?: 'primary' | 'secondary' | 'brand' | 'success' | 'danger' | 'alert' | 'primary-inverse' | 'secondary-inverse' | 'warning';
    /**
     * Provides a reference to the underlying HTML element
     */
    elementRef?: (element: Element | null) => void;
    fontStyle?: 'italic' | 'normal';
    letterSpacing?: 'normal' | 'condensed' | 'expanded';
    lineHeight?: 'default' | 'fit' | 'condensed' | 'double';
    size?: 'x-small' | 'small' | 'medium' | 'large' | 'x-large' | 'xx-large';
    transform?: 'none' | 'capitalize' | 'uppercase' | 'lowercase';
    weight?: 'normal' | 'light' | 'bold';
    wrap?: 'normal' | 'break-word';
    children?: React.ReactNode;
};
declare type PropKeys = keyof TextOwnProps;
declare type AllowedPropKeys = Readonly<Array<PropKeys>>;
declare type TextProps = TextOwnProps & WithStyleProps<TextTheme, TextStyle> & OtherHTMLAttributes<TextOwnProps>;
declare type TextStyle = ComponentStyle<'text'>;
declare const propTypes: PropValidators<PropKeys>;
declare const allowedProps: AllowedPropKeys;
export type { TextProps, TextStyle };
export { propTypes, allowedProps };
//# sourceMappingURL=props.d.ts.map