/** @jsx jsx */
import { Component } from 'react';
import { jsx } from '@instructure/emotion';
import { TruncateTextState } from './props';
import type { TruncateTextProps } from './props';
/**
---
category: components
---
@tsProps
**/
declare class TruncateText extends Component<TruncateTextProps, TruncateTextState> {
    static readonly componentId = "TruncateText";
    static allowedProps: readonly ("children" | "debounce" | "onUpdate" | "maxLines" | "position" | "shouldTruncateWhenInvisible" | keyof import("./props").CleanDataOptions)[];
    static propTypes: import("@instructure/shared-types/types/UtilityTypes").PropValidators<"children" | "debounce" | "onUpdate" | "maxLines" | "position" | "shouldTruncateWhenInvisible" | keyof import("./props").CleanDataOptions>;
    static defaultProps: {
        maxLines: number;
        ellipsis: string;
        truncate: string;
        position: string;
        ignore: string[];
        debounce: number;
    };
    ref: Element | null;
    private _text?;
    private _debounced?;
    private _stage;
    private _wasTruncated?;
    private _resizeListener?;
    constructor(props: TruncateTextProps);
    get _ref(): Element | null;
    get initialState(): {
        isTruncated: boolean;
        needsSecondRender: boolean;
        truncatedElement: undefined;
        truncatedText: undefined;
    };
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(prevProps: TruncateTextProps): void;
    checkChildren(): void;
    update: () => void;
    truncate(): void;
    renderChildren(truncated: boolean, data: string[][], width: number): any;
    render(): jsx.JSX.Element;
}
export default TruncateText;
export { TruncateText };
//# sourceMappingURL=index.d.ts.map