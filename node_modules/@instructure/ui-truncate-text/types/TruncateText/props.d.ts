import React, { ReactNode } from 'react';
import type { PropValidators, TruncateTextTheme } from '@instructure/shared-types';
import type { WithStyleProps, ComponentStyle } from '@instructure/emotion';
declare type CleanDataOptions = {
    /**
     * Add ellipsis after words or after any character. Default is 'character'
     */
    truncate?: 'character' | 'word';
    /**
     * A string to use as the ellipsis
     */
    ellipsis?: string;
    /**
     * Characters to ignore at truncated end of string. Default is ' ', '.', ','
     */
    ignore?: string[];
};
declare type TruncateTextCommonProps = {
    /**
     * Number of lines to allow before truncating. `auto` will fit to parent.
     * Default is 1.
     */
    maxLines?: 'auto' | number;
    /**
     * Where to place the ellipsis within the string. Default is 'end'
     */
    position?: 'end' | 'middle';
    /**
     * Force truncation of invisible elements (hack; will be removed in favor
     * of a better fix)
     */
    shouldTruncateWhenInvisible?: boolean;
} & CleanDataOptions;
declare type TruncateTextOwnProps = {
    /**
     * The content to be truncated.
     */
    children: React.ReactNode;
    /**
     * Debounce delay in milliseconds
     */
    debounce?: number;
    /**
     * Callback when truncated text has changed
     */
    onUpdate?: (isTruncated: boolean, truncatedText?: string) => void;
} & TruncateTextCommonProps;
declare type PropKeys = keyof TruncateTextOwnProps;
declare type AllowedPropKeys = Readonly<Array<PropKeys>>;
declare type TruncateTextProps = TruncateTextOwnProps & WithStyleProps<TruncateTextTheme, TruncateTextStyle>;
declare type TruncateTextStyle = ComponentStyle<'truncateText' | 'auto' | 'spacer' | 'lineHeight'>;
declare type TruncateTextState = {
    isTruncated: boolean;
    needsSecondRender: boolean;
    truncatedElement?: ReactNode;
    truncatedText?: string;
};
declare const propTypes: PropValidators<PropKeys>;
declare const allowedProps: AllowedPropKeys;
export type { CleanDataOptions, TruncateTextCommonProps, TruncateTextProps, TruncateTextState, TruncateTextStyle };
export { propTypes, allowedProps };
//# sourceMappingURL=props.d.ts.map