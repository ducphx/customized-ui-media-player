import { TruncateTextCommonProps } from '../props';
export declare type TruncatorOptions = {
    parent?: Node;
    lineHeight?: number;
} & TruncateTextCommonProps;
/**
 * ---
 * parent: TruncateText
 * private: true
 * ---
 * Truncate the text content of an HTML element and its children.
 *
 * @param {DOMNode} element A single element containing the content to be truncated.
 * @param {Object} options={} The options object.
 * @param {DOMNode} options.parent An optional parent element to use for calculations.
 * @param {number|string} options.maxLines Number of lines to allow before truncating.
 * @param {string} options.position=end Where to place the ellipsis within the string.
 * @param {string} options.truncate=character Add ellipsis after words or after any character.
 * @param {string} options.ellipsis=\u2026 Where to place the ellipsis within the string.
 * @param {string[]} options.ignore Characters to ignore at truncated end of string.
 * @param {number} options.lineHeight=1.2 Unitless multiplier to use in case element can have
 * 'normal' lineHeight. Adjust this to better match your font if needed.
 */
declare function truncate(element: Element, options?: TruncatorOptions): {
    isTruncated: boolean;
    text: string;
    data: string[][];
    constraints: {
        width: number;
        height: number;
        lines: number;
    };
} | undefined;
export default truncate;
//# sourceMappingURL=truncate.d.ts.map