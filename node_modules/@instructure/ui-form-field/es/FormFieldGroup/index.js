import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
const _excluded = ["styles", "makeStyles"];

var _dec, _class, _class2;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/** @jsx jsx */
import { Component, Children } from 'react';
import { Grid } from '@instructure/ui-grid';
import { pickProps, omitProps } from '@instructure/ui-react-utils';
import { withStyle, jsx } from '@instructure/emotion';
import { FormFieldLayout } from '../FormFieldLayout';
import generateStyle from './styles';
import generateComponentTheme from './theme';
import { propTypes, allowedProps } from './props';

/**
---
category: components
---
@tsProps
**/
let FormFieldGroup = (_dec = withStyle(generateStyle, generateComponentTheme), _dec(_class = (_class2 = class FormFieldGroup extends Component {
  constructor() {
    super(...arguments);
    this.ref = null;

    this.handleRef = el => {
      const elementRef = this.props.elementRef;
      this.ref = el;

      if (typeof elementRef === 'function') {
        elementRef(el);
      }
    };
  }

  componentDidMount() {
    var _this$props$makeStyle, _this$props;

    (_this$props$makeStyle = (_this$props = this.props).makeStyles) === null || _this$props$makeStyle === void 0 ? void 0 : _this$props$makeStyle.call(_this$props, this.makeStylesVariables);
  }

  componentDidUpdate() {
    var _this$props$makeStyle2, _this$props2;

    (_this$props$makeStyle2 = (_this$props2 = this.props).makeStyles) === null || _this$props$makeStyle2 === void 0 ? void 0 : _this$props$makeStyle2.call(_this$props2, this.makeStylesVariables);
  }

  get makeStylesVariables() {
    return {
      invalid: this.invalid
    };
  }

  get invalid() {
    return !!this.props.messages && this.props.messages.findIndex(message => {
      return message.type === 'error';
    }) >= 0;
  }

  renderColumns() {
    return Children.map(this.props.children, (child, index) => {
      return child ? jsx(Grid.Col, {
        width: child.props && child.props.width ? 'auto' : void 0,
        key: index
      }, child) : null;
    });
  }

  renderChildren() {
    return jsx(Grid, {
      colSpacing: this.props.colSpacing,
      rowSpacing: this.props.rowSpacing,
      vAlign: this.props.vAlign,
      startAt: this.props.startAt || (this.props.layout === 'columns' ? 'medium' : null)
    }, jsx(Grid.Row, null, this.renderColumns()));
  }

  renderFields() {
    const styles = this.props.styles;
    return jsx("span", {
      key: "fields",
      css: styles === null || styles === void 0 ? void 0 : styles.formFieldGroup
    }, this.renderChildren());
  }

  render() {
    const _this$props3 = this.props,
          styles = _this$props3.styles,
          makeStyles = _this$props3.makeStyles,
          props = _objectWithoutProperties(_this$props3, _excluded);

    return jsx(FormFieldLayout, Object.assign({}, omitProps(props, FormFieldGroup.allowedProps), pickProps(props, FormFieldLayout.allowedProps), {
      vAlign: props.vAlign,
      layout: props.layout === 'inline' ? 'inline' : 'stacked',
      label: props.description,
      "aria-disabled": props.disabled ? 'true' : void 0,
      "aria-invalid": this.invalid ? 'true' : void 0,
      elementRef: this.handleRef
    }), this.renderFields());
  }

}, _class2.displayName = "FormFieldGroup", _class2.componentId = 'FormFieldGroup', _class2.propTypes = propTypes, _class2.allowedProps = allowedProps, _class2.defaultProps = {
  as: 'fieldset',
  disabled: false,
  rowSpacing: 'medium',
  colSpacing: 'small',
  vAlign: 'middle'
}, _class2)) || _class);
export default FormFieldGroup;
export { FormFieldGroup };