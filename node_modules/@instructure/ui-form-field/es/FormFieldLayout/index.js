import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
const _excluded = ["makeStyles", "styles"];

var _dec, _dec2, _class, _class2;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/** @jsx jsx */
import { Component } from 'react';
import { hasVisibleChildren } from '@instructure/ui-a11y-utils';
import { ScreenReaderContent } from '@instructure/ui-a11y-content';
import { Grid } from '@instructure/ui-grid';
import { logError as error } from '@instructure/console';
import { omitProps, pickProps, getElementType, withDeterministicId } from '@instructure/ui-react-utils';
import { withStyle, jsx } from '@instructure/emotion';
import { FormFieldLabel } from '../FormFieldLabel';
import { FormFieldMessages } from '../FormFieldMessages';
import generateStyle from './styles';
import { propTypes, allowedProps } from './props';

/**
---
parent: FormField
---
@tsProps
**/
let FormFieldLayout = (_dec = withDeterministicId(), _dec2 = withStyle(generateStyle, null), _dec(_class = _dec2(_class = (_class2 = class FormFieldLayout extends Component {
  constructor(props) {
    super(props);
    this._messagesId = void 0;
    this.ref = null;

    this.handleRef = el => {
      const elementRef = this.props.elementRef;
      this.ref = el;

      if (typeof elementRef === 'function') {
        elementRef(el);
      }
    };

    this.handleInputContainerRef = node => {
      if (typeof this.props.inputContainerRef === 'function') {
        this.props.inputContainerRef(node);
      }
    };

    this._messagesId = props.messagesId || props.deterministicId();
    error(typeof props.width !== 'undefined' || !props.inline || props.layout !== 'inline', `[FormFieldLayout] The 'inline' prop is true, and the 'layout' is set to 'inline'.
      This will cause a layout issue in Internet Explorer 11 unless you also add a value for the 'width' prop.`);
  }

  componentDidMount() {
    var _this$props$makeStyle, _this$props;

    (_this$props$makeStyle = (_this$props = this.props).makeStyles) === null || _this$props$makeStyle === void 0 ? void 0 : _this$props$makeStyle.call(_this$props);
  }

  componentDidUpdate() {
    var _this$props$makeStyle2, _this$props2;

    (_this$props$makeStyle2 = (_this$props2 = this.props).makeStyles) === null || _this$props$makeStyle2 === void 0 ? void 0 : _this$props$makeStyle2.call(_this$props2);
  }

  get hasVisibleLabel() {
    return this.props.label && hasVisibleChildren(this.props.label);
  }

  get hasMessages() {
    return this.props.messages && this.props.messages.length > 0;
  }

  get elementType() {
    return getElementType(FormFieldLayout, this.props);
  }

  get inlineContainerAndLabel() {
    // Return if both the component container and label will display inline
    return this.props.inline && this.props.layout === 'inline';
  }

  renderLabel() {
    if (this.hasVisibleLabel) {
      return jsx(Grid.Col, {
        textAlign: this.props.labelAlign,
        width: this.inlineContainerAndLabel ? 'auto' : 3
      }, jsx(FormFieldLabel, {
        "aria-hidden": this.elementType === 'fieldset' ? 'true' : void 0
      }, this.props.label));
    } else if (this.elementType !== 'fieldset') {
      // to avoid duplicate label/legend content
      return this.props.label;
    } else {
      return null;
    }
  }

  renderLegend() {
    // note: the legend element must be the first child of a fieldset element for SR
    // so we render it twice in that case (once for SR-only and one that is visible)
    return jsx(ScreenReaderContent, {
      as: "legend"
    }, this.props.label, this.hasMessages && jsx(FormFieldMessages, {
      messages: this.props.messages
    }));
  }

  renderVisibleMessages() {
    return this.hasMessages ? jsx(Grid.Row, null, jsx(Grid.Col, {
      offset: this.inlineContainerAndLabel ? void 0 : 3,
      textAlign: this.inlineContainerAndLabel ? 'end' : void 0
    }, jsx(FormFieldMessages, {
      id: this._messagesId,
      messages: this.props.messages
    }))) : null;
  }

  render() {
    // any cast is needed to prevent Expression produces a union type that is too complex to represent errors
    const ElementType = this.elementType;

    const _this$props3 = this.props,
          makeStyles = _this$props3.makeStyles,
          styles = _this$props3.styles,
          props = _objectWithoutProperties(_this$props3, _excluded);

    const width = props.width,
          layout = props.layout,
          children = props.children;
    return jsx(ElementType, Object.assign({}, omitProps(props, [...FormFieldLayout.allowedProps, ...Grid.allowedProps]), {
      css: styles === null || styles === void 0 ? void 0 : styles.formFieldLayout,
      style: {
        width
      },
      "aria-describedby": this.hasMessages ? this._messagesId : void 0,
      ref: this.handleRef
    }), this.elementType === 'fieldset' && this.renderLegend(), jsx(Grid, Object.assign({
      rowSpacing: "small",
      colSpacing: "small",
      startAt: layout === 'inline' && this.hasVisibleLabel ? 'medium' : null
    }, pickProps(props, Grid.allowedProps)), jsx(Grid.Row, null, this.renderLabel(), jsx(Grid.Col, {
      width: this.inlineContainerAndLabel ? 'auto' : void 0,
      elementRef: this.handleInputContainerRef
    }, children)), this.renderVisibleMessages()));
  }

}, _class2.displayName = "FormFieldLayout", _class2.componentId = 'FormFieldLayout', _class2.propTypes = propTypes, _class2.allowedProps = allowedProps, _class2.defaultProps = {
  inline: false,
  layout: 'stacked',
  as: 'label',
  labelAlign: 'end'
}, _class2)) || _class) || _class);
export default FormFieldLayout;
export { FormFieldLayout };