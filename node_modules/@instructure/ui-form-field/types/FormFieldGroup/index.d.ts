/** @jsx jsx */
import { Component } from 'react';
import { jsx } from '@instructure/emotion';
import type { FormFieldGroupProps, FormFieldGroupStyleProps } from './props';
/**
---
category: components
---
@tsProps
**/
declare class FormFieldGroup extends Component<FormFieldGroupProps> {
    static readonly componentId = "FormFieldGroup";
    static propTypes: import("@instructure/shared-types/types/UtilityTypes").PropValidators<keyof {
        description: import("react").ReactNode;
        as?: import("@instructure/shared-types/types/CommonProps").AsElementType | undefined;
        messages?: import("../FormPropTypes").FormMessage[] | undefined;
        messagesId?: string | undefined;
        disabled?: boolean | undefined;
        children?: import("react").ReactNode;
        layout?: "columns" | "inline" | "stacked" | undefined;
        rowSpacing?: "small" | "none" | "medium" | "large" | undefined;
        colSpacing?: "small" | "none" | "medium" | "large" | undefined;
        vAlign?: "middle" | "bottom" | "top" | undefined;
        startAt?: "small" | "medium" | "large" | "x-large" | null | undefined;
        elementRef?: ((element: Element | null) => void) | undefined;
    }>;
    static allowedProps: readonly (keyof {
        description: import("react").ReactNode;
        as?: import("@instructure/shared-types/types/CommonProps").AsElementType | undefined;
        messages?: import("../FormPropTypes").FormMessage[] | undefined;
        messagesId?: string | undefined;
        disabled?: boolean | undefined;
        children?: import("react").ReactNode;
        layout?: "columns" | "inline" | "stacked" | undefined;
        rowSpacing?: "small" | "none" | "medium" | "large" | undefined;
        colSpacing?: "small" | "none" | "medium" | "large" | undefined;
        vAlign?: "middle" | "bottom" | "top" | undefined;
        startAt?: "small" | "medium" | "large" | "x-large" | null | undefined;
        elementRef?: ((element: Element | null) => void) | undefined;
    })[];
    static defaultProps: {
        as: string;
        disabled: boolean;
        rowSpacing: string;
        colSpacing: string;
        vAlign: string;
    };
    ref: Element | null;
    handleRef: (el: Element | null) => void;
    componentDidMount(): void;
    componentDidUpdate(): void;
    get makeStylesVariables(): FormFieldGroupStyleProps;
    get invalid(): boolean;
    renderColumns(): jsx.JSX.Element[] | null | undefined;
    renderChildren(): jsx.JSX.Element;
    renderFields(): jsx.JSX.Element;
    render(): jsx.JSX.Element;
}
export default FormFieldGroup;
export { FormFieldGroup };
//# sourceMappingURL=index.d.ts.map