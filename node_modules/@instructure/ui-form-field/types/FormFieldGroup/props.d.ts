/// <reference types="react" />
import type { AsElementType, PropValidators, FormFieldGroupTheme, OtherHTMLAttributes } from '@instructure/shared-types';
import type { WithStyleProps, ComponentStyle } from '@instructure/emotion';
import type { FormFieldLayoutOwnProps } from '../FormFieldLayout/props';
import type { FormMessage } from '../FormPropTypes';
declare type FormFieldGroupOwnProps = {
    description: React.ReactNode;
    /**
     * the element type to render as
     */
    as?: AsElementType;
    /**
     * Array of objects with shape: `{
     *   text: React.ReactNode,
     *   type: One of: ['error', 'hint', 'success', 'screenreader-only']
     * }`
     */
    messages?: FormMessage[];
    /**
     * id for the form field messages
     */
    messagesId?: string;
    disabled?: boolean;
    children?: React.ReactNode;
    layout?: 'stacked' | 'columns' | 'inline';
    rowSpacing?: 'none' | 'small' | 'medium' | 'large';
    colSpacing?: 'none' | 'small' | 'medium' | 'large';
    vAlign?: 'top' | 'middle' | 'bottom';
    startAt?: 'small' | 'medium' | 'large' | 'x-large' | null;
    /**
     * provides a reference to the underlying html root element
     */
    elementRef?: (element: Element | null) => void;
};
declare type FormFieldGroupStyleProps = {
    invalid: boolean;
};
declare type PropKeys = keyof FormFieldGroupOwnProps;
declare type AllowedPropKeys = Readonly<Array<PropKeys>>;
declare type FormFieldGroupProps = FormFieldGroupOwnProps & WithStyleProps<FormFieldGroupTheme, FormFieldGroupStyle> & OtherHTMLAttributes<FormFieldGroupOwnProps> & Omit<FormFieldLayoutOwnProps, 'messages' | 'messagesId' | 'vAlign' | 'layout' | 'label' | 'children'>;
declare type FormFieldGroupStyle = ComponentStyle<'formFieldGroup'>;
declare const propTypes: PropValidators<PropKeys>;
declare const allowedProps: AllowedPropKeys;
export type { FormFieldGroupProps, FormFieldGroupStyleProps, FormFieldGroupStyle };
export { propTypes, allowedProps };
//# sourceMappingURL=props.d.ts.map