import type { PropValidators, FormFieldMessagesTheme, OtherHTMLAttributes } from '@instructure/shared-types';
import type { WithStyleProps, ComponentStyle } from '@instructure/emotion';
import type { FormMessage } from '../FormPropTypes';
declare type FormFieldMessagesOwnProps = {
    /**
     * Array of objects with shape: `{
     *   text: React.ReactNode,
     *   type: One of: ['error', 'hint', 'success', 'screenreader-only']
     * }`
     */
    messages?: FormMessage[];
};
declare type PropKeys = keyof FormFieldMessagesOwnProps;
declare type AllowedPropKeys = Readonly<Array<PropKeys>>;
declare type FormFieldMessagesProps = FormFieldMessagesOwnProps & WithStyleProps<FormFieldMessagesTheme, FormFieldMessagesStyle> & OtherHTMLAttributes<FormFieldMessagesOwnProps>;
declare type FormFieldMessagesStyle = ComponentStyle<'formFieldMessages' | 'message'>;
declare const propTypes: PropValidators<PropKeys>;
declare const allowedProps: AllowedPropKeys;
export type { FormFieldMessagesProps, FormFieldMessagesStyle };
export { propTypes, allowedProps };
//# sourceMappingURL=props.d.ts.map