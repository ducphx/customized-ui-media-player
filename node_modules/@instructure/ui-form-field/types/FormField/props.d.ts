import React from 'react';
import type { OtherHTMLAttributes, PropValidators } from '@instructure/shared-types';
import type { FormMessage } from '../FormPropTypes';
declare type FormFieldOwnProps = {
    label: React.ReactNode;
    /**
     * the id of the input (to link it to its label for a11y)
     */
    id: string;
    /**
     * Array of objects with shape: `{
     *   text: React.ReactNode,
     *   type: One of: ['error', 'hint', 'success', 'screenreader-only']
     * }`
     */
    messages?: FormMessage[];
    /**
     * id for the form field messages
     */
    messagesId?: string;
    children?: React.ReactNode;
    inline?: boolean;
    layout?: 'stacked' | 'inline';
    labelAlign?: 'start' | 'end';
    vAlign?: 'top' | 'middle' | 'bottom';
    width?: string;
    inputContainerRef?: (element: HTMLSpanElement | null) => void;
    /**
     * provides a reference to the underlying html root element
     */
    elementRef?: (element: Element | null) => void;
};
declare type PropKeys = keyof FormFieldOwnProps;
declare type AllowedPropKeys = Readonly<Array<PropKeys>>;
declare type FormFieldProps = FormFieldOwnProps & OtherHTMLAttributes<FormFieldOwnProps>;
declare const propTypes: PropValidators<PropKeys>;
declare const allowedProps: AllowedPropKeys;
export type { FormFieldOwnProps, FormFieldProps };
export { propTypes, allowedProps };
//# sourceMappingURL=props.d.ts.map