/** @jsx jsx */
import { Component } from 'react';
import { jsx } from '@instructure/emotion';
import type { FormFieldLayoutProps } from './props';
/**
---
parent: FormField
---
@tsProps
**/
declare class FormFieldLayout extends Component<FormFieldLayoutProps> {
    static readonly componentId = "FormFieldLayout";
    static propTypes: import("@instructure/shared-types/types/UtilityTypes").PropValidators<keyof import("./props").FormFieldLayoutOwnProps>;
    static allowedProps: readonly (keyof import("./props").FormFieldLayoutOwnProps)[];
    static defaultProps: {
        readonly inline: false;
        readonly layout: "stacked";
        readonly as: "label";
        readonly labelAlign: "end";
    };
    constructor(props: FormFieldLayoutProps);
    private _messagesId;
    ref: Element | null;
    handleRef: (el: Element | null) => void;
    componentDidMount(): void;
    componentDidUpdate(): void;
    get hasVisibleLabel(): boolean | "" | 0 | null | undefined;
    get hasMessages(): boolean | undefined;
    get elementType(): import("@instructure/shared-types/types/CommonProps").AsElementType;
    get inlineContainerAndLabel(): boolean | undefined;
    handleInputContainerRef: (node: HTMLSpanElement | null) => void;
    renderLabel(): import("react").ReactNode;
    renderLegend(): jsx.JSX.Element;
    renderVisibleMessages(): jsx.JSX.Element | null;
    render(): jsx.JSX.Element;
}
export default FormFieldLayout;
export { FormFieldLayout };
//# sourceMappingURL=index.d.ts.map