"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FormFieldLabel = void 0;

var _react = require("react");

var _omitProps = require("@instructure/ui-react-utils/lib/omitProps.js");

var _getElementType = require("@instructure/ui-react-utils/lib/getElementType.js");

var _emotion = require("@instructure/emotion");

var _styles = _interopRequireDefault(require("./styles"));

var _theme = _interopRequireDefault(require("./theme"));

var _props = require("./props");

var _dec, _class, _class2;

/**
---
parent: FormField
---
@tsProps

This is a helper component that is used by most of the custom form
components. In most cases it shouldn't be used directly.

```js
---
example: true
---
<FormFieldLabel>Hello</FormFieldLabel>
```

**/
let FormFieldLabel = (_dec = (0, _emotion.withStyle)(_styles.default, _theme.default), _dec(_class = (_class2 = class FormFieldLabel extends _react.Component {
  constructor() {
    super(...arguments);
    this.ref = null;

    this.handleRef = el => {
      this.ref = el;
    };
  }

  componentDidMount() {
    var _this$props$makeStyle, _this$props;

    (_this$props$makeStyle = (_this$props = this.props).makeStyles) === null || _this$props$makeStyle === void 0 ? void 0 : _this$props$makeStyle.call(_this$props);
  }

  componentDidUpdate() {
    var _this$props$makeStyle2, _this$props2;

    (_this$props$makeStyle2 = (_this$props2 = this.props).makeStyles) === null || _this$props$makeStyle2 === void 0 ? void 0 : _this$props$makeStyle2.call(_this$props2);
  }

  render() {
    const ElementType = (0, _getElementType.getElementType)(FormFieldLabel, this.props);
    const _this$props3 = this.props,
          styles = _this$props3.styles,
          children = _this$props3.children;
    return (0, _emotion.jsx)(ElementType //@ts-expect-error too complex union type
    , Object.assign({}, (0, _omitProps.omitProps)(this.props, FormFieldLabel.allowedProps), {
      css: styles === null || styles === void 0 ? void 0 : styles.formFieldLabel,
      ref: this.handleRef
    }), children);
  }

}, _class2.displayName = "FormFieldLabel", _class2.componentId = 'FormFieldLabel', _class2.propTypes = _props.propTypes, _class2.allowedProps = _props.allowedProps, _class2.defaultProps = {
  as: 'span'
}, _class2)) || _class);
exports.FormFieldLabel = FormFieldLabel;
var _default = FormFieldLabel;
exports.default = _default;