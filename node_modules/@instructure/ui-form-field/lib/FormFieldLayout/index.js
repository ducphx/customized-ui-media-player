"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FormFieldLayout = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = require("react");

var _hasVisibleChildren = require("@instructure/ui-a11y-utils/lib/hasVisibleChildren.js");

var _ScreenReaderContent = require("@instructure/ui-a11y-content/lib/ScreenReaderContent");

var _Grid = require("@instructure/ui-grid/lib/Grid");

var _console = require("@instructure/console");

var _omitProps = require("@instructure/ui-react-utils/lib/omitProps.js");

var _pickProps = require("@instructure/ui-react-utils/lib/pickProps.js");

var _getElementType = require("@instructure/ui-react-utils/lib/getElementType.js");

var _withDeterministicId = require("@instructure/ui-react-utils/lib/DeterministicIdContext/withDeterministicId.js");

var _emotion = require("@instructure/emotion");

var _FormFieldLabel = require("../FormFieldLabel");

var _FormFieldMessages = require("../FormFieldMessages");

var _styles = _interopRequireDefault(require("./styles"));

var _props = require("./props");

const _excluded = ["makeStyles", "styles"];

var _dec, _dec2, _class, _class2;

/**
---
parent: FormField
---
@tsProps
**/
let FormFieldLayout = (_dec = (0, _withDeterministicId.withDeterministicId)(), _dec2 = (0, _emotion.withStyle)(_styles.default, null), _dec(_class = _dec2(_class = (_class2 = class FormFieldLayout extends _react.Component {
  constructor(props) {
    super(props);
    this._messagesId = void 0;
    this.ref = null;

    this.handleRef = el => {
      const elementRef = this.props.elementRef;
      this.ref = el;

      if (typeof elementRef === 'function') {
        elementRef(el);
      }
    };

    this.handleInputContainerRef = node => {
      if (typeof this.props.inputContainerRef === 'function') {
        this.props.inputContainerRef(node);
      }
    };

    this._messagesId = props.messagesId || props.deterministicId();
    (0, _console.logError)(typeof props.width !== 'undefined' || !props.inline || props.layout !== 'inline', `[FormFieldLayout] The 'inline' prop is true, and the 'layout' is set to 'inline'.
      This will cause a layout issue in Internet Explorer 11 unless you also add a value for the 'width' prop.`);
  }

  componentDidMount() {
    var _this$props$makeStyle, _this$props;

    (_this$props$makeStyle = (_this$props = this.props).makeStyles) === null || _this$props$makeStyle === void 0 ? void 0 : _this$props$makeStyle.call(_this$props);
  }

  componentDidUpdate() {
    var _this$props$makeStyle2, _this$props2;

    (_this$props$makeStyle2 = (_this$props2 = this.props).makeStyles) === null || _this$props$makeStyle2 === void 0 ? void 0 : _this$props$makeStyle2.call(_this$props2);
  }

  get hasVisibleLabel() {
    return this.props.label && (0, _hasVisibleChildren.hasVisibleChildren)(this.props.label);
  }

  get hasMessages() {
    return this.props.messages && this.props.messages.length > 0;
  }

  get elementType() {
    return (0, _getElementType.getElementType)(FormFieldLayout, this.props);
  }

  get inlineContainerAndLabel() {
    // Return if both the component container and label will display inline
    return this.props.inline && this.props.layout === 'inline';
  }

  renderLabel() {
    if (this.hasVisibleLabel) {
      return (0, _emotion.jsx)(_Grid.Grid.Col, {
        textAlign: this.props.labelAlign,
        width: this.inlineContainerAndLabel ? 'auto' : 3
      }, (0, _emotion.jsx)(_FormFieldLabel.FormFieldLabel, {
        "aria-hidden": this.elementType === 'fieldset' ? 'true' : void 0
      }, this.props.label));
    } else if (this.elementType !== 'fieldset') {
      // to avoid duplicate label/legend content
      return this.props.label;
    } else {
      return null;
    }
  }

  renderLegend() {
    // note: the legend element must be the first child of a fieldset element for SR
    // so we render it twice in that case (once for SR-only and one that is visible)
    return (0, _emotion.jsx)(_ScreenReaderContent.ScreenReaderContent, {
      as: "legend"
    }, this.props.label, this.hasMessages && (0, _emotion.jsx)(_FormFieldMessages.FormFieldMessages, {
      messages: this.props.messages
    }));
  }

  renderVisibleMessages() {
    return this.hasMessages ? (0, _emotion.jsx)(_Grid.Grid.Row, null, (0, _emotion.jsx)(_Grid.Grid.Col, {
      offset: this.inlineContainerAndLabel ? void 0 : 3,
      textAlign: this.inlineContainerAndLabel ? 'end' : void 0
    }, (0, _emotion.jsx)(_FormFieldMessages.FormFieldMessages, {
      id: this._messagesId,
      messages: this.props.messages
    }))) : null;
  }

  render() {
    // any cast is needed to prevent Expression produces a union type that is too complex to represent errors
    const ElementType = this.elementType;
    const _this$props3 = this.props,
          makeStyles = _this$props3.makeStyles,
          styles = _this$props3.styles,
          props = (0, _objectWithoutProperties2.default)(_this$props3, _excluded);
    const width = props.width,
          layout = props.layout,
          children = props.children;
    return (0, _emotion.jsx)(ElementType, Object.assign({}, (0, _omitProps.omitProps)(props, [...FormFieldLayout.allowedProps, ..._Grid.Grid.allowedProps]), {
      css: styles === null || styles === void 0 ? void 0 : styles.formFieldLayout,
      style: {
        width
      },
      "aria-describedby": this.hasMessages ? this._messagesId : void 0,
      ref: this.handleRef
    }), this.elementType === 'fieldset' && this.renderLegend(), (0, _emotion.jsx)(_Grid.Grid, Object.assign({
      rowSpacing: "small",
      colSpacing: "small",
      startAt: layout === 'inline' && this.hasVisibleLabel ? 'medium' : null
    }, (0, _pickProps.pickProps)(props, _Grid.Grid.allowedProps)), (0, _emotion.jsx)(_Grid.Grid.Row, null, this.renderLabel(), (0, _emotion.jsx)(_Grid.Grid.Col, {
      width: this.inlineContainerAndLabel ? 'auto' : void 0,
      elementRef: this.handleInputContainerRef
    }, children)), this.renderVisibleMessages()));
  }

}, _class2.displayName = "FormFieldLayout", _class2.componentId = 'FormFieldLayout', _class2.propTypes = _props.propTypes, _class2.allowedProps = _props.allowedProps, _class2.defaultProps = {
  inline: false,
  layout: 'stacked',
  as: 'label',
  labelAlign: 'end'
}, _class2)) || _class) || _class);
exports.FormFieldLayout = FormFieldLayout;
var _default = FormFieldLayout;
exports.default = _default;