"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FormFieldGroup = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = require("react");

var _Grid = require("@instructure/ui-grid/lib/Grid");

var _pickProps = require("@instructure/ui-react-utils/lib/pickProps.js");

var _omitProps = require("@instructure/ui-react-utils/lib/omitProps.js");

var _emotion = require("@instructure/emotion");

var _FormFieldLayout = require("../FormFieldLayout");

var _styles = _interopRequireDefault(require("./styles"));

var _theme = _interopRequireDefault(require("./theme"));

var _props = require("./props");

const _excluded = ["styles", "makeStyles"];

var _dec, _class, _class2;

/**
---
category: components
---
@tsProps
**/
let FormFieldGroup = (_dec = (0, _emotion.withStyle)(_styles.default, _theme.default), _dec(_class = (_class2 = class FormFieldGroup extends _react.Component {
  constructor() {
    super(...arguments);
    this.ref = null;

    this.handleRef = el => {
      const elementRef = this.props.elementRef;
      this.ref = el;

      if (typeof elementRef === 'function') {
        elementRef(el);
      }
    };
  }

  componentDidMount() {
    var _this$props$makeStyle, _this$props;

    (_this$props$makeStyle = (_this$props = this.props).makeStyles) === null || _this$props$makeStyle === void 0 ? void 0 : _this$props$makeStyle.call(_this$props, this.makeStylesVariables);
  }

  componentDidUpdate() {
    var _this$props$makeStyle2, _this$props2;

    (_this$props$makeStyle2 = (_this$props2 = this.props).makeStyles) === null || _this$props$makeStyle2 === void 0 ? void 0 : _this$props$makeStyle2.call(_this$props2, this.makeStylesVariables);
  }

  get makeStylesVariables() {
    return {
      invalid: this.invalid
    };
  }

  get invalid() {
    return !!this.props.messages && this.props.messages.findIndex(message => {
      return message.type === 'error';
    }) >= 0;
  }

  renderColumns() {
    return _react.Children.map(this.props.children, (child, index) => {
      return child ? (0, _emotion.jsx)(_Grid.Grid.Col, {
        width: child.props && child.props.width ? 'auto' : void 0,
        key: index
      }, child) : null;
    });
  }

  renderChildren() {
    return (0, _emotion.jsx)(_Grid.Grid, {
      colSpacing: this.props.colSpacing,
      rowSpacing: this.props.rowSpacing,
      vAlign: this.props.vAlign,
      startAt: this.props.startAt || (this.props.layout === 'columns' ? 'medium' : null)
    }, (0, _emotion.jsx)(_Grid.Grid.Row, null, this.renderColumns()));
  }

  renderFields() {
    const styles = this.props.styles;
    return (0, _emotion.jsx)("span", {
      key: "fields",
      css: styles === null || styles === void 0 ? void 0 : styles.formFieldGroup
    }, this.renderChildren());
  }

  render() {
    const _this$props3 = this.props,
          styles = _this$props3.styles,
          makeStyles = _this$props3.makeStyles,
          props = (0, _objectWithoutProperties2.default)(_this$props3, _excluded);
    return (0, _emotion.jsx)(_FormFieldLayout.FormFieldLayout, Object.assign({}, (0, _omitProps.omitProps)(props, FormFieldGroup.allowedProps), (0, _pickProps.pickProps)(props, _FormFieldLayout.FormFieldLayout.allowedProps), {
      vAlign: props.vAlign,
      layout: props.layout === 'inline' ? 'inline' : 'stacked',
      label: props.description,
      "aria-disabled": props.disabled ? 'true' : void 0,
      "aria-invalid": this.invalid ? 'true' : void 0,
      elementRef: this.handleRef
    }), this.renderFields());
  }

}, _class2.displayName = "FormFieldGroup", _class2.componentId = 'FormFieldGroup', _class2.propTypes = _props.propTypes, _class2.allowedProps = _props.allowedProps, _class2.defaultProps = {
  as: 'fieldset',
  disabled: false,
  rowSpacing: 'medium',
  colSpacing: 'small',
  vAlign: 'middle'
}, _class2)) || _class);
exports.FormFieldGroup = FormFieldGroup;
var _default = FormFieldGroup;
exports.default = _default;