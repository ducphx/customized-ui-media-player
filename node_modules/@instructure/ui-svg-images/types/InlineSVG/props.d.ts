import React, { SVGAttributes } from 'react';
import type { PropValidators, InlineSVGTheme, OtherHTMLAttributes } from '@instructure/shared-types';
import type { WithStyleProps, ComponentStyle } from '@instructure/emotion';
import type { WithDeterministicIdProps } from '@instructure/ui-react-utils';
declare type InlineSVGOwnProps = {
    children?: React.ReactNode;
    src?: string;
    title?: string;
    description?: string;
    focusable?: boolean;
    /**
     * To let the SVG expand to fill its container, use "`auto`"
     */
    width?: string | number;
    /**
     * To let the SVG expand to fill its container, use "`auto`"
     */
    height?: string | number;
    inline?: boolean;
    color?: 'inherit' | 'primary' | 'secondary' | 'primary-inverse' | 'secondary-inverse' | 'success' | 'error' | 'alert' | 'warning' | 'brand' | 'auto';
    /**
     * provides a reference to the underlying html root element
     */
    elementRef?: (element: Element | null) => void;
};
declare type PropKeys = keyof InlineSVGOwnProps;
declare type AllowedPropKeys = Readonly<Array<PropKeys>>;
declare type InlineSVGProps = InlineSVGOwnProps & WithStyleProps<InlineSVGTheme, InlineSVGStyle> & OtherHTMLAttributes<InlineSVGOwnProps, SVGAttributes<InlineSVGOwnProps>> & WithDeterministicIdProps;
declare type InlineSVGStyle = ComponentStyle<'inlineSVG'>;
declare const propTypes: PropValidators<PropKeys>;
declare const allowedProps: AllowedPropKeys;
export type { InlineSVGProps, InlineSVGOwnProps, InlineSVGStyle };
export { propTypes, allowedProps };
//# sourceMappingURL=props.d.ts.map