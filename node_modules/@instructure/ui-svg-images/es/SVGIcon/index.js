import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
const _excluded = ["rotate", "className", "themeOverride", "size", "bidirectional", "makeStyles", "styles"],
      _excluded2 = ["sizeXSmall", "sizeSmall", "sizeMedium", "sizeLarge", "sizeXLarge"];

var _dec, _dec2, _class, _class2;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/** @jsx jsx */
import { Component } from 'react';
import { testable } from '@instructure/ui-testable';
import { withStyle, jsx } from '@instructure/emotion';
import { InlineSVG } from '../InlineSVG';
import generateStyle from './styles';
import generateComponentTheme from './theme';
import { allowedProps, propTypes } from './props';

/**
---
category: components/utilities
---
@tsProps
**/
let SVGIcon = (_dec = withStyle(generateStyle, generateComponentTheme), _dec2 = testable(), _dec(_class = _dec2(_class = (_class2 = class SVGIcon extends Component {
  constructor() {
    super(...arguments);
    this.ref = null;

    this.handleRef = el => {
      const elementRef = this.props.elementRef;
      this.ref = el;

      if (typeof elementRef === 'function') {
        elementRef(el);
      }
    };
  }

  componentDidMount() {
    var _this$props$makeStyle, _this$props;

    (_this$props$makeStyle = (_this$props = this.props).makeStyles) === null || _this$props$makeStyle === void 0 ? void 0 : _this$props$makeStyle.call(_this$props);
  }

  componentDidUpdate() {
    var _this$props$makeStyle2, _this$props2;

    (_this$props$makeStyle2 = (_this$props2 = this.props).makeStyles) === null || _this$props$makeStyle2 === void 0 ? void 0 : _this$props$makeStyle2.call(_this$props2);
  }

  render() {
    const _this$props3 = this.props,
          rotate = _this$props3.rotate,
          className = _this$props3.className,
          themeOverride = _this$props3.themeOverride,
          size = _this$props3.size,
          bidirectional = _this$props3.bidirectional,
          makeStyles = _this$props3.makeStyles,
          styles = _this$props3.styles,
          props = _objectWithoutProperties(_this$props3, _excluded);

    const _ref = themeOverride,
          sizeXSmall = _ref.sizeXSmall,
          sizeSmall = _ref.sizeSmall,
          sizeMedium = _ref.sizeMedium,
          sizeLarge = _ref.sizeLarge,
          sizeXLarge = _ref.sizeXLarge,
          inlineSVGThemeOverrides = _objectWithoutProperties(_ref, _excluded2);

    return jsx(InlineSVG, Object.assign({}, props, {
      themeOverride: inlineSVGThemeOverrides,
      rotate: rotate,
      css: styles === null || styles === void 0 ? void 0 : styles.svgIcon,
      className: className,
      elementRef: this.handleRef
    }));
  }

}, _class2.displayName = "SVGIcon", _class2.componentId = 'SVGIcon', _class2.allowedProps = allowedProps, _class2.propTypes = propTypes, _class2.defaultProps = {
  rotate: '0',
  bidirectional: false
}, _class2)) || _class) || _class);
export default SVGIcon;
export { SVGIcon };