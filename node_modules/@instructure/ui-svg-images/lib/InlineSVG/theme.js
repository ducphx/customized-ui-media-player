"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/* Global variables (colors, typography, spacing, etc.) are defined in lib/themes */

/**
 * Generates the theme object for the component from the theme and provided additional information
 * @param  {Object} theme The actual theme object.
 * @return {Object} The final theme object with the overrides and component variables
 */
const generateComponentTheme = theme => {
  const colors = theme.colors,
        themeName = theme.key;
  const themeSpecificStyle = {
    canvas: {
      primaryColor: theme['ic-brand-font-color-dark'],
      brandColor: theme['ic-brand-primary']
    }
  };
  const componentVariables = {
    primaryInverseColor: colors === null || colors === void 0 ? void 0 : colors.textLightest,
    primaryColor: colors === null || colors === void 0 ? void 0 : colors.textDarkest,
    secondaryColor: colors === null || colors === void 0 ? void 0 : colors.textDark,
    secondaryInverseColor: colors === null || colors === void 0 ? void 0 : colors.textLight,
    warningColor: colors === null || colors === void 0 ? void 0 : colors.textWarning,
    brandColor: colors === null || colors === void 0 ? void 0 : colors.textBrand,
    errorColor: colors === null || colors === void 0 ? void 0 : colors.textDanger,
    alertColor: colors === null || colors === void 0 ? void 0 : colors.textAlert,
    successColor: colors === null || colors === void 0 ? void 0 : colors.textSuccess
  };
  return { ...componentVariables,
    ...themeSpecificStyle[themeName]
  };
};

var _default = generateComponentTheme;
exports.default = _default;