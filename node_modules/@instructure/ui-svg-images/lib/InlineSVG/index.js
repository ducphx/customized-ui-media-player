"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.InlineSVG = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = require("react");

var _omitProps = require("@instructure/ui-react-utils/lib/omitProps.js");

var _withDeterministicId = require("@instructure/ui-react-utils/lib/DeterministicIdContext/withDeterministicId.js");

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _emotion = require("@instructure/emotion");

var _styles = _interopRequireDefault(require("./styles"));

var _theme = _interopRequireDefault(require("./theme"));

var _props = require("./props");

const _excluded = ["style", "title", "description", "focusable", "children", "src", "styles"];

var _dec, _dec2, _dec3, _class, _class2;

/**
---
category: components/utilities
---
@tsProps
**/
let InlineSVG = (_dec = (0, _withDeterministicId.withDeterministicId)(), _dec2 = (0, _emotion.withStyle)(_styles.default, _theme.default), _dec3 = (0, _testable.testable)(), _dec(_class = _dec2(_class = _dec3(_class = (_class2 = class InlineSVG extends _react.Component {
  constructor(props) {
    super(props);
    this.titleId = void 0;
    this.descId = void 0;
    this.ref = null;

    this.handleRef = el => {
      const elementRef = this.props.elementRef;
      this.ref = el;

      if (typeof elementRef === 'function') {
        elementRef(el);
      }
    };

    this.titleId = props.deterministicId('InlineSVG-title');
    this.descId = props.deterministicId('InlineSVG-desc');
  }

  componentDidMount() {
    var _this$props$makeStyle, _this$props;

    (_this$props$makeStyle = (_this$props = this.props).makeStyles) === null || _this$props$makeStyle === void 0 ? void 0 : _this$props$makeStyle.call(_this$props);
  }

  componentDidUpdate() {
    var _this$props$makeStyle2, _this$props2;

    (_this$props$makeStyle2 = (_this$props2 = this.props).makeStyles) === null || _this$props$makeStyle2 === void 0 ? void 0 : _this$props$makeStyle2.call(_this$props2);
  }

  get role() {
    if (this.props.title) {
      return 'img';
    } else {
      return 'presentation';
    }
  }

  renderTitle() {
    const title = this.props.title;
    return title ? (0, _emotion.jsx)("title", {
      id: this.titleId
    }, title) : null;
  }

  renderDesc(desc) {
    return desc ? (0, _emotion.jsx)("desc", {
      id: this.descId
    }, desc) : null;
  }

  get labelledBy() {
    const ids = [];

    if (this.props.title) {
      ids.push(this.titleId);
    }

    if (this.props.description) {
      ids.push(this.descId);
    }

    return ids.length > 0 ? ids.join(' ') : void 0;
  }

  renderContent() {
    if (this.props.src) {
      const src = InlineSVG.prepareSrc(this.props.src);
      return (0, _emotion.jsx)("g", {
        role: "presentation" // eslint-disable-next-line react/no-danger
        ,
        dangerouslySetInnerHTML: {
          __html: src
        }
      });
    } else {
      return (0, _emotion.jsx)("g", {
        role: "presentation"
      }, this.props.children);
    }
  }

  render() {
    const _this$props3 = this.props,
          style = _this$props3.style,
          title = _this$props3.title,
          description = _this$props3.description,
          focusable = _this$props3.focusable,
          children = _this$props3.children,
          src = _this$props3.src,
          styles = _this$props3.styles,
          props = (0, _objectWithoutProperties2.default)(_this$props3, _excluded); // if width or height are 'auto', don't supply anything to the SVG

    const width = this.props.width === 'auto' ? void 0 : this.props.width;
    const height = this.props.height === 'auto' ? void 0 : this.props.height;
    return (0, _emotion.jsx)("svg", Object.assign({}, parseAttributes(src), (0, _omitProps.omitProps)(this.props, InlineSVG.allowedProps, ['inline']), {
      style: { ...style,
        width,
        height
      },
      width: width,
      height: height,
      "aria-hidden": title ? void 0 : 'true',
      "aria-labelledby": this.labelledBy,
      role: this.role,
      focusable: focusable ? 'true' : 'false',
      css: styles === null || styles === void 0 ? void 0 : styles.inlineSVG,
      className: props.className,
      ref: this.handleRef
    }), this.renderTitle(), this.renderDesc(description), this.renderContent());
  }

}, _class2.displayName = "InlineSVG", _class2.componentId = 'InlineSVG', _class2.allowedProps = _props.allowedProps, _class2.propTypes = _props.propTypes, _class2.defaultProps = {
  focusable: false,
  src: '',
  title: '',
  description: '',
  inline: true,
  width: '1em',
  height: '1em',
  color: 'inherit'
}, _class2.prepareSrc = src => {
  const pattern = /<svg[^>]*>((.|[\n\r])*)<\/svg>/;
  const matches = pattern.exec(src);
  return matches ? matches[1] : src;
}, _class2)) || _class) || _class) || _class);
exports.InlineSVG = InlineSVG;

function parseAttributes(src) {
  const attributes = {};
  const SVGAttributesRegExp = /<svg\s+([^>]*)\s*>/;
  const namesAndValuesRegExp = /(\S+)=["']?((?:.(?!["']?\s+(?:\S+)=|[>"']))+.)["']?/g;

  if (typeof src === 'string') {
    const attributesMatches = SVGAttributesRegExp.exec(src);
    const attributesString = attributesMatches ? attributesMatches[1] : '';
    const excludes = ['xmlns', 'xmlns:xlink', 'version'];
    let match = namesAndValuesRegExp.exec(attributesString);

    while (match != null) {
      if (excludes.indexOf(match[1]) === -1) {
        attributes[match[1]] = match[2] || (match[3] ? match[3] : match[4] ? match[4] : match[5]) || match[1]; // eslint-disable-line no-nested-ternary, max-len
      }

      match = namesAndValuesRegExp.exec(attributesString);
    }
  }

  return attributes;
}

var _default = InlineSVG;
exports.default = _default;