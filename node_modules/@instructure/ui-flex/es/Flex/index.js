var _dec, _class, _class2;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/** @jsx jsx */
import React, { Children, Component } from 'react';
import { safeCloneElement, passthroughProps, matchComponentTypes, callRenderProp } from '@instructure/ui-react-utils';
import { View } from '@instructure/ui-view';
import { withStyle, jsx } from '@instructure/emotion';
import { Item } from './Item';
import generateStyle from './styles';
import generateComponentTheme from './theme';
import { propTypes, allowedProps } from './props';

/**
---
category: components
---
@module Flex
@tsProps
**/
let Flex = (_dec = withStyle(generateStyle, generateComponentTheme), _dec(_class = (_class2 = class Flex extends Component {
  constructor() {
    super(...arguments);
    this.ref = null;

    this.handleRef = el => {
      const elementRef = this.props.elementRef;
      this.ref = el;

      if (typeof elementRef === 'function') {
        elementRef(el);
      }
    };
  }

  componentDidMount() {
    var _this$props$makeStyle, _this$props;

    (_this$props$makeStyle = (_this$props = this.props).makeStyles) === null || _this$props$makeStyle === void 0 ? void 0 : _this$props$makeStyle.call(_this$props);
  }

  componentDidUpdate() {
    var _this$props$makeStyle2, _this$props2;

    (_this$props$makeStyle2 = (_this$props2 = this.props).makeStyles) === null || _this$props$makeStyle2 === void 0 ? void 0 : _this$props$makeStyle2.call(_this$props2);
  }

  renderChildren(children) {
    return Children.map(children, child => {
      if (!child) {
        return null;
      }

      return matchComponentTypes(child, ['Item']) ? safeCloneElement(child, {
        // child withVisualDebug prop should override parent
        withVisualDebug: this.props.withVisualDebug,
        ...child.props,
        direction: this.props.direction.replace(/-reverse/, '')
      }) : child;
    });
  }

  render() {
    const _this$props3 = this.props,
          as = _this$props3.as,
          withVisualDebug = _this$props3.withVisualDebug,
          height = _this$props3.height,
          display = _this$props3.display,
          margin = _this$props3.margin,
          padding = _this$props3.padding,
          textAlign = _this$props3.textAlign,
          width = _this$props3.width,
          styles = _this$props3.styles;
    const children = callRenderProp(this.props.children);

    if (children && Children.count(children) > 0) {
      return jsx(View, Object.assign({}, passthroughProps(this.props), {
        css: styles === null || styles === void 0 ? void 0 : styles.flex,
        elementRef: this.handleRef,
        as: as,
        display: display,
        width: width,
        height: height,
        margin: margin,
        padding: padding,
        textAlign: textAlign,
        withVisualDebug: withVisualDebug
      }), this.renderChildren(children));
    } else {
      return null;
    }
  }

}, _class2.displayName = "Flex", _class2.componentId = 'Flex', _class2.Item = Item, _class2.propTypes = propTypes, _class2.allowedProps = allowedProps, _class2.defaultProps = {
  as: 'span',
  direction: 'row',
  justifyItems: 'start',
  display: 'flex',
  withVisualDebug: false,
  wrap: 'no-wrap'
}, _class2)) || _class);
export default Flex;
export { Flex, Item as FlexItem };