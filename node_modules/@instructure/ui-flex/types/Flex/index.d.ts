/** @jsx jsx */
import React, { Component } from 'react';
import { jsx } from '@instructure/emotion';
import { Item } from './Item';
import type { FlexProps } from './props';
/**
---
category: components
---
@module Flex
@tsProps
**/
declare class Flex extends Component<FlexProps> {
    static readonly componentId = "Flex";
    componentDidMount(): void;
    componentDidUpdate(): void;
    static Item: typeof Item;
    static propTypes: import("@instructure/shared-types/types/UtilityTypes").PropValidators<keyof {
        children?: React.ReactNode | (() => React.ReactNode);
        as?: import("@instructure/shared-types/types/CommonProps").AsElementType | undefined;
        elementRef?: ((element: Element | null) => void) | undefined;
        height?: string | number | undefined;
        width?: string | number | undefined;
        margin?: import("@instructure/emotion/types/styleUtils/ThemeablePropValues").Spacing | undefined;
        padding?: import("@instructure/emotion/types/styleUtils/ThemeablePropValues").Spacing | undefined;
        display?: "flex" | "inline-flex" | undefined;
        textAlign?: "center" | "start" | "end" | undefined;
        direction?: "row" | "column" | "row-reverse" | "column-reverse" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyItems?: "center" | "start" | "end" | "space-around" | "space-between" | undefined;
        wrap?: "wrap" | "no-wrap" | "wrap-reverse" | undefined;
        withVisualDebug?: boolean | undefined;
    }>;
    static allowedProps: readonly (keyof {
        children?: React.ReactNode | (() => React.ReactNode);
        as?: import("@instructure/shared-types/types/CommonProps").AsElementType | undefined;
        elementRef?: ((element: Element | null) => void) | undefined;
        height?: string | number | undefined;
        width?: string | number | undefined;
        margin?: import("@instructure/emotion/types/styleUtils/ThemeablePropValues").Spacing | undefined;
        padding?: import("@instructure/emotion/types/styleUtils/ThemeablePropValues").Spacing | undefined;
        display?: "flex" | "inline-flex" | undefined;
        textAlign?: "center" | "start" | "end" | undefined;
        direction?: "row" | "column" | "row-reverse" | "column-reverse" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyItems?: "center" | "start" | "end" | "space-around" | "space-between" | undefined;
        wrap?: "wrap" | "no-wrap" | "wrap-reverse" | undefined;
        withVisualDebug?: boolean | undefined;
    })[];
    static defaultProps: {
        as: string;
        direction: string;
        justifyItems: string;
        display: string;
        withVisualDebug: boolean;
        wrap: string;
    };
    ref: Element | null;
    handleRef: (el: Element | null) => void;
    renderChildren(children: FlexProps['children']): {}[] | null | undefined;
    render(): jsx.JSX.Element | null;
}
export default Flex;
export { Flex, Item as FlexItem };
//# sourceMappingURL=index.d.ts.map