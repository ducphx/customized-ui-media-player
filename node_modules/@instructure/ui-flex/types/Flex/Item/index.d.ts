/** @jsx jsx */
import { Component } from 'react';
import { jsx } from '@instructure/emotion';
import type { FlexItemProps } from './props';
/**
---
parent: Flex
id: Flex.Item
---
@tsProps
**/
declare class Item extends Component<FlexItemProps> {
    static readonly componentId = "Flex.Item";
    componentDidMount(): void;
    componentDidUpdate(): void;
    static propTypes: import("@instructure/shared-types/types/UtilityTypes").PropValidators<keyof {
        children?: import("react").ReactNode;
        as?: import("@instructure/shared-types/types/CommonProps").AsElementType | undefined;
        elementRef?: ((element: Element | null) => void) | undefined;
        margin?: import("@instructure/emotion/types/styleUtils/ThemeablePropValues").Spacing | undefined;
        padding?: import("@instructure/emotion/types/styleUtils/ThemeablePropValues").Spacing | undefined;
        align?: "center" | "start" | "end" | "stretch" | undefined;
        direction?: "row" | "column" | undefined;
        textAlign?: "center" | "start" | "end" | undefined;
        overflowX?: "auto" | "hidden" | "visible" | undefined;
        overflowY?: "auto" | "hidden" | "visible" | undefined;
        shouldGrow?: boolean | undefined;
        shouldShrink?: boolean | undefined;
        size?: string | undefined;
        withVisualDebug?: boolean | undefined;
    }>;
    static allowedProps: readonly (keyof {
        children?: import("react").ReactNode;
        as?: import("@instructure/shared-types/types/CommonProps").AsElementType | undefined;
        elementRef?: ((element: Element | null) => void) | undefined;
        margin?: import("@instructure/emotion/types/styleUtils/ThemeablePropValues").Spacing | undefined;
        padding?: import("@instructure/emotion/types/styleUtils/ThemeablePropValues").Spacing | undefined;
        align?: "center" | "start" | "end" | "stretch" | undefined;
        direction?: "row" | "column" | undefined;
        textAlign?: "center" | "start" | "end" | undefined;
        overflowX?: "auto" | "hidden" | "visible" | undefined;
        overflowY?: "auto" | "hidden" | "visible" | undefined;
        shouldGrow?: boolean | undefined;
        shouldShrink?: boolean | undefined;
        size?: string | undefined;
        withVisualDebug?: boolean | undefined;
    })[];
    static defaultProps: {
        as: string;
        shouldGrow: boolean;
        shouldShrink: boolean;
    };
    ref: Element | null;
    handleRef: (el: Element | null) => void;
    render(): jsx.JSX.Element;
}
export default Item;
export { Item };
//# sourceMappingURL=index.d.ts.map