import React from 'react';
import type { AsElementType, OtherHTMLAttributes, PropValidators } from '@instructure/shared-types';
import type { Spacing, WithStyleProps, ComponentStyle } from '@instructure/emotion';
declare type FlexItemOwnProps = {
    /**
     * The children to render inside the Item
     */
    children?: React.ReactNode;
    /**
     * the element type to render as
     */
    as?: AsElementType;
    /**
     * provides a reference to the underlying html root element
     */
    elementRef?: (element: Element | null) => void;
    /**
     * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
     * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
     * familiar CSS-like shorthand. For example: `margin="small auto large"`.
     */
    margin?: Spacing;
    /**
     * Valid values are `0`, `none`, `xxx-small`, `xx-small`, `x-small`,
     * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
     * familiar CSS-like shorthand. For example: `padding="small x-large large"`.
     */
    padding?: Spacing;
    /**
     * overrides the parent Flex's alignItems prop, if needed
     */
    align?: 'center' | 'start' | 'end' | 'stretch';
    /**
     * Inherits from the parent Flex component
     */
    direction?: 'row' | 'column';
    /**
     * Designates the text alignment inside the Item
     */
    textAlign?: 'start' | 'center' | 'end';
    /**
     * Handles horizontal overflow
     */
    overflowX?: 'auto' | 'hidden' | 'visible';
    /**
     * Handles vertical overflow
     */
    overflowY?: 'auto' | 'hidden' | 'visible';
    /**
     * Should the FlexItem grow to fill any available space?
     */
    shouldGrow?: boolean;
    /**
     * Should the FlexItem shrink (stopping at its `size`)?
     */
    shouldShrink?: boolean;
    /**
     * Sets the base size of the FlexItem (width if direction is `row`; height if direction is `column`)
     */
    size?: string;
    /**
     * Places dashed lines around the component's borders to help debug your layout
     */
    withVisualDebug?: boolean;
};
declare type PropKeys = keyof FlexItemOwnProps;
declare type AllowedPropKeys = Readonly<Array<PropKeys>>;
declare type FlexItemProps = FlexItemOwnProps & WithStyleProps<null, FlexItemStyle> & OtherHTMLAttributes<FlexItemOwnProps>;
declare type FlexItemStyle = ComponentStyle<'flexItem'>;
declare const propTypes: PropValidators<PropKeys>;
declare const allowedProps: AllowedPropKeys;
export type { FlexItemProps, FlexItemStyle };
export { propTypes, allowedProps };
//# sourceMappingURL=props.d.ts.map