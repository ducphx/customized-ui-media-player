import React from 'react';
import type { AsElementType, PropValidators, FlexTheme, OtherHTMLAttributes } from '@instructure/shared-types';
import type { Spacing, WithStyleProps, ComponentStyle } from '@instructure/emotion';
declare type FlexOwnProps = {
    /**
     * It's recommended that you use `Flex.Item` for children, but you can also
     * pass any markup or a function returning markup.
     *
     * Note that if you do not use `Flex.Item`, the `withVisualDebug` and
     * `direction` props will not automatically be set on the children.
     */
    children?: React.ReactNode | (() => React.ReactNode);
    /**
     * the element type to render as
     */
    as?: AsElementType;
    /**
     * provides a reference to the underlying html root element
     */
    elementRef?: (element: Element | null) => void;
    /**
     * Sets the height of the component's container (optional)
     */
    height?: string | number;
    /**
     * Sets the width of the component's container (optional)
     */
    width?: string | number;
    /**
     * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
     * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
     * familiar CSS-like shorthand. For example: `margin="small auto large"`.
     */
    margin?: Spacing;
    /**
     * Valid values are `0`, `none`, `xxx-small`, `xx-small`, `x-small`,
     * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
     * familiar CSS-like shorthand. For example: `padding="small x-large large"`.
     */
    padding?: Spacing;
    /**
     * Sets the CSS display rule for the component's container
     */
    display?: 'flex' | 'inline-flex';
    /**
     * Designates the text alignment
     */
    textAlign?: 'start' | 'center' | 'end';
    /**
     * Sets the flex-direction to row (horizontal) or column (vertical)
     */
    direction?: 'row' | 'column' | 'row-reverse' | 'column-reverse';
    /**
     * Aligns Flex.Items on the vertical axis (horizontal if direction is column)
     */
    alignItems?: 'center' | 'start' | 'end' | 'stretch';
    /**
     * Aligns Flex.Items on the horizontal axis (vertical if direction is column)
     */
    justifyItems?: 'center' | 'start' | 'end' | 'space-around' | 'space-between';
    /**
     * Determines if the Flex.Items should wrap when they exceed their container's width
     */
    wrap?: 'wrap' | 'no-wrap' | 'wrap-reverse';
    /**
     * Activate a dotted outline around the component to make building your
     * layout easier
     */
    withVisualDebug?: boolean;
};
declare type PropKeys = keyof FlexOwnProps;
declare type AllowedPropKeys = Readonly<Array<PropKeys>>;
declare type FlexProps = FlexOwnProps & WithStyleProps<FlexTheme, FlexStyle> & OtherHTMLAttributes<FlexOwnProps>;
declare type FlexStyle = ComponentStyle<'flex'>;
declare const propTypes: PropValidators<PropKeys>;
declare const allowedProps: AllowedPropKeys;
export type { FlexProps, FlexStyle };
export { propTypes, allowedProps };
//# sourceMappingURL=props.d.ts.map