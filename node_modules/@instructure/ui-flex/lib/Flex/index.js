"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Flex = void 0;
Object.defineProperty(exports, "FlexItem", {
  enumerable: true,
  get: function () {
    return _Item.Item;
  }
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _safeCloneElement = require("@instructure/ui-react-utils/lib/safeCloneElement.js");

var _passthroughProps = require("@instructure/ui-react-utils/lib/passthroughProps.js");

var _matchComponentTypes = require("@instructure/ui-react-utils/lib/matchComponentTypes.js");

var _callRenderProp = require("@instructure/ui-react-utils/lib/callRenderProp.js");

var _View = require("@instructure/ui-view/lib/View");

var _emotion = require("@instructure/emotion");

var _Item = require("./Item");

var _styles = _interopRequireDefault(require("./styles"));

var _theme = _interopRequireDefault(require("./theme"));

var _props = require("./props");

var _dec, _class, _class2;

/**
---
category: components
---
@module Flex
@tsProps
**/
let Flex = (_dec = (0, _emotion.withStyle)(_styles.default, _theme.default), _dec(_class = (_class2 = class Flex extends _react.Component {
  constructor() {
    super(...arguments);
    this.ref = null;

    this.handleRef = el => {
      const elementRef = this.props.elementRef;
      this.ref = el;

      if (typeof elementRef === 'function') {
        elementRef(el);
      }
    };
  }

  componentDidMount() {
    var _this$props$makeStyle, _this$props;

    (_this$props$makeStyle = (_this$props = this.props).makeStyles) === null || _this$props$makeStyle === void 0 ? void 0 : _this$props$makeStyle.call(_this$props);
  }

  componentDidUpdate() {
    var _this$props$makeStyle2, _this$props2;

    (_this$props$makeStyle2 = (_this$props2 = this.props).makeStyles) === null || _this$props$makeStyle2 === void 0 ? void 0 : _this$props$makeStyle2.call(_this$props2);
  }

  renderChildren(children) {
    return _react.Children.map(children, child => {
      if (!child) {
        return null;
      }

      return (0, _matchComponentTypes.matchComponentTypes)(child, ['Item']) ? (0, _safeCloneElement.safeCloneElement)(child, {
        // child withVisualDebug prop should override parent
        withVisualDebug: this.props.withVisualDebug,
        ...child.props,
        direction: this.props.direction.replace(/-reverse/, '')
      }) : child;
    });
  }

  render() {
    const _this$props3 = this.props,
          as = _this$props3.as,
          withVisualDebug = _this$props3.withVisualDebug,
          height = _this$props3.height,
          display = _this$props3.display,
          margin = _this$props3.margin,
          padding = _this$props3.padding,
          textAlign = _this$props3.textAlign,
          width = _this$props3.width,
          styles = _this$props3.styles;
    const children = (0, _callRenderProp.callRenderProp)(this.props.children);

    if (children && _react.Children.count(children) > 0) {
      return (0, _emotion.jsx)(_View.View, Object.assign({}, (0, _passthroughProps.passthroughProps)(this.props), {
        css: styles === null || styles === void 0 ? void 0 : styles.flex,
        elementRef: this.handleRef,
        as: as,
        display: display,
        width: width,
        height: height,
        margin: margin,
        padding: padding,
        textAlign: textAlign,
        withVisualDebug: withVisualDebug
      }), this.renderChildren(children));
    } else {
      return null;
    }
  }

}, _class2.displayName = "Flex", _class2.componentId = 'Flex', _class2.Item = _Item.Item, _class2.propTypes = _props.propTypes, _class2.allowedProps = _props.allowedProps, _class2.defaultProps = {
  as: 'span',
  direction: 'row',
  justifyItems: 'start',
  display: 'flex',
  withVisualDebug: false,
  wrap: 'no-wrap'
}, _class2)) || _class);
exports.Flex = Flex;
var _default = Flex;
exports.default = _default;