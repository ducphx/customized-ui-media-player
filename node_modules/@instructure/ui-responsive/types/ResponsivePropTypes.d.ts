import { BreakpointQueries } from './QueryType';
declare const ResponsivePropTypes: {
    /**
     * Verify that the given prop is a properly formatted query object
     * with exactly one key and one corresponding valid value of type
     * string or number. The object key should be one of `minWidth`,
     * `maxWidth`, `minHeight`, or `maxHeight`. Note that key values
     * should be camel cased.
     *
     *
     * The following are examples of valid query objects:
     *
     * ```js
     * { minWidth: 350 }
     * { maxHeight: '400px' }
     * { maxWidth: '20rem' }
     * ```
     *
     * The following are examples of invalid query objects:
     *
     * ```js
     * { minwidth: 300 } // should be minWidth (case sensitive)
     * { minHeight: 200, maxHeight: 300 } // should consist of exactly one key
     * ```
     * @param {Object} props - object containing the component props
     * @param {string} propName - name of the given prop
     * @param {string} componentName - name of the component
     * @returns {Error} if prop is an invalid query
     */
    validQuery(props: BreakpointQueries, propName: string, componentName: string): Error | null;
};
export default ResponsivePropTypes;
export { 
/**
 * ---
 * category: utilities/layout
 * ---
 * Custom prop types for `ui-responsive` components.
 * @module ResponsivePropTypes
 */
ResponsivePropTypes };
//# sourceMappingURL=ResponsivePropTypes.d.ts.map