import React, { Component } from 'react';
import { BreakpointQueries, QueriesMatching, UpdateMatches } from '../QueryType';
import type { ResponsiveByBreakpointProps, ResponsiveProps, ResponsivePropsObject } from './props';
/**
---
category: components
---
@tsProps
**/
declare class Responsive extends Component<ResponsiveProps> {
    static allowedProps: readonly (keyof {
        query: BreakpointQueries;
        match?: "element" | "media" | undefined;
        props?: ResponsiveByBreakpointProps | undefined;
        render?: ((props?: ResponsivePropsObject | null | undefined, matches?: QueriesMatching | undefined) => any) | undefined;
        children?: ((props?: ResponsivePropsObject | null | undefined, matches?: QueriesMatching | undefined) => any) | undefined;
        display?: "inline" | "block" | "inline-block" | "flex" | "inline-flex" | undefined;
    })[];
    static propTypes: import("@instructure/shared-types/types/UtilityTypes").PropValidators<keyof {
        query: BreakpointQueries;
        match?: "element" | "media" | undefined;
        props?: ResponsiveByBreakpointProps | undefined;
        render?: ((props?: ResponsivePropsObject | null | undefined, matches?: QueriesMatching | undefined) => any) | undefined;
        children?: ((props?: ResponsivePropsObject | null | undefined, matches?: QueriesMatching | undefined) => any) | undefined;
        display?: "inline" | "block" | "inline-block" | "flex" | "inline-flex" | undefined;
    }>;
    static defaultProps: {
        children: null;
        match: string;
        props: null;
    };
    ref: React.RefObject<HTMLDivElement>;
    _matchListener: {
        remove(): void;
    } | null;
    state: {
        matches: QueriesMatching;
        hasRendered: boolean;
    };
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(prevProps: ResponsiveProps): void;
    addMatchListener(query: BreakpointQueries, updateMatches: UpdateMatches, match?: "element" | "media" | undefined): {
        remove: () => void;
    };
    removeMatchListener(): void;
    updateMatches: UpdateMatches;
    mergeProps(matches: QueriesMatching, props?: ResponsiveByBreakpointProps): ResponsivePropsObject | null;
    render(): JSX.Element;
}
export default Responsive;
export { Responsive };
//# sourceMappingURL=index.d.ts.map