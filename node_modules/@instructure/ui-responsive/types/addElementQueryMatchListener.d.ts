import { Size } from './parseQuery';
import { BreakpointQueries, QueriesMatching, QueryMatchListener } from './QueryType';
import { UIElement } from '@instructure/shared-types';
/**
 * ---
 * category: utilities/layout
 * ---
 * Given an object of named queries, listens for changes in the
 * element size and notifies which queries match via a function
 * callback. The callback method is only called when the query
 * matches change, not on all element resizes. (If you are looking
 * to call a method on all element resizes use
 * [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver) instead)
 *
 *
 * This function shares an interface with
 * [addMediaQueryMatchListener](#addMediaQueryMatchListener)
 * so that they can be used interchangeably.
 *
 * The [Responsive](#Responsive) component with the `match` prop
 * set to `element` utilizes this function. This is a low level
 * utility method and, in most cases, [Responsive](#Responsive)
 * should be used instead.
 *
 * ```js
 * class MyComponent extends Component {
 *   state = {
 *     matches: []
 *   }
 *
 *   _listener = null
 *
 *   componentDidMount () {
 *     const query = {myFirstQuery: { minWidth: 100 }, mySecondQuery: { maxHeight: '30rem'}}
 *     const el = findDOMNode(this)
 *
 *     this._listener = addElementQueryMatchListener(query, el, this.updateMatches)
 *   }
 *
 *   componentWillUnmount () {
 *     if (this._listener) {
 *       this._listener.remove()
 *     }
 *   }
 *
 *   updateMatches = (matches) => {
 *     this.setState({ matches })
 *   }
 *   ...
 * }
 * ```
 * @module addElementQueryMatchListener
 * @param {Object} query - object consisting of names and query objects
 * @param {Node|Window|React.ReactElement|React.Component|function} el - a DOM node or a function returning a DOM node
 * @param {function} cb - called with an array of the names of the currently
 * matching queries whenever a matching query changes
 * @returns {function} remove() function to call to remove the listener
 */
declare const addElementQueryMatchListener: QueryMatchListener;
declare function updateElementMatches(query: BreakpointQueries, el?: UIElement, matches?: string[], size?: Size): QueriesMatching | null;
export default addElementQueryMatchListener;
export { addElementQueryMatchListener, updateElementMatches };
//# sourceMappingURL=addElementQueryMatchListener.d.ts.map