"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Responsive = void 0;

var _react = _interopRequireWildcard(require("react"));

var _deepEqual = require("@instructure/ui-utils/lib/deepEqual.js");

var _console = require("@instructure/console");

var _addElementQueryMatchListener = require("../addElementQueryMatchListener");

var _addMediaQueryMatchListener = require("../addMediaQueryMatchListener");

var _findDOMNode = require("@instructure/ui-dom-utils/lib/findDOMNode.js");

var _props = require("./props");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
---
category: components
---
@tsProps
**/
class Responsive extends _react.Component {
  constructor() {
    super(...arguments);
    this.ref = /*#__PURE__*/(0, _react.createRef)();
    this._matchListener = null;
    this.state = {
      matches: [],
      hasRendered: false
    };

    this.updateMatches = (matches, cb) => {
      this.setState({
        matches
      }, () => {
        if (typeof cb === 'function') {
          cb();
        }
      });
    };
  }

  componentDidMount() {
    (0, _console.logError)(!!(this.props.render || this.props.children), `[Responsive] must have either a \`render\` prop or \`children\` prop.`);

    if (this.props.match === 'element') {
      // Because Responsive renders an empty div initially, it always needs to
      // re-render with the children provided. If there are no matches the match
      // listener won't trigger an update, so we handle this update explicitly.
      const initialMatches = (0, _addElementQueryMatchListener.updateElementMatches)(this.props.query, this) || [];
      this.setState({
        matches: initialMatches,
        hasRendered: true
      });
    } else {
      this.setState({
        hasRendered: true
      });
    }

    this._matchListener = this.addMatchListener(this.props.query, this.updateMatches);
  }

  componentWillUnmount() {
    this.removeMatchListener();
  }

  componentDidUpdate(prevProps) {
    const _this$props = this.props,
          match = _this$props.match,
          query = _this$props.query;

    if (match !== prevProps.match || !(0, _deepEqual.deepEqual)(query, prevProps.query)) {
      this.removeMatchListener();
      this._matchListener = this.addMatchListener(query, this.updateMatches, match);
    }
  }

  addMatchListener(query, updateMatches) {
    let match = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.props.match;
    const matchListener = match === 'element' ? _addElementQueryMatchListener.addElementQueryMatchListener : _addMediaQueryMatchListener.addMediaQueryMatchListener;
    return matchListener(query, () => (0, _findDOMNode.findDOMNode)(this), updateMatches);
  }

  removeMatchListener() {
    if (this._matchListener) {
      this._matchListener.remove();
    }
  }

  mergeProps(matches, props) {
    if (!props) {
      return null;
    }

    const mergedProps = {};
    matches.forEach(match => {
      const matchProps = props[match]; // Iterate over the props for the current match. If that the prop is
      // already in `mergedProps` that means that the prop was defined for
      // multiple breakpoints, and more than one of those breakpoints is being
      // currently applied so we log a warning.

      Object.keys(matchProps).forEach(prop => {
        const currentValue = mergedProps[prop];
        (0, _console.warn)(!(prop in mergedProps), [`[Responsive] The prop \`${prop}\` is defined at 2 or more breakpoints`, `which are currently applied at the same time. Its current value, \`${currentValue}\`,`, `will be overwritten as \`${matchProps[prop]}\`.`].join(' '));
        mergedProps[prop] = matchProps[prop];
      });
    });
    return mergedProps;
  }

  render() {
    const _this$state = this.state,
          matches = _this$state.matches,
          hasRendered = _this$state.hasRendered;
    const _this$props2 = this.props,
          props = _this$props2.props,
          render = _this$props2.render,
          children = _this$props2.children,
          display = _this$props2.display;
    let renderFunc; // Responsive needs to render once to measure the dom and obtain matches.
    // Calling the render prop on this initial render can cause visual side
    // effects and is slower than rendering an empty div.

    if (hasRendered) {
      // Render via the children or render method, whichever is supplied. If
      // both are supplied, give preference to children.
      renderFunc = children || render;
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      ref: this.ref,
      style: {
        display
      }
    }, renderFunc && renderFunc(this.mergeProps(matches, props), matches));
  }

}

exports.Responsive = Responsive;
Responsive.displayName = "Responsive";
Responsive.allowedProps = _props.allowedProps;
Responsive.propTypes = _props.propTypes;
Responsive.defaultProps = {
  children: null,
  match: 'element',
  props: null
};
var _default = Responsive;
exports.default = _default;