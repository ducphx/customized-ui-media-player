"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.parseQuery = parseQuery;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _px = require("@instructure/ui-utils/lib/px.js");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * ---
 * category: utilities/layout
 * ---
 *
 * Given a query and an element, return a function that takes
 * size as an argument and returns an object consisting of
 * query names and a boolean true false if it matches.
 * @module parseQuery
 * @param {Object} query - an object consisting of query names
 *  mapped to individual queries
 * @param {Document | Window | Node | null} el - component or DOM node
 * @returns {function} takes size {width, height} as an argument
 *  and returns an object consisting of query names and boolean
 *  true false if it matches
 */
function parseQuery(query, el) {
  const rules = {}; // converting values to numerical values and adding initial values to all query keys

  Object.keys(query).forEach(selectorName => {
    const _query$selectorName = query[selectorName],
          minWidth = _query$selectorName.minWidth,
          maxWidth = _query$selectorName.maxWidth,
          minHeight = _query$selectorName.minHeight,
          maxHeight = _query$selectorName.maxHeight;
    rules[selectorName] = {
      minWidth: minWidth && (0, _px.px)(minWidth, el) || 0,
      maxWidth: maxWidth && (0, _px.px)(maxWidth, el) || Infinity,
      minHeight: minHeight && (0, _px.px)(minHeight, el) || 0,
      maxHeight: maxHeight && (0, _px.px)(maxHeight, el) || Infinity
    };
  });
  return function (_ref) {
    let width = _ref.width,
        height = _ref.height;
    const selectorMap = {};
    Object.entries(rules).forEach(_ref2 => {
      let _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
          selectorName = _ref3[0],
          query = _ref3[1];

      const minWidth = query.minWidth,
            maxWidth = query.maxWidth,
            minHeight = query.minHeight,
            maxHeight = query.maxHeight;
      selectorMap[selectorName] = minWidth <= width && width <= maxWidth && minHeight <= height && height <= maxHeight;
    });
    return selectorMap;
  };
}

var _default = parseQuery;
exports.default = _default;