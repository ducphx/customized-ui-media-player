"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RangeInput = void 0;

var _react = _interopRequireWildcard(require("react"));

var _console = require("@instructure/console");

var _ContextView = require("@instructure/ui-view/lib/ContextView");

var _FormField = require("@instructure/ui-form-field/lib/FormField");

var _addEventListener = require("@instructure/ui-dom-utils/lib/addEventListener.js");

var _emotion = require("@instructure/emotion");

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _omitProps = require("@instructure/ui-react-utils/lib/omitProps.js");

var _pickProps = require("@instructure/ui-react-utils/lib/pickProps.js");

var _withDeterministicId = require("@instructure/ui-react-utils/lib/DeterministicIdContext/withDeterministicId.js");

var _styles = _interopRequireDefault(require("./styles"));

var _theme = _interopRequireDefault(require("./theme"));

var _props = require("./props");

var _dec, _dec2, _dec3, _class, _class2;

/**
---
category: components
---
@tsProps
**/
let RangeInput = (_dec = (0, _withDeterministicId.withDeterministicId)(), _dec2 = (0, _emotion.withStyle)(_styles.default, _theme.default), _dec3 = (0, _testable.testable)(), _dec(_class = _dec2(_class = _dec3(_class = (_class2 = class RangeInput extends _react.Component {
  constructor(props) {
    super(props);
    this.ref = null;
    this._input = null;
    this._inputListener = null;
    this._changeListener = null;
    this.defaultId = void 0;

    this.handleRef = el => {
      this.ref = el;
    };

    this.handleChange = event => {
      const _this$props = this.props,
            onChange = _this$props.onChange,
            value = _this$props.value;

      if (typeof value === 'undefined') {
        this.setState({
          value: event.target.value
        });
      }

      if (typeof onChange === 'function') {
        onChange(event.target.value);
      }
    };

    this.noopChange = () => {};

    if (typeof props.value === 'undefined') {
      this.state = {
        value: props.defaultValue
      };
    }

    this.defaultId = props.deterministicId();
  }
  /* workaround for https://github.com/facebook/react/issues/554 */


  componentDidMount() {
    var _this$props$makeStyle, _this$props2;

    (_this$props$makeStyle = (_this$props2 = this.props).makeStyles) === null || _this$props$makeStyle === void 0 ? void 0 : _this$props$makeStyle.call(_this$props2);

    if (this._input !== null) {
      // https://connect.microsoft.com/IE/Feedback/Details/856998
      this._inputListener = (0, _addEventListener.addEventListener)(this._input, 'input', this.handleChange);
      this._changeListener = (0, _addEventListener.addEventListener)(this._input, 'change', this.handleChange);
    }
  }

  componentWillUnmount() {
    var _this$_inputListener, _this$_changeListener;

    if (!this._input) {
      return;
    }

    (_this$_inputListener = this._inputListener) === null || _this$_inputListener === void 0 ? void 0 : _this$_inputListener.remove();
    (_this$_changeListener = this._changeListener) === null || _this$_changeListener === void 0 ? void 0 : _this$_changeListener.remove();
  }
  /* end workaround */


  componentDidUpdate() {
    var _this$props$makeStyle2, _this$props3;

    (_this$props$makeStyle2 = (_this$props3 = this.props).makeStyles) === null || _this$props$makeStyle2 === void 0 ? void 0 : _this$props$makeStyle2.call(_this$props3);
  }

  get value() {
    const value = typeof this.props.value === 'undefined' ? this.state.value : this.props.value;
    return typeof value === 'string' ? parseInt(value) : value;
  }

  get invalid() {
    return this.props.messages && this.props.messages.findIndex(message => {
      return message.type === 'error';
    }) >= 0;
  }

  get id() {
    return this.props.id || this.defaultId;
  }

  renderValue() {
    if (this.props.displayValue) {
      var _this$props$styles;

      if (!this.value) {
        (0, _console.warn)(false, 'RangeInput should have a `value` or `defaultValue` set for the value to be displayed. If no value has to be displayed, set `displayValue={false}`.');
        return null;
      }

      return (0, _emotion.jsx)(_ContextView.ContextView, {
        background: "inverse",
        placement: "end center"
      }, (0, _emotion.jsx)("output", {
        htmlFor: this.id,
        css: (_this$props$styles = this.props.styles) === null || _this$props$styles === void 0 ? void 0 : _this$props$styles.rangeInputInputValue
      }, this.props.formatValue(this.value, this.props.max)));
    }

    return null;
  }

  render() {
    var _this$props$styles2, _this$props$styles3;

    const _this$props4 = this.props,
          formatValue = _this$props4.formatValue,
          disabled = _this$props4.disabled,
          readOnly = _this$props4.readOnly;
    const props = (0, _omitProps.omitProps)(this.props, RangeInput.allowedProps);
    /* eslint-disable jsx-a11y/no-redundant-roles */

    return (0, _emotion.jsx)(_FormField.FormField, Object.assign({}, (0, _pickProps.pickProps)(this.props, _FormField.FormField.allowedProps), {
      label: this.props.label,
      id: this.id,
      elementRef: this.handleRef
    }), (0, _emotion.jsx)("div", {
      css: (_this$props$styles2 = this.props.styles) === null || _this$props$styles2 === void 0 ? void 0 : _this$props$styles2.rangeInput
    }, (0, _emotion.jsx)("input", Object.assign({
      css: (_this$props$styles3 = this.props.styles) === null || _this$props$styles3 === void 0 ? void 0 : _this$props$styles3.rangeInputInput,
      ref: c => {
        this._input = c;
      },
      type: "range",
      role: "slider",
      id: this.id,
      min: this.props.min,
      max: this.props.max,
      step: this.props.step,
      value: this.value,
      onChange: this.noopChange,
      "aria-valuenow": this.value,
      "aria-valuemin": this.props.min,
      "aria-valuemax": this.props.max,
      "aria-valuetext": formatValue(this.value, this.props.max)
    }, props, {
      disabled: disabled || readOnly,
      "aria-disabled": disabled || readOnly ? 'true' : void 0
    })), this.renderValue()));
    /* eslint-enable jsx-a11y/no-redundant-roles */
  }

}, _class2.displayName = "RangeInput", _class2.componentId = 'RangeInput', _class2.allowedProps = _props.allowedProps, _class2.propTypes = _props.propTypes, _class2.defaultProps = {
  step: 1,
  formatValue: val => val,
  // If min and max has default value, they don't give a warning if not set, even if they are required props.
  // TODO: figure out if they don't need to be required or remove defaults in V9.
  max: 0,
  min: 0,
  inline: false,
  size: 'medium',
  layout: 'stacked',
  displayValue: true,
  disabled: false,
  readOnly: false,
  thumbVariant: 'deprecated'
}, _class2)) || _class) || _class) || _class);
exports.RangeInput = RangeInput;
var _default = RangeInput;
exports.default = _default;