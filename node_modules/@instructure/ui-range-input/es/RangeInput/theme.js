/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import { alpha, darken } from '@instructure/ui-color-utils';

/**
 * Generates the theme object for the component from the theme and provided additional information
 * @param  {Object} theme The actual theme object.
 * @return {Object} The final theme object with the overrides and component variables
 */
const generateComponentTheme = theme => {
  const colors = theme.colors,
        borders = theme.borders,
        typography = theme.typography,
        spacing = theme.spacing,
        forms = theme.forms,
        themeName = theme.key;
  const themeSpecificStyle = {
    canvas: {
      handleBackground: theme['ic-brand-primary'],
      handleHoverBackground: theme['ic-brand-primary'],
      handleFocusBackground: theme['ic-brand-primary'],
      // Deprecated, remove with "deprecated" thumbVariant
      handleShadowColor: darken(theme['ic-brand-primary'], 15),
      handleFocusOutlineColor: alpha(theme['ic-brand-primary'], 40)
    }
  };
  const componentVariables = {
    minWidth: '12.5rem',
    handleSize: '1.5rem',
    handleBackground: colors === null || colors === void 0 ? void 0 : colors.backgroundBrand,
    handleBorderColor: colors === null || colors === void 0 ? void 0 : colors.borderLightest,
    handleBorderSize: borders === null || borders === void 0 ? void 0 : borders.widthMedium,
    handleShadow: '0 0.0625rem 0.125rem rgba(0, 0, 0, .2), 0 0.0625rem 0.1875rem rgba(0, 0, 0, 0.1)',
    handleFocusInset: borders === null || borders === void 0 ? void 0 : borders.widthSmall,
    handleFocusRingSize: borders === null || borders === void 0 ? void 0 : borders.widthMedium,
    handleFocusRingColor: colors === null || colors === void 0 ? void 0 : colors.backgroundLightest,
    handleFocusBackground: colors === null || colors === void 0 ? void 0 : colors.backgroundBrand,
    handleHoverBackground: colors === null || colors === void 0 ? void 0 : colors.backgroundBrand,
    // Deprecated, remove with "deprecated" thumbVariant
    handleShadowColor: darken(colors === null || colors === void 0 ? void 0 : colors.borderBrand, 15),
    handleFocusOutlineColor: alpha(colors === null || colors === void 0 ? void 0 : colors.borderBrand, 40),
    handleFocusOutlineWidth: '0.75em',
    trackBackground: colors === null || colors === void 0 ? void 0 : colors.backgroundDark,
    valueColor: colors === null || colors === void 0 ? void 0 : colors.textLightest,
    valueFontFamily: typography === null || typography === void 0 ? void 0 : typography.fontFamily,
    valueFontWeight: typography === null || typography === void 0 ? void 0 : typography.fontWeightNormal,
    valueSmallFontSize: typography === null || typography === void 0 ? void 0 : typography.fontSizeSmall,
    valueSmallPadding: `0 ${spacing === null || spacing === void 0 ? void 0 : spacing.xSmall}`,
    valueSmallLineHeight: forms === null || forms === void 0 ? void 0 : forms.inputHeightSmall,
    valueMediumFontSize: typography === null || typography === void 0 ? void 0 : typography.fontSizeMedium,
    valueMediumPadding: `0 ${spacing === null || spacing === void 0 ? void 0 : spacing.small}`,
    valueMediumLineHeight: forms === null || forms === void 0 ? void 0 : forms.inputHeightMedium,
    valueLargeFontSize: typography === null || typography === void 0 ? void 0 : typography.fontSizeLarge,
    valueLargePadding: `0 ${spacing === null || spacing === void 0 ? void 0 : spacing.medium}`,
    valueLargeLineHeight: forms === null || forms === void 0 ? void 0 : forms.inputHeightLarge
  };
  return { ...componentVariables,
    ...themeSpecificStyle[themeName]
  };
};

export default generateComponentTheme;