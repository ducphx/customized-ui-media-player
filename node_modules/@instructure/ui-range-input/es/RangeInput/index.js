var _dec, _dec2, _dec3, _class, _class2;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/** @jsx jsx */
import React, { Component } from 'react';
import { warn } from '@instructure/console';
import { ContextView } from '@instructure/ui-view';
import { FormField } from '@instructure/ui-form-field';
import { addEventListener } from '@instructure/ui-dom-utils';
import { withStyle, jsx } from '@instructure/emotion';
import { testable } from '@instructure/ui-testable';
import { omitProps, pickProps, withDeterministicId } from '@instructure/ui-react-utils';
import generateStyle from './styles';
import generateComponentTheme from './theme';
import { allowedProps, propTypes } from './props';
/**
---
category: components
---
@tsProps
**/

let RangeInput = (_dec = withDeterministicId(), _dec2 = withStyle(generateStyle, generateComponentTheme), _dec3 = testable(), _dec(_class = _dec2(_class = _dec3(_class = (_class2 = class RangeInput extends Component {
  constructor(props) {
    super(props);
    this.ref = null;
    this._input = null;
    this._inputListener = null;
    this._changeListener = null;
    this.defaultId = void 0;

    this.handleRef = el => {
      this.ref = el;
    };

    this.handleChange = event => {
      const _this$props = this.props,
            onChange = _this$props.onChange,
            value = _this$props.value;

      if (typeof value === 'undefined') {
        this.setState({
          value: event.target.value
        });
      }

      if (typeof onChange === 'function') {
        onChange(event.target.value);
      }
    };

    this.noopChange = () => {};

    if (typeof props.value === 'undefined') {
      this.state = {
        value: props.defaultValue
      };
    }

    this.defaultId = props.deterministicId();
  }
  /* workaround for https://github.com/facebook/react/issues/554 */


  componentDidMount() {
    var _this$props$makeStyle, _this$props2;

    (_this$props$makeStyle = (_this$props2 = this.props).makeStyles) === null || _this$props$makeStyle === void 0 ? void 0 : _this$props$makeStyle.call(_this$props2);

    if (this._input !== null) {
      // https://connect.microsoft.com/IE/Feedback/Details/856998
      this._inputListener = addEventListener(this._input, 'input', this.handleChange);
      this._changeListener = addEventListener(this._input, 'change', this.handleChange);
    }
  }

  componentWillUnmount() {
    var _this$_inputListener, _this$_changeListener;

    if (!this._input) {
      return;
    }

    (_this$_inputListener = this._inputListener) === null || _this$_inputListener === void 0 ? void 0 : _this$_inputListener.remove();
    (_this$_changeListener = this._changeListener) === null || _this$_changeListener === void 0 ? void 0 : _this$_changeListener.remove();
  }
  /* end workaround */


  componentDidUpdate() {
    var _this$props$makeStyle2, _this$props3;

    (_this$props$makeStyle2 = (_this$props3 = this.props).makeStyles) === null || _this$props$makeStyle2 === void 0 ? void 0 : _this$props$makeStyle2.call(_this$props3);
  }

  get value() {
    const value = typeof this.props.value === 'undefined' ? this.state.value : this.props.value;
    return typeof value === 'string' ? parseInt(value) : value;
  }

  get invalid() {
    return this.props.messages && this.props.messages.findIndex(message => {
      return message.type === 'error';
    }) >= 0;
  }

  get id() {
    return this.props.id || this.defaultId;
  }

  renderValue() {
    if (this.props.displayValue) {
      var _this$props$styles;

      if (!this.value) {
        warn(false, 'RangeInput should have a `value` or `defaultValue` set for the value to be displayed. If no value has to be displayed, set `displayValue={false}`.');
        return null;
      }

      return jsx(ContextView, {
        background: "inverse",
        placement: "end center"
      }, jsx("output", {
        htmlFor: this.id,
        css: (_this$props$styles = this.props.styles) === null || _this$props$styles === void 0 ? void 0 : _this$props$styles.rangeInputInputValue
      }, this.props.formatValue(this.value, this.props.max)));
    }

    return null;
  }

  render() {
    var _this$props$styles2, _this$props$styles3;

    const _this$props4 = this.props,
          formatValue = _this$props4.formatValue,
          disabled = _this$props4.disabled,
          readOnly = _this$props4.readOnly;
    const props = omitProps(this.props, RangeInput.allowedProps);
    /* eslint-disable jsx-a11y/no-redundant-roles */

    return jsx(FormField, Object.assign({}, pickProps(this.props, FormField.allowedProps), {
      label: this.props.label,
      id: this.id,
      elementRef: this.handleRef
    }), jsx("div", {
      css: (_this$props$styles2 = this.props.styles) === null || _this$props$styles2 === void 0 ? void 0 : _this$props$styles2.rangeInput
    }, jsx("input", Object.assign({
      css: (_this$props$styles3 = this.props.styles) === null || _this$props$styles3 === void 0 ? void 0 : _this$props$styles3.rangeInputInput,
      ref: c => {
        this._input = c;
      },
      type: "range",
      role: "slider",
      id: this.id,
      min: this.props.min,
      max: this.props.max,
      step: this.props.step,
      value: this.value,
      onChange: this.noopChange,
      "aria-valuenow": this.value,
      "aria-valuemin": this.props.min,
      "aria-valuemax": this.props.max,
      "aria-valuetext": formatValue(this.value, this.props.max)
    }, props, {
      disabled: disabled || readOnly,
      "aria-disabled": disabled || readOnly ? 'true' : void 0
    })), this.renderValue()));
    /* eslint-enable jsx-a11y/no-redundant-roles */
  }

}, _class2.displayName = "RangeInput", _class2.componentId = 'RangeInput', _class2.allowedProps = allowedProps, _class2.propTypes = propTypes, _class2.defaultProps = {
  step: 1,
  formatValue: val => val,
  // If min and max has default value, they don't give a warning if not set, even if they are required props.
  // TODO: figure out if they don't need to be required or remove defaults in V9.
  max: 0,
  min: 0,
  inline: false,
  size: 'medium',
  layout: 'stacked',
  displayValue: true,
  disabled: false,
  readOnly: false,
  thumbVariant: 'deprecated'
}, _class2)) || _class) || _class) || _class);
export default RangeInput;
export { RangeInput };