/** @jsx jsx */
import React, { Component } from 'react';
import { jsx } from '@instructure/emotion';
import type { RangeInputProps, RangeInputState } from './props';
/**
---
category: components
---
@tsProps
**/
declare class RangeInput extends Component<RangeInputProps, RangeInputState> {
    static readonly componentId = "RangeInput";
    static allowedProps: readonly (keyof {
        min: number;
        max: number;
        defaultValue?: number | undefined;
        value?: number | undefined;
        onChange?: ((value: string | number) => void) | undefined;
        messages?: import("@instructure/ui-form-field/types/FormPropTypes").FormMessage[] | undefined;
        size?: "small" | "medium" | "large" | undefined;
        layout?: "stacked" | "inline" | undefined;
        id?: string | undefined;
        label: React.ReactNode;
        displayValue?: boolean | undefined;
        step?: number | undefined;
        formatValue?: ((value?: number | undefined, max?: number | undefined) => string) | undefined;
        inline?: boolean | undefined;
        disabled?: boolean | undefined;
        readOnly?: boolean | undefined;
        thumbVariant?: "deprecated" | "accessible" | undefined;
    })[];
    static propTypes: import("@instructure/shared-types/types/UtilityTypes").PropValidators<keyof {
        min: number;
        max: number;
        defaultValue?: number | undefined;
        value?: number | undefined;
        onChange?: ((value: string | number) => void) | undefined;
        messages?: import("@instructure/ui-form-field/types/FormPropTypes").FormMessage[] | undefined;
        size?: "small" | "medium" | "large" | undefined;
        layout?: "stacked" | "inline" | undefined;
        id?: string | undefined;
        label: React.ReactNode;
        displayValue?: boolean | undefined;
        step?: number | undefined;
        formatValue?: ((value?: number | undefined, max?: number | undefined) => string) | undefined;
        inline?: boolean | undefined;
        disabled?: boolean | undefined;
        readOnly?: boolean | undefined;
        thumbVariant?: "deprecated" | "accessible" | undefined;
    }>;
    static defaultProps: {
        step: number;
        formatValue: (val?: number) => number | undefined;
        max: number;
        min: number;
        inline: boolean;
        size: string;
        layout: string;
        displayValue: boolean;
        disabled: boolean;
        readOnly: boolean;
        thumbVariant: string;
    };
    ref: Element | null;
    private _input;
    private _inputListener;
    private _changeListener;
    private readonly defaultId;
    handleRef: (el: Element | null) => void;
    constructor(props: RangeInputProps);
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(): void;
    handleChange: (event: React.ChangeEvent<HTMLInputElement>) => void;
    noopChange: React.ChangeEventHandler<HTMLInputElement>;
    get value(): number | undefined;
    get invalid(): boolean | undefined;
    get id(): string;
    renderValue(): jsx.JSX.Element | null;
    render(): jsx.JSX.Element;
}
export default RangeInput;
export { RangeInput };
//# sourceMappingURL=index.d.ts.map