import React from 'react';
import type { PropValidators, AsElementType, TooltipTheme, OtherHTMLAttributes } from '@instructure/shared-types';
import type { PlacementPropValues, PositionConstraint, PositionMountNode } from '@instructure/ui-position';
import type { WithStyleProps, ComponentStyle } from '@instructure/emotion';
import type { PopoverOwnProps } from '@instructure/ui-popover';
import type { WithDeterministicIdProps } from '@instructure/ui-react-utils';
declare type TooltipRenderChildrenArgs = {
    focused: boolean;
    getTriggerProps: <TriggerProps extends Record<string, any>>(props: TriggerProps) => {
        'aria-describedby': string;
    } & TriggerProps;
};
declare type TooltipRenderChildren = (args: TooltipRenderChildrenArgs) => React.ReactNode;
declare type TooltipOwnProps = {
    /**
     * provides a reference to the underlying html root element
     */
    elementRef?: (element: Element | null) => void;
    /**
     * A ReactNode or a function that returns a ReactNode with the following params:
     *
     * @param {Boolean} focused - Is the Tooltip trigger focused?
     * @param {Function} getTriggerProps - Props to be spread onto the trigger element
     */
    children: React.ReactNode | TooltipRenderChildren;
    /**
     * The content to render in the tooltip
     */
    renderTip: React.ReactNode | (() => React.ReactNode);
    /**
     * Whether or not the tooltip content is shown, when controlled
     */
    isShowingContent?: boolean;
    /**
     * Whether or not to show the content by default, when uncontrolled
     */
    defaultIsShowingContent?: boolean;
    /**
     * the element type to render as (assumes a single child if 'as' is undefined)
     */
    as?: AsElementType;
    /**
     * The action that causes the Content to display (`click`, `hover`, `focus`)
     */
    on?: ('click' | 'hover' | 'focus') | ('click' | 'hover' | 'focus')[];
    /**
     * The color of the tooltip content
     */
    color?: 'primary' | 'primary-inverse';
    /**
     * Specifies where the Tooltip will be placed in relation to the target element.
     * Ex. placement="bottom" will render the Tooltip below the triggering element
     * (Note: if there is not room, it will position opposite. Ex. "top" will
     * automatically switch to "bottom")
     */
    placement?: PlacementPropValues;
    /**
     * An element or a function returning an element to use as the mount node
     * for the `<Tooltip />` (defaults to `document.body`)
     */
    mountNode?: PositionMountNode;
    /**
     * The parent in which to constrain the tooltip.
     * One of: 'window', 'scroll-parent', 'parent', 'none', an element,
     * or a function returning an element
     */
    constrain?: PositionConstraint;
    /**
     * The horizontal offset for the positioned content
     */
    offsetX?: string | number;
    /**
     * The vertical offset for the positioned content
     */
    offsetY?: string | number;
    /**
     * Target element for positioning the Tooltip (if it differs from children/trigger)
     */
    positionTarget?: PositionMountNode;
    /**
     * Callback fired when content is shown. When controlled, this callback is
     * fired when the tooltip expects to be shown
     */
    onShowContent?: (event: React.UIEvent | React.FocusEvent) => void;
    /**
     * Callback fired when content is hidden. When controlled, this callback is
     * fired when the tooltip expects to be hidden
     */
    onHideContent?: (event: React.UIEvent | React.FocusEvent, args: {
        documentClick: boolean;
    }) => void;
};
declare type PropKeys = keyof TooltipOwnProps;
declare type AllowedPropKeys = Readonly<Array<PropKeys>>;
declare type PropsPassableToPopover = Omit<PopoverOwnProps, 'isShowingContent' | 'defaultIsShowingContent' | 'on' | 'shouldRenderOffscreen' | 'shouldReturnFocus' | 'placement' | 'color' | 'mountNode' | 'constrain' | 'shadow' | 'offsetX' | 'offsetY' | 'positionTarget' | 'renderTrigger' | 'onShowContent' | 'onHideContent' | 'onFocus' | 'onBlur' | 'elementRef'>;
declare type TooltipProps = PropsPassableToPopover & TooltipOwnProps & WithStyleProps<TooltipTheme, TooltipStyle> & OtherHTMLAttributes<TooltipOwnProps> & WithDeterministicIdProps;
declare type TooltipStyle = ComponentStyle<'tooltip'>;
declare type TooltipState = {
    hasFocus: boolean;
};
declare const propTypes: PropValidators<PropKeys>;
declare const allowedProps: AllowedPropKeys;
export type { TooltipProps, TooltipState, TooltipStyle, TooltipRenderChildren, TooltipRenderChildrenArgs };
export { propTypes, allowedProps };
//# sourceMappingURL=props.d.ts.map