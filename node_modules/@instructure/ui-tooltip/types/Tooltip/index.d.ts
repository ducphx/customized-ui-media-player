/** @jsx jsx */
import { Component } from 'react';
import type { PopoverProps } from '@instructure/ui-popover';
import { jsx } from '@instructure/emotion';
import type { TooltipProps, TooltipState } from './props';
/**
---
category: components
---
@tsProps
**/
declare class Tooltip extends Component<TooltipProps, TooltipState> {
    static readonly componentId = "Tooltip";
    static allowedProps: readonly (keyof {
        elementRef?: ((element: Element | null) => void) | undefined;
        children: import("react").ReactNode | import("./props").TooltipRenderChildren;
        renderTip: import("react").ReactNode | (() => import("react").ReactNode);
        isShowingContent?: boolean | undefined;
        defaultIsShowingContent?: boolean | undefined;
        as?: import("@instructure/shared-types/types/CommonProps").AsElementType | undefined;
        on?: "click" | "hover" | "focus" | ("click" | "hover" | "focus")[] | undefined;
        color?: "primary" | "primary-inverse" | undefined;
        placement?: import("@instructure/ui-position").PlacementPropValues | undefined;
        mountNode?: import("@instructure/ui-position").PositionMountNode | undefined;
        constrain?: import("@instructure/ui-position").PositionConstraint | undefined;
        offsetX?: string | number | undefined;
        offsetY?: string | number | undefined;
        positionTarget?: import("@instructure/ui-position").PositionMountNode | undefined;
        onShowContent?: ((event: import("react").UIEvent<Element, UIEvent> | import("react").FocusEvent<Element, Element>) => void) | undefined;
        onHideContent?: ((event: import("react").UIEvent<Element, UIEvent> | import("react").FocusEvent<Element, Element>, args: {
            documentClick: boolean;
        }) => void) | undefined;
    })[];
    static propTypes: import("@instructure/shared-types/types/UtilityTypes").PropValidators<keyof {
        elementRef?: ((element: Element | null) => void) | undefined;
        children: import("react").ReactNode | import("./props").TooltipRenderChildren;
        renderTip: import("react").ReactNode | (() => import("react").ReactNode);
        isShowingContent?: boolean | undefined;
        defaultIsShowingContent?: boolean | undefined;
        as?: import("@instructure/shared-types/types/CommonProps").AsElementType | undefined;
        on?: "click" | "hover" | "focus" | ("click" | "hover" | "focus")[] | undefined;
        color?: "primary" | "primary-inverse" | undefined;
        placement?: import("@instructure/ui-position").PlacementPropValues | undefined;
        mountNode?: import("@instructure/ui-position").PositionMountNode | undefined;
        constrain?: import("@instructure/ui-position").PositionConstraint | undefined;
        offsetX?: string | number | undefined;
        offsetY?: string | number | undefined;
        positionTarget?: import("@instructure/ui-position").PositionMountNode | undefined;
        onShowContent?: ((event: import("react").UIEvent<Element, UIEvent> | import("react").FocusEvent<Element, Element>) => void) | undefined;
        onHideContent?: ((event: import("react").UIEvent<Element, UIEvent> | import("react").FocusEvent<Element, Element>, args: {
            documentClick: boolean;
        }) => void) | undefined;
    }>;
    static defaultProps: {
        readonly defaultIsShowingContent: false;
        readonly color: "primary";
        readonly placement: "top";
        readonly constrain: "window";
        readonly offsetX: 0;
        readonly offsetY: 0;
    };
    private readonly _id;
    ref: Element | null;
    handleRef: (el: Element | null) => void;
    constructor(props: TooltipProps);
    componentDidMount(): void;
    componentDidUpdate(): void;
    handleFocus: PopoverProps['onFocus'];
    handleBlur: PopoverProps['onBlur'];
    renderTrigger(): any;
    render(): jsx.JSX.Element;
}
export default Tooltip;
export { Tooltip };
//# sourceMappingURL=index.d.ts.map