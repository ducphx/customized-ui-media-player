"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Tooltip = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = require("react");

var _getElementType = require("@instructure/ui-react-utils/lib/getElementType.js");

var _omitProps = require("@instructure/ui-react-utils/lib/omitProps.js");

var _ensureSingleChild = require("@instructure/ui-react-utils/lib/ensureSingleChild.js");

var _passthroughProps = require("@instructure/ui-react-utils/lib/passthroughProps.js");

var _callRenderProp = require("@instructure/ui-react-utils/lib/callRenderProp.js");

var _withDeterministicId = require("@instructure/ui-react-utils/lib/DeterministicIdContext/withDeterministicId.js");

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _Popover = require("@instructure/ui-popover/lib/Popover");

var _emotion = require("@instructure/emotion");

var _styles = _interopRequireDefault(require("./styles"));

var _theme = _interopRequireDefault(require("./theme"));

var _props = require("./props");

const _excluded = ["renderTip", "isShowingContent", "defaultIsShowingContent", "on", "color", "placement", "mountNode", "constrain", "offsetX", "offsetY", "positionTarget", "onShowContent", "onHideContent", "styles"];

var _dec, _dec2, _dec3, _class, _class2;

/**
---
category: components
---
@tsProps
**/
let Tooltip = (_dec = (0, _withDeterministicId.withDeterministicId)(), _dec2 = (0, _emotion.withStyle)(_styles.default, _theme.default), _dec3 = (0, _testable.testable)(), _dec(_class = _dec2(_class = _dec3(_class = (_class2 = class Tooltip extends _react.Component {
  constructor(props) {
    super(props);
    this._id = void 0;
    this.ref = null;

    this.handleRef = el => {
      this.ref = el;

      if (typeof this.props.elementRef === 'function') {
        this.props.elementRef(el);
      }
    };

    this.handleFocus = () => {
      this.setState({
        hasFocus: true
      });
    };

    this.handleBlur = () => {
      this.setState({
        hasFocus: false
      });
    };

    this._id = props.deterministicId();
    this.state = {
      hasFocus: false
    };
  }

  componentDidMount() {
    var _this$props$makeStyle, _this$props;

    (_this$props$makeStyle = (_this$props = this.props).makeStyles) === null || _this$props$makeStyle === void 0 ? void 0 : _this$props$makeStyle.call(_this$props);
  }

  componentDidUpdate() {
    var _this$props$makeStyle2, _this$props2;

    (_this$props$makeStyle2 = (_this$props2 = this.props).makeStyles) === null || _this$props$makeStyle2 === void 0 ? void 0 : _this$props$makeStyle2.call(_this$props2);
  }

  renderTrigger() {
    const _ref = this.props,
          children = _ref.children,
          as = _ref.as;
    const hasFocus = this.state.hasFocus;
    const triggerProps = {
      'aria-describedby': this._id
    };

    if (as) {
      const Trigger = (0, _getElementType.getElementType)(Tooltip, this.props);
      const props = (0, _omitProps.omitProps)(this.props, Tooltip.allowedProps);
      return (0, _emotion.jsx)(Trigger, Object.assign({}, props, triggerProps), children);
    } else if (typeof children === 'function') {
      return children({
        focused: hasFocus,
        getTriggerProps: props => ({ ...triggerProps,
          ...props
        })
      });
    } else {
      return (0, _ensureSingleChild.ensureSingleChild)(children, triggerProps);
    }
  }

  render() {
    const _this$props3 = this.props,
          renderTip = _this$props3.renderTip,
          isShowingContent = _this$props3.isShowingContent,
          defaultIsShowingContent = _this$props3.defaultIsShowingContent,
          on = _this$props3.on,
          color = _this$props3.color,
          placement = _this$props3.placement,
          mountNode = _this$props3.mountNode,
          constrain = _this$props3.constrain,
          offsetX = _this$props3.offsetX,
          offsetY = _this$props3.offsetY,
          positionTarget = _this$props3.positionTarget,
          onShowContent = _this$props3.onShowContent,
          onHideContent = _this$props3.onHideContent,
          styles = _this$props3.styles,
          rest = (0, _objectWithoutProperties2.default)(_this$props3, _excluded);
    return (0, _emotion.jsx)(_Popover.Popover, Object.assign({}, (0, _passthroughProps.passthroughProps)(rest), {
      isShowingContent: isShowingContent,
      defaultIsShowingContent: defaultIsShowingContent,
      on: on,
      shouldRenderOffscreen: true,
      shouldReturnFocus: false,
      placement: placement,
      color: color === 'primary' ? 'primary-inverse' : 'primary',
      mountNode: mountNode,
      constrain: constrain,
      shadow: "none",
      offsetX: offsetX,
      offsetY: offsetY,
      positionTarget: positionTarget,
      renderTrigger: () => this.renderTrigger(),
      onShowContent: onShowContent,
      onHideContent: onHideContent,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      elementRef: this.handleRef
    }), (0, _emotion.jsx)("span", {
      id: this._id,
      css: styles === null || styles === void 0 ? void 0 : styles.tooltip,
      role: "tooltip"
    }, (0, _callRenderProp.callRenderProp)(renderTip)));
  }

}, _class2.displayName = "Tooltip", _class2.componentId = 'Tooltip', _class2.allowedProps = _props.allowedProps, _class2.propTypes = _props.propTypes, _class2.defaultProps = {
  defaultIsShowingContent: false,
  color: 'primary',
  placement: 'top',
  constrain: 'window',
  offsetX: 0,
  offsetY: 0
}, _class2)) || _class) || _class) || _class);
exports.Tooltip = Tooltip;
var _default = Tooltip;
exports.default = _default;