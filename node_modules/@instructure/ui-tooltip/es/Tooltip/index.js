import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
const _excluded = ["renderTip", "isShowingContent", "defaultIsShowingContent", "on", "color", "placement", "mountNode", "constrain", "offsetX", "offsetY", "positionTarget", "onShowContent", "onHideContent", "styles"];

var _dec, _dec2, _dec3, _class, _class2;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/** @jsx jsx */
import { Component } from 'react';
import { getElementType, omitProps, ensureSingleChild, passthroughProps, callRenderProp, withDeterministicId } from '@instructure/ui-react-utils';
import { testable } from '@instructure/ui-testable';
import { Popover } from '@instructure/ui-popover';
import { withStyle, jsx } from '@instructure/emotion';
import generateStyle from './styles';
import generateComponentTheme from './theme';
import { allowedProps, propTypes } from './props';
/**
---
category: components
---
@tsProps
**/

let Tooltip = (_dec = withDeterministicId(), _dec2 = withStyle(generateStyle, generateComponentTheme), _dec3 = testable(), _dec(_class = _dec2(_class = _dec3(_class = (_class2 = class Tooltip extends Component {
  constructor(props) {
    super(props);
    this._id = void 0;
    this.ref = null;

    this.handleRef = el => {
      this.ref = el;

      if (typeof this.props.elementRef === 'function') {
        this.props.elementRef(el);
      }
    };

    this.handleFocus = () => {
      this.setState({
        hasFocus: true
      });
    };

    this.handleBlur = () => {
      this.setState({
        hasFocus: false
      });
    };

    this._id = props.deterministicId();
    this.state = {
      hasFocus: false
    };
  }

  componentDidMount() {
    var _this$props$makeStyle, _this$props;

    (_this$props$makeStyle = (_this$props = this.props).makeStyles) === null || _this$props$makeStyle === void 0 ? void 0 : _this$props$makeStyle.call(_this$props);
  }

  componentDidUpdate() {
    var _this$props$makeStyle2, _this$props2;

    (_this$props$makeStyle2 = (_this$props2 = this.props).makeStyles) === null || _this$props$makeStyle2 === void 0 ? void 0 : _this$props$makeStyle2.call(_this$props2);
  }

  renderTrigger() {
    const _ref = this.props,
          children = _ref.children,
          as = _ref.as;
    const hasFocus = this.state.hasFocus;
    const triggerProps = {
      'aria-describedby': this._id
    };

    if (as) {
      const Trigger = getElementType(Tooltip, this.props);
      const props = omitProps(this.props, Tooltip.allowedProps);
      return jsx(Trigger, Object.assign({}, props, triggerProps), children);
    } else if (typeof children === 'function') {
      return children({
        focused: hasFocus,
        getTriggerProps: props => ({ ...triggerProps,
          ...props
        })
      });
    } else {
      return ensureSingleChild(children, triggerProps);
    }
  }

  render() {
    const _this$props3 = this.props,
          renderTip = _this$props3.renderTip,
          isShowingContent = _this$props3.isShowingContent,
          defaultIsShowingContent = _this$props3.defaultIsShowingContent,
          on = _this$props3.on,
          color = _this$props3.color,
          placement = _this$props3.placement,
          mountNode = _this$props3.mountNode,
          constrain = _this$props3.constrain,
          offsetX = _this$props3.offsetX,
          offsetY = _this$props3.offsetY,
          positionTarget = _this$props3.positionTarget,
          onShowContent = _this$props3.onShowContent,
          onHideContent = _this$props3.onHideContent,
          styles = _this$props3.styles,
          rest = _objectWithoutProperties(_this$props3, _excluded);

    return jsx(Popover, Object.assign({}, passthroughProps(rest), {
      isShowingContent: isShowingContent,
      defaultIsShowingContent: defaultIsShowingContent,
      on: on,
      shouldRenderOffscreen: true,
      shouldReturnFocus: false,
      placement: placement,
      color: color === 'primary' ? 'primary-inverse' : 'primary',
      mountNode: mountNode,
      constrain: constrain,
      shadow: "none",
      offsetX: offsetX,
      offsetY: offsetY,
      positionTarget: positionTarget,
      renderTrigger: () => this.renderTrigger(),
      onShowContent: onShowContent,
      onHideContent: onHideContent,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      elementRef: this.handleRef
    }), jsx("span", {
      id: this._id,
      css: styles === null || styles === void 0 ? void 0 : styles.tooltip,
      role: "tooltip"
    }, callRenderProp(renderTip)));
  }

}, _class2.displayName = "Tooltip", _class2.componentId = 'Tooltip', _class2.allowedProps = allowedProps, _class2.propTypes = propTypes, _class2.defaultProps = {
  defaultIsShowingContent: false,
  color: 'primary',
  placement: 'top',
  constrain: 'window',
  offsetX: 0,
  offsetY: 0
}, _class2)) || _class) || _class) || _class);
export default Tooltip;
export { Tooltip };