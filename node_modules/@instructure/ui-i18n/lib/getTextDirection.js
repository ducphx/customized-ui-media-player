"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.getTextDirection = getTextDirection;

var _canUseDOM = require("@instructure/ui-dom-utils/lib/canUseDOM.js");

var _getComputedStyle = require("@instructure/ui-dom-utils/lib/getComputedStyle.js");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2018 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
let defaultDir;
let dirAttribute;
let observer;

const getDefaultDir = () => {
  /**
   * use a cached value for the default of <html> element's "dir" so we don't
   * have to call the expensive getComputedStyle to look it it up every time
   */
  if (defaultDir) {
    return defaultDir;
  }

  if (_canUseDOM.canUseDOM) {
    const htmlEl = document.documentElement;
    dirAttribute = htmlEl.getAttribute('dir'); // https://developer.mozilla.org/en-US/docs/Web/CSS/direction

    defaultDir = dirAttribute || (0, _getComputedStyle.getComputedStyle)(htmlEl).direction;

    if (!observer) {
      observer = new MutationObserver(() => {
        // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
        const attr = htmlEl.getAttribute('dir');

        if (attr && attr !== dirAttribute) {
          dirAttribute = defaultDir = attr;
        }
      });
      observer.observe(htmlEl, {
        attributes: true
      });
    }

    return defaultDir;
  }

  return void 0;
};
/**
 * ---
 * category: utilities/i18n
 * ---
 *
 * Return the direction ('ltr' or 'rtl' or 'auto') of an element. If no element
 * is given, it returns the document's 'dir' value.
 * @module getTextDirection
 * @param {Element} element will use the <html> element by default
 * @returns {String} 'ltr' or 'rtl' or 'auto' (or `undefined` if no DOM is present)
 */


function getTextDirection(element) {
  if (_canUseDOM.canUseDOM) {
    if (typeof element === 'undefined' || element === document.documentElement) return getDefaultDir();
    return element.getAttribute('dir') || (0, _getComputedStyle.getComputedStyle)(element).direction;
  }

  return void 0;
}

var _default = getTextDirection;
exports.default = _default;