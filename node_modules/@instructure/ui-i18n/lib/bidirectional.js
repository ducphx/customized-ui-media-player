"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.bidirectional = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _decorator = require("@instructure/ui-decorator/lib/decorator.js");

var _TextDirectionContext = require("./TextDirectionContext");

var _hoistNonReactStatics = _interopRequireDefault(require("hoist-non-react-statics"));

const _excluded = ["forwardedRef"];

/**
 * ---
 * category: utilities/i18n
 * ---
 *
 * #### DEPRECATED: This has been renamed to `textDirectionContextConsumer`, its functionality remains similar.
 *
 * A decorator or higher order component that makes a component `bidirectional`.
 *
 * As a HOC:
 *
 * ```js
 * import { bidirectional } from '@instructure/ui-i18n'
 *
 * class Example extends React.Component {
 *   render () {
 *     return this.props.dir === bidirectional.DIRECTION.rtl ? <div>rtl</div> : <div>ltr</div>
 *   }
 * }
 *
 * export default bidirectional()(Example)
 * ```
 *
 * When used as a child of [InstUISettingsProvider](#InstUISettingsProvider), bidirectional components use
 * the direction provided in `TextDirectionContext`. When used without [InstUISettingsProvider](#InstUISettingsProvider),
 * the direction can be supplied explicitly via the `dir` prop. If no `dir` prop is provided,
 * bidirectional components query the documentElement for the `dir` attribute, defaulting to `ltr`
 * if it is not present.
 *
 * @module bidirectional
 * @return The decorator that composes the bidirectional component.
 */
const bidirectional = (0, _decorator.decorator)(ComposedComponent => {
  class BidirectionalComponent extends _react.default.Component {
    render() {
      const _this$props = this.props,
            forwardedRef = _this$props.forwardedRef,
            rest = (0, _objectWithoutProperties2.default)(_this$props, _excluded); // Quite complex code, this is the priority order of applying the `dir` prop:
      // 1. The highest priority is adding it via a prop
      // 2. If there is a <TextDirectionContext.Provider> (or <ApplyTextDirection>
      //    which uses it) above the @bidirectional in the DOM, use its value.
      // 3. If TextDirectionContext.Provider was called without params
      //    TextDirectionContext calls getTextDirection() which returns
      //    the 'dir' prop of the HTML document element.

      return /*#__PURE__*/_react.default.createElement(_TextDirectionContext.TextDirectionContext.Consumer, null, dir => {
        if (process.env.NODE_ENV !== 'production' && dir === 'auto') {}

        return /*#__PURE__*/_react.default.createElement(ComposedComponent, Object.assign({
          ref: forwardedRef,
          dir: dir
        }, rest));
      });
    }

  }

  BidirectionalComponent.displayName = "BidirectionalComponent";
  const BidirectionalForwardingRef = /*#__PURE__*/(0, _react.forwardRef)((props, ref) => /*#__PURE__*/_react.default.createElement(BidirectionalComponent, Object.assign({}, props, {
    forwardedRef: ref
  })));

  if (process.env.NODE_ENV !== 'production') {
    const displayName = ComposedComponent.displayName || ComposedComponent.name;
    BidirectionalForwardingRef.displayName = `BidirectionalForwardingRef(${displayName})`;
  }

  (0, _hoistNonReactStatics.default)(BidirectionalForwardingRef, ComposedComponent);
  BidirectionalForwardingRef.defaultProps = ComposedComponent.defaultProps; // eslint-disable-next-line react/forbid-foreign-prop-types

  BidirectionalForwardingRef.propTypes = ComposedComponent.propTypes; // @ts-expect-error These static fields exist on InstUI components

  BidirectionalForwardingRef.allowedProps = ComposedComponent.allowedProps;
  return BidirectionalForwardingRef;
});
exports.bidirectional = bidirectional;
bidirectional.DIRECTION = _TextDirectionContext.DIRECTION;
var _default = bidirectional;
exports.default = _default;