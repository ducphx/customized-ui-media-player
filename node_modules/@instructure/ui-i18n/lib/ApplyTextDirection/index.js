"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ApplyTextDirection = void 0;

var _react = _interopRequireWildcard(require("react"));

var _getElementType = require("@instructure/ui-react-utils/lib/getElementType.js");

var _TextDirectionContext = require("../TextDirectionContext");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
---
category: components/utilities
---
DEPRECATED. Please use TextDirectionContext instead.
@tsProps
**/
const ApplyTextDirection = props => {
  const context = (0, _react.useContext)(_TextDirectionContext.TextDirectionContext);
  const dir = props.dir || context;
  const ElementType = (0, _getElementType.getElementType)(ApplyTextDirection, props);
  return /*#__PURE__*/_react.default.createElement(_TextDirectionContext.TextDirectionContext.Provider, {
    value: dir
  }, /*#__PURE__*/_react.default.createElement(ElementType, {
    dir: dir
  }, typeof props.children === 'function' ? props.children(dir, dir === _TextDirectionContext.DIRECTION.rtl) : props.children));
};

exports.ApplyTextDirection = ApplyTextDirection;
ApplyTextDirection.defaultProps = {
  dir: void 0,
  as: 'span',
  children: null
};