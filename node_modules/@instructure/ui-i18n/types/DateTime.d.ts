import moment, { Moment } from 'moment-timezone';
/**
 * ---
 * category: utilities/i18n
 * ---
 * @deprecated
 * #### DEPRECATION WARNING: Will be removed in v9, which wil include a
 * time library agnostic API.
 * A wrapper for [moment](https://momentjs.com/) utils.
 * @module DateTime
 */
/**
 * Return an instance of a [moment](https://momentjs.com) initialized with the current date + time
 * @param {String} locale
 * @param {String} timezone
 * @returns {Object} an instance of a moment.
 */
declare function now(locale: string, timezone: string): moment.Moment;
/**
 * Parses a string into a localized ISO 8601 string with timezone
 * @param {String} dateString
 * @param {String} locale
 * @param {String} timezone
 * @returns {String} ISO 8601 string
 */
declare function parse(dateString: string, locale: string, timezone: string): moment.Moment;
/**
 * Determines if a string is a valid ISO 8601 string
 * @param {String} dateString
 * @returns {Boolean} true if dateString is a valid ISO 8601 string
 */
declare function isValid(dateString: string): boolean;
/**
 * Get the user's time zone (or guess)
 * see https://momentjs.com/timezone/docs/#/using-timezones/guessing-user-timezone/
 * @returns {String} a time zone identifier (see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
 */
declare function browserTimeZone(): string;
/**
 * Returns the days of the week in the given locale,
 * for example ["Monday", "Tuesday",..]. It always begins with Monday.
 * @param locale A locale accepted by the browser, e.g. America/New_York
 * @param format If set to 'short' it will be maximum 3 letters long,
 *               if set to 'long' it will be the full word.
 */
declare function getLocalDayNamesOfTheWeek(locale: string, format: 'short' | 'long'): string[];
/**
 * Returns the first day of the week in the given locale.
 * The locale decides what is the first day, e.g. Sunday in the US, Monday in
 * the EU.
 * @param date A Moment Datetime object
 */
declare function getFirstDayOfWeek(date: Moment): moment.Moment;
/**
 * Return a localized date + time with timezone as a ISO 8601 string
 * @param {String} dateString
 * @param {String} locale
 * @param {String} timezone
 * @param {String} format the format to use. Defaults to YYYY-MM-DDTHH:mm:ss.SSSZ
 * @returns {String} Localized ISO 8601 string
 */
declare function toLocaleString(dateString: string, locale: string, timezone: string, format?: string): string;
declare const DateTime: {
    now: typeof now;
    parse: typeof parse;
    browserTimeZone: typeof browserTimeZone;
    isValid: typeof isValid;
    toLocaleString: typeof toLocaleString;
    getFirstDayOfWeek: typeof getFirstDayOfWeek;
    getLocalDayNamesOfTheWeek: typeof getLocalDayNamesOfTheWeek;
};
export default DateTime;
export { DateTime };
export type { Moment };
//# sourceMappingURL=DateTime.d.ts.map