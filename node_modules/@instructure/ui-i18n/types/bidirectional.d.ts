import { PropsWithChildren } from 'react';
import { DIRECTION } from './TextDirectionContext';
export declare type BidirectionalProps = PropsWithChildren<{
    dir?: 'ltr' | 'rtl';
}>;
declare type BidirectionalType = {
    (): (ComposedComponent: any) => any;
    DIRECTION: typeof DIRECTION;
};
/**
 * ---
 * category: utilities/i18n
 * ---
 *
 * #### DEPRECATED: This has been renamed to `textDirectionContextConsumer`, its functionality remains similar.
 *
 * A decorator or higher order component that makes a component `bidirectional`.
 *
 * As a HOC:
 *
 * ```js
 * import { bidirectional } from '@instructure/ui-i18n'
 *
 * class Example extends React.Component {
 *   render () {
 *     return this.props.dir === bidirectional.DIRECTION.rtl ? <div>rtl</div> : <div>ltr</div>
 *   }
 * }
 *
 * export default bidirectional()(Example)
 * ```
 *
 * When used as a child of [InstUISettingsProvider](#InstUISettingsProvider), bidirectional components use
 * the direction provided in `TextDirectionContext`. When used without [InstUISettingsProvider](#InstUISettingsProvider),
 * the direction can be supplied explicitly via the `dir` prop. If no `dir` prop is provided,
 * bidirectional components query the documentElement for the `dir` attribute, defaulting to `ltr`
 * if it is not present.
 *
 * @module bidirectional
 * @return The decorator that composes the bidirectional component.
 */
declare const bidirectional: BidirectionalType;
export default bidirectional;
export { bidirectional };
//# sourceMappingURL=bidirectional.d.ts.map