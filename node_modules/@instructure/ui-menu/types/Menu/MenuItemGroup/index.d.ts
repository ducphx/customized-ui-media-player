/** @jsx jsx */
import React, { Component } from 'react';
import { jsx } from '@instructure/emotion';
import { MenuItem } from '../MenuItem';
import type { OnMenuItemSelect, MenuItemProps } from '../MenuItem/props';
import type { MenuGroupProps, MenuGroupState } from './props';
/**
---
parent: Menu
id: Menu.Group
---
@tsProps
**/
declare class MenuItemGroup extends Component<MenuGroupProps, MenuGroupState> {
    static readonly componentId = "Menu.Group";
    static propTypes: import("@instructure/shared-types/types/UtilityTypes").PropValidators<keyof {
        label: React.ReactNode;
        allowMultiple?: boolean | undefined;
        children?: React.ReactNode;
        selected?: (string | number)[] | undefined;
        defaultSelected?: (string | number)[] | undefined;
        onSelect?: ((e: React.MouseEvent<Element, MouseEvent>, updated: (string | number | undefined)[], selected: boolean | undefined, item: MenuItem) => void) | undefined;
        onMouseOver?: ((e: React.MouseEvent<Element, MouseEvent>, args: MenuItem) => void) | undefined;
        controls?: string | undefined;
        itemRef?: ((element: MenuItem | null) => void) | undefined;
        disabled?: boolean | undefined;
        isTabbable?: boolean | undefined;
    }>;
    static allowedProps: readonly (keyof {
        label: React.ReactNode;
        allowMultiple?: boolean | undefined;
        children?: React.ReactNode;
        selected?: (string | number)[] | undefined;
        defaultSelected?: (string | number)[] | undefined;
        onSelect?: ((e: React.MouseEvent<Element, MouseEvent>, updated: (string | number | undefined)[], selected: boolean | undefined, item: MenuItem) => void) | undefined;
        onMouseOver?: ((e: React.MouseEvent<Element, MouseEvent>, args: MenuItem) => void) | undefined;
        controls?: string | undefined;
        itemRef?: ((element: MenuItem | null) => void) | undefined;
        disabled?: boolean | undefined;
        isTabbable?: boolean | undefined;
    })[];
    static defaultProps: {
        disabled: boolean;
        children: null;
        isTabbable: boolean;
        allowMultiple: boolean;
        defaultSelected: never[];
    };
    constructor(props: MenuGroupProps);
    private _labelId;
    ref: Element | null;
    handleRef: (el: Element | null) => void;
    componentDidMount(): void;
    componentDidUpdate(): void;
    handleSelect: OnMenuItemSelect;
    updateSelected: (e: React.MouseEvent, value: MenuItemProps['value'], items: MenuGroupState['selected'], selected: MenuItemProps['selected'], item: MenuItem) => (string | number)[];
    selectedFromChildren(props: MenuGroupProps): (string | number)[] | null;
    get selected(): (string | number)[];
    renderLabel(): React.ReactNode;
    renderChildren(): jsx.JSX.Element[];
    render(): jsx.JSX.Element;
}
export default MenuItemGroup;
export { MenuItemGroup };
//# sourceMappingURL=index.d.ts.map