/** @jsx jsx */
import React, { Component } from 'react';
import { jsx } from '@instructure/emotion';
import { MenuContext } from '../../MenuContext';
import type { MenuItemProps, MenuItemState } from './props';
/**
---
parent: Menu
id: Menu.Item
---
@tsProps
**/
declare class MenuItem extends Component<MenuItemProps, MenuItemState> {
    static readonly componentId = "Menu.Item";
    static propTypes: import("@instructure/shared-types/types/UtilityTypes").PropValidators<keyof {
        children: React.ReactNode;
        defaultSelected?: boolean | undefined;
        selected?: boolean | undefined;
        onSelect?: import("./props").OnMenuItemSelect | undefined;
        onClick?: ((e: React.MouseEvent<Element, MouseEvent>) => void) | undefined;
        onKeyDown?: ((e: React.KeyboardEvent<Element>) => void) | undefined;
        onKeyUp?: ((e: React.KeyboardEvent<Element>) => void) | undefined;
        onMouseOver?: ((e: React.MouseEvent<Element, MouseEvent>, args: MenuItem) => void) | undefined;
        controls?: string | undefined;
        disabled?: boolean | undefined;
        as?: import("@instructure/shared-types/types/CommonProps").AsElementType | undefined;
        type?: "button" | "checkbox" | "radio" | "flyout" | undefined;
        value?: string | number | undefined;
        href?: string | undefined;
    }>;
    static allowedProps: readonly (keyof {
        children: React.ReactNode;
        defaultSelected?: boolean | undefined;
        selected?: boolean | undefined;
        onSelect?: import("./props").OnMenuItemSelect | undefined;
        onClick?: ((e: React.MouseEvent<Element, MouseEvent>) => void) | undefined;
        onKeyDown?: ((e: React.KeyboardEvent<Element>) => void) | undefined;
        onKeyUp?: ((e: React.KeyboardEvent<Element>) => void) | undefined;
        onMouseOver?: ((e: React.MouseEvent<Element, MouseEvent>, args: MenuItem) => void) | undefined;
        controls?: string | undefined;
        disabled?: boolean | undefined;
        as?: import("@instructure/shared-types/types/CommonProps").AsElementType | undefined;
        type?: "button" | "checkbox" | "radio" | "flyout" | undefined;
        value?: string | number | undefined;
        href?: string | undefined;
    })[];
    static defaultProps: {
        readonly type: "button";
        readonly disabled: false;
    };
    context: React.ContextType<typeof MenuContext>;
    static contextType: React.Context<{
        registerMenuItem: (_value: MenuItem) => void;
        removeMenuItem: (_value: MenuItem) => void;
    }>;
    constructor(props: MenuItemProps);
    get _node(): Element | null;
    labelId: string;
    ref: Element | null;
    handleRef: (el: Element | null) => void;
    componentDidMount(): void;
    componentDidUpdate(): void;
    componentWillUnmount(): void;
    handleClick: (e: React.MouseEvent) => void;
    handleKeyDown: (e: React.KeyboardEvent) => void;
    handleKeyUp: (e: React.KeyboardEvent) => void;
    handleMouseOver: (event: React.MouseEvent) => void;
    get elementType(): import("@instructure/shared-types/types/CommonProps").AsElementType;
    get role(): "button" | "menuitem" | "menuitemcheckbox" | "menuitemradio";
    get selected(): boolean;
    get focused(): boolean;
    focus(): void;
    renderContent(): jsx.JSX.Element;
    render(): jsx.JSX.Element;
}
export default MenuItem;
export { MenuItem };
//# sourceMappingURL=index.d.ts.map