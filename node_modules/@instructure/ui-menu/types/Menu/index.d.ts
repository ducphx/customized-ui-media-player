/** @jsx jsx */
import React, { Component } from 'react';
import { Popover } from '@instructure/ui-popover';
import { MenuItem } from './MenuItem';
import type { MenuItemProps } from './MenuItem/props';
import { MenuItemGroup } from './MenuItemGroup';
import { MenuItemSeparator } from './MenuItemSeparator';
import { jsx } from '@instructure/emotion';
import type { MenuProps } from './props';
/**
---
category: components
---
@tsProps
**/
declare class Menu extends Component<MenuProps> {
    static readonly componentId = "Menu";
    static propTypes: import("@instructure/shared-types/types/UtilityTypes").PropValidators<keyof {
        children?: React.ReactNode;
        label?: string | undefined;
        disabled?: boolean | undefined;
        trigger?: React.ReactNode;
        placement?: import("@instructure/ui-position").PlacementPropValues | undefined;
        defaultShow?: boolean | undefined;
        show?: boolean | undefined;
        onToggle?: ((show: boolean, menu: Menu) => void) | undefined;
        onSelect?: ((e: React.MouseEvent<Element, MouseEvent>, value: string | number | (string | number | undefined)[] | undefined, selected: boolean | undefined, args: MenuItem) => void) | undefined;
        onDismiss?: ((event: React.UIEvent<Element, UIEvent> | React.FocusEvent<Element, Element>, documentClick: boolean) => void) | undefined;
        onFocus?: ((event: React.FocusEvent<Element, Element>) => void) | undefined;
        onMouseOver?: ((event: React.MouseEvent<Element, MouseEvent>) => void) | undefined;
        onKeyDown?: ((event: React.KeyboardEvent<HTMLUListElement>) => void) | undefined;
        onKeyUp?: ((event: React.KeyboardEvent<HTMLUListElement>) => void) | undefined;
        menuRef?: ((el: HTMLUListElement | null) => void) | undefined;
        popoverRef?: ((el: Popover | null) => void) | undefined;
        mountNode?: import("@instructure/ui-position").PositionMountNode | undefined;
        constrain?: import("@instructure/ui-position").PositionConstraint | undefined;
        shouldHideOnSelect?: boolean | undefined;
        shouldFocusTriggerOnClose?: boolean | undefined;
        type?: "flyout" | undefined;
        id?: string | undefined;
        withArrow?: boolean | undefined;
        offsetX?: string | number | undefined;
        offsetY?: string | number | undefined;
    }>;
    static allowedProps: readonly (keyof {
        children?: React.ReactNode;
        label?: string | undefined;
        disabled?: boolean | undefined;
        trigger?: React.ReactNode;
        placement?: import("@instructure/ui-position").PlacementPropValues | undefined;
        defaultShow?: boolean | undefined;
        show?: boolean | undefined;
        onToggle?: ((show: boolean, menu: Menu) => void) | undefined;
        onSelect?: ((e: React.MouseEvent<Element, MouseEvent>, value: string | number | (string | number | undefined)[] | undefined, selected: boolean | undefined, args: MenuItem) => void) | undefined;
        onDismiss?: ((event: React.UIEvent<Element, UIEvent> | React.FocusEvent<Element, Element>, documentClick: boolean) => void) | undefined;
        onFocus?: ((event: React.FocusEvent<Element, Element>) => void) | undefined;
        onMouseOver?: ((event: React.MouseEvent<Element, MouseEvent>) => void) | undefined;
        onKeyDown?: ((event: React.KeyboardEvent<HTMLUListElement>) => void) | undefined;
        onKeyUp?: ((event: React.KeyboardEvent<HTMLUListElement>) => void) | undefined;
        menuRef?: ((el: HTMLUListElement | null) => void) | undefined;
        popoverRef?: ((el: Popover | null) => void) | undefined;
        mountNode?: import("@instructure/ui-position").PositionMountNode | undefined;
        constrain?: import("@instructure/ui-position").PositionConstraint | undefined;
        shouldHideOnSelect?: boolean | undefined;
        shouldFocusTriggerOnClose?: boolean | undefined;
        type?: "flyout" | undefined;
        id?: string | undefined;
        withArrow?: boolean | undefined;
        offsetX?: string | number | undefined;
        offsetY?: string | number | undefined;
    })[];
    static defaultProps: {
        label: null;
        disabled: boolean;
        trigger: null;
        placement: string;
        defaultShow: boolean;
        mountNode: null;
        constrain: string;
        shouldHideOnSelect: boolean;
        shouldFocusTriggerOnClose: boolean;
        withArrow: boolean;
        offsetX: number;
        offsetY: number;
    };
    static Item: typeof MenuItem;
    static Group: typeof MenuItemGroup;
    static Separator: typeof MenuItemSeparator;
    state: {
        hasFocus: boolean;
    };
    _rootNode: null;
    _menuItems: MenuItem[];
    _popover: Popover | null;
    _trigger: MenuItem | (React.ReactInstance & {
        focus?: () => void;
    }) | null;
    _menu: HTMLUListElement | null;
    _labelId: string;
    _activeSubMenu?: Menu | null;
    _id: string;
    ref: Element | null;
    handleRef: (el: HTMLUListElement | null) => void;
    constructor(props: MenuProps);
    componentDidMount(): void;
    componentDidUpdate(): void;
    static contextType: React.Context<{
        registerMenuItem: (_value: MenuItem) => void;
        removeMenuItem: (_value: MenuItem) => void;
    }>;
    registerMenuItem: (item: MenuItem) => void;
    removeMenuItem: (item: MenuItem) => void;
    get menuItems(): MenuItem[];
    getMenuItemIndex: (item: MenuItem) => number;
    handleTriggerKeyDown: (event: React.KeyboardEvent) => void;
    handleTriggerMouseOver: (event: React.MouseEvent) => void;
    handleToggle: (shown: boolean) => void;
    handleMenuKeyDown: (event: React.KeyboardEvent<HTMLUListElement>) => void;
    handleMenuItemSelect: MenuProps['onSelect'];
    handleMenuItemFocus: () => void;
    handleMenuItemBlur: () => void;
    handleMenuItemMouseOver: MenuItemProps['onMouseOver'];
    hideActiveSubMenu: (event: React.MouseEvent | React.KeyboardEvent) => void;
    handleSubMenuToggle: MenuProps['onToggle'];
    handleSubMenuDismiss: (event: React.UIEvent | React.FocusEvent, documentClick: boolean) => void;
    hide: (event: React.UIEvent | React.FocusEvent) => void;
    show: (event: React.MouseEvent | React.KeyboardEvent) => void;
    focus(): void;
    focused(): boolean;
    get focusedIndex(): number;
    moveFocus(step: number): void;
    get shown(): boolean | undefined;
    renderChildren(): jsx.JSX.Element[];
    renderMenu(): jsx.JSX.Element;
    render(): jsx.JSX.Element;
}
export default Menu;
export { Menu, MenuItem, MenuItemGroup, MenuItemSeparator };
//# sourceMappingURL=index.d.ts.map