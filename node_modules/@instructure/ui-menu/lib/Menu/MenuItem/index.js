"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.MenuItem = void 0;

var _react = _interopRequireWildcard(require("react"));

var _keycode = _interopRequireDefault(require("keycode"));

var _IconCheckSolid2 = require("@instructure/ui-icons/lib/IconCheckSolid.js");

var _IconArrowOpenEndSolid = require("@instructure/ui-icons/lib/IconArrowOpenEndSolid.js");

var _omitProps = require("@instructure/ui-react-utils/lib/omitProps.js");

var _getElementType = require("@instructure/ui-react-utils/lib/getElementType.js");

var _withDeterministicId = require("@instructure/ui-react-utils/lib/DeterministicIdContext/withDeterministicId.js");

var _createChainedFunction = require("@instructure/ui-utils/lib/createChainedFunction.js");

var _isActiveElement = require("@instructure/ui-dom-utils/lib/isActiveElement.js");

var _findDOMNode = require("@instructure/ui-dom-utils/lib/findDOMNode.js");

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _emotion = require("@instructure/emotion");

var _MenuContext = require("../../MenuContext");

var _styles = _interopRequireDefault(require("./styles"));

var _theme = _interopRequireDefault(require("./theme"));

var _props = require("./props");

var _dec, _dec2, _dec3, _class, _class2, _IconCheckSolid, _IconArrowOpenEndSoli;

/**
---
parent: Menu
id: Menu.Item
---
@tsProps
**/
let MenuItem = (_dec = (0, _withDeterministicId.withDeterministicId)(), _dec2 = (0, _emotion.withStyle)(_styles.default, _theme.default), _dec3 = (0, _testable.testable)(), _dec(_class = _dec2(_class = _dec3(_class = (_class2 = class MenuItem extends _react.Component {
  constructor(props) {
    super(props);
    this.labelId = void 0;
    this.ref = null;

    this.handleRef = el => {
      this.ref = el;
    };

    this.handleClick = e => {
      const _this$props = this.props,
            onSelect = _this$props.onSelect,
            onClick = _this$props.onClick,
            disabled = _this$props.disabled,
            value = _this$props.value;
      const selected = !this.selected;

      if (disabled) {
        e.preventDefault();
        return;
      }

      if (typeof this.props.selected === 'undefined') {
        this.setState({
          selected
        });
      }

      if (typeof onSelect === 'function') {
        e.persist();
        onSelect(e, value, selected, this);
      }

      if (typeof onClick === 'function') {
        onClick(e);
      }
    };

    this.handleKeyDown = e => {
      const spaceKey = e.keyCode === _keycode.default.codes.space;
      const enterKey = e.keyCode === _keycode.default.codes.enter;

      if (spaceKey || enterKey) {
        e.preventDefault();
        e.stopPropagation();

        if (enterKey) {
          // handle space key on keyUp for FF
          const refNode = (0, _findDOMNode.findDOMNode)(this.ref);
          refNode.click();
        }
      }
    };

    this.handleKeyUp = e => {
      const spaceKey = e.keyCode === _keycode.default.codes.space;
      const enterKey = e.keyCode === _keycode.default.codes.enter;

      if (spaceKey || enterKey) {
        e.preventDefault();
        e.stopPropagation();

        if (spaceKey) {
          const refNode = (0, _findDOMNode.findDOMNode)(this.ref);
          refNode.click();
        }
      }
    };

    this.handleMouseOver = event => {
      this.focus();

      if (typeof this.props.onMouseOver === 'function') {
        this.props.onMouseOver(event, this);
      }
    };

    if (typeof props.selected === 'undefined') {
      this.state = {
        selected: !!props.defaultSelected
      };
    }

    this.labelId = props.deterministicId('MenuItem__label');
  }

  get _node() {
    return this.ref;
  }

  componentDidMount() {
    var _this$props$makeStyle, _this$props2;

    (_this$props$makeStyle = (_this$props2 = this.props).makeStyles) === null || _this$props$makeStyle === void 0 ? void 0 : _this$props$makeStyle.call(_this$props2);
    const context = this.context;

    if (context && context.registerMenuItem) {
      context.registerMenuItem(this);
    }
  }

  componentDidUpdate() {
    var _this$props$makeStyle2, _this$props3;

    (_this$props$makeStyle2 = (_this$props3 = this.props).makeStyles) === null || _this$props$makeStyle2 === void 0 ? void 0 : _this$props$makeStyle2.call(_this$props3);
  }

  componentWillUnmount() {
    const context = this.context;

    if (context && context.removeMenuItem) {
      context.removeMenuItem(this);
    }
  }

  get elementType() {
    return (0, _getElementType.getElementType)(MenuItem, this.props);
  }

  get role() {
    switch (this.props.type) {
      case 'checkbox':
        return 'menuitemcheckbox';

      case 'radio':
        return 'menuitemradio';

      case 'flyout':
        return 'button';

      default:
        return 'menuitem';
    }
  }

  get selected() {
    return typeof this.props.selected === 'undefined' ? this.state.selected : this.props.selected;
  }

  get focused() {
    return (0, _isActiveElement.isActiveElement)(this.ref);
  }

  focus() {
    const refNode = (0, _findDOMNode.findDOMNode)(this.ref);
    refNode.focus();
  }

  renderContent() {
    var _this$props$styles, _this$props$styles2, _this$props$styles3;

    const _this$props4 = this.props,
          children = _this$props4.children,
          type = _this$props4.type;
    return (0, _emotion.jsx)("span", null, (type === 'checkbox' || type === 'radio') && (0, _emotion.jsx)("span", {
      css: (_this$props$styles = this.props.styles) === null || _this$props$styles === void 0 ? void 0 : _this$props$styles.icon
    }, this.selected && (_IconCheckSolid || (_IconCheckSolid = (0, _emotion.jsx)(_IconCheckSolid2.IconCheckSolid, null)))), (0, _emotion.jsx)("span", {
      css: (_this$props$styles2 = this.props.styles) === null || _this$props$styles2 === void 0 ? void 0 : _this$props$styles2.label,
      id: this.labelId
    }, children), type === 'flyout' && (0, _emotion.jsx)("span", {
      css: (_this$props$styles3 = this.props.styles) === null || _this$props$styles3 === void 0 ? void 0 : _this$props$styles3.icon
    }, _IconArrowOpenEndSoli || (_IconArrowOpenEndSoli = (0, _emotion.jsx)(_IconArrowOpenEndSolid.IconArrowOpenEndSolid, null))));
  }

  render() {
    var _this$props$styles4;

    const _this$props5 = this.props,
          disabled = _this$props5.disabled,
          controls = _this$props5.controls,
          onKeyDown = _this$props5.onKeyDown,
          onKeyUp = _this$props5.onKeyUp,
          type = _this$props5.type,
          href = _this$props5.href;
    const props = (0, _omitProps.omitProps)(this.props, MenuItem.allowedProps);
    const ElementType = this.elementType;
    return (0, _emotion.jsx)(ElementType // @ts-expect-error TODO: `ref` prop causes: "Expression produces a union type that is too complex to represent.ts(2590)"
    , Object.assign({
      tabIndex: -1 // note: tabIndex can be overridden by Menu or MenuItemGroup components

    }, props, {
      href: href,
      role: this.role,
      "aria-labelledby": this.labelId,
      "aria-disabled": disabled ? 'true' : void 0,
      "aria-controls": controls,
      "aria-checked": type === 'checkbox' || type === 'radio' ? this.selected ? 'true' : 'false' : void 0,
      onClick: this.handleClick,
      onKeyUp: (0, _createChainedFunction.createChainedFunction)(onKeyUp, this.handleKeyUp),
      onKeyDown: (0, _createChainedFunction.createChainedFunction)(onKeyDown, this.handleKeyDown),
      ref: this.handleRef,
      css: (_this$props$styles4 = this.props.styles) === null || _this$props$styles4 === void 0 ? void 0 : _this$props$styles4.menuItem,
      onMouseOver: this.handleMouseOver
    }), this.renderContent());
  }

}, _class2.displayName = "MenuItem", _class2.componentId = 'Menu.Item', _class2.propTypes = _props.propTypes, _class2.allowedProps = _props.allowedProps, _class2.defaultProps = {
  type: 'button',
  disabled: false
}, _class2.contextType = _MenuContext.MenuContext, _class2)) || _class) || _class) || _class);
exports.MenuItem = MenuItem;
var _default = MenuItem;
exports.default = _default;