"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.MenuItemGroup = void 0;

var _react = _interopRequireWildcard(require("react"));

var _emotion = require("@instructure/emotion");

var _omitProps = require("@instructure/ui-react-utils/lib/omitProps.js");

var _safeCloneElement = require("@instructure/ui-react-utils/lib/safeCloneElement.js");

var _matchComponentTypes = require("@instructure/ui-react-utils/lib/matchComponentTypes.js");

var _withDeterministicId = require("@instructure/ui-react-utils/lib/DeterministicIdContext/withDeterministicId.js");

var _hasVisibleChildren = require("@instructure/ui-a11y-utils/lib/hasVisibleChildren.js");

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _MenuItem = require("../MenuItem");

var _styles = _interopRequireDefault(require("./styles"));

var _theme = _interopRequireDefault(require("./theme"));

var _props = require("./props");

var _dec, _dec2, _dec3, _class, _class2;

/**
---
parent: Menu
id: Menu.Group
---
@tsProps
**/
let MenuItemGroup = (_dec = (0, _withDeterministicId.withDeterministicId)(), _dec2 = (0, _emotion.withStyle)(_styles.default, _theme.default), _dec3 = (0, _testable.testable)(), _dec(_class = _dec2(_class = _dec3(_class = (_class2 = class MenuItemGroup extends _react.Component {
  constructor(props) {
    super(props);
    this._labelId = void 0;
    this.ref = null;

    this.handleRef = el => {
      this.ref = el;
    };

    this.handleSelect = (e, value, selected, item) => {
      if (this.props.disabled) {
        e.preventDefault();
        return;
      }

      if (this.props.selected) {
        this.updateSelected(e, value, this.props.selected, selected, item);
      } else {
        this.setState(state => {
          return {
            selected: this.updateSelected(e, value, state.selected, selected, item)
          };
        });
      }
    };

    this.updateSelected = (e, value, items, selected, item) => {
      const allowMultiple = this.props.allowMultiple;
      let updated = allowMultiple ? [...items] : [];
      const location = updated.indexOf(value);

      if (selected === true && location < 0) {
        updated.push(value);
      } else if (selected === false && location !== -1) {
        updated.splice(location, 1);
      } else if (!allowMultiple && updated.length < 1) {
        // don't allow nothing selected if it's not allowMultiple/checkbox
        updated = [...items];
      }

      if (typeof this.props.onSelect === 'function') {
        this.props.onSelect(e, updated, selected, item);
      }

      return updated;
    };

    if (typeof props.selected === 'undefined') {
      this.state = {
        selected: this.selectedFromChildren(props) || props.defaultSelected
      };
    }

    this._labelId = props.deterministicId('MenuItemGroup');
  }

  componentDidMount() {
    var _this$props$makeStyle, _this$props;

    (_this$props$makeStyle = (_this$props = this.props).makeStyles) === null || _this$props$makeStyle === void 0 ? void 0 : _this$props$makeStyle.call(_this$props);
  }

  componentDidUpdate() {
    var _this$props$makeStyle2, _this$props2;

    (_this$props$makeStyle2 = (_this$props2 = this.props).makeStyles) === null || _this$props$makeStyle2 === void 0 ? void 0 : _this$props$makeStyle2.call(_this$props2);
  }

  selectedFromChildren(props) {
    const children = props.children,
          allowMultiple = props.allowMultiple;
    const selected = [];

    const items = _react.Children.toArray(children).filter(child => {
      return (0, _matchComponentTypes.matchComponentTypes)(child, [_MenuItem.MenuItem]);
    });

    items.forEach((item, index) => {
      if ((selected.length === 0 || allowMultiple) && (item.props.selected || item.props.defaultSelected)) {
        selected.push(item.props.value || index);
      }
    });
    return selected.length > 0 ? selected : null;
  }

  get selected() {
    if (typeof this.props.selected === 'undefined' && typeof this.state.selected === 'undefined') {
      return [];
    } else {
      return typeof this.props.selected === 'undefined' ? [...this.state.selected] : [...this.props.selected];
    }
  }

  renderLabel() {
    var _this$props$styles;

    const label = this.props.label;
    return (0, _hasVisibleChildren.hasVisibleChildren)(label) ? (0, _emotion.jsx)("span", {
      css: (_this$props$styles = this.props.styles) === null || _this$props$styles === void 0 ? void 0 : _this$props$styles.label
    }, label) : label;
  }

  renderChildren() {
    const _this$props3 = this.props,
          disabled = _this$props3.disabled,
          controls = _this$props3.controls,
          allowMultiple = _this$props3.allowMultiple,
          isTabbable = _this$props3.isTabbable,
          onMouseOver = _this$props3.onMouseOver;
    const children = this.props.children;
    let index = -1;
    return _react.Children.map(children, child => {
      if ((0, _matchComponentTypes.matchComponentTypes)(child, [_MenuItem.MenuItem])) {
        ++index;
        const value = child.props.value || index;
        return (0, _emotion.jsx)("li", {
          role: "none"
        }, ' ', (0, _safeCloneElement.safeCloneElement)(child, {
          tabIndex: isTabbable && index === 0 ? 0 : -1,
          controls,
          value,
          children: child.props.children,
          type: allowMultiple ? 'checkbox' : 'radio',
          ref: this.props.itemRef,
          disabled: disabled || child.props.disabled,
          selected: this.selected.indexOf(value) > -1,
          onSelect: this.handleSelect,
          onMouseOver
        }), ' ');
      } else {
        return child;
      }
    });
  }

  render() {
    var _this$props$styles2, _this$props$styles3;

    const props = (0, _omitProps.omitProps)(this.props, MenuItemGroup.allowedProps);
    return (0, _emotion.jsx)("span", Object.assign({}, props, {
      css: (_this$props$styles2 = this.props.styles) === null || _this$props$styles2 === void 0 ? void 0 : _this$props$styles2.menuItemGroup,
      role: "presentation",
      ref: this.handleRef
    }), (0, _emotion.jsx)("span", {
      id: this._labelId
    }, this.renderLabel()), (0, _emotion.jsx)("ul", {
      role: "menu",
      css: (_this$props$styles3 = this.props.styles) === null || _this$props$styles3 === void 0 ? void 0 : _this$props$styles3.items,
      "aria-disabled": this.props.disabled ? 'true' : void 0,
      "aria-labelledby": this._labelId
    }, this.renderChildren()));
  }

}, _class2.displayName = "MenuItemGroup", _class2.componentId = 'Menu.Group', _class2.propTypes = _props.propTypes, _class2.allowedProps = _props.allowedProps, _class2.defaultProps = {
  disabled: false,
  children: null,
  isTabbable: false,
  allowMultiple: false,
  defaultSelected: []
}, _class2)) || _class) || _class) || _class);
exports.MenuItemGroup = MenuItemGroup;
var _default = MenuItemGroup;
exports.default = _default;