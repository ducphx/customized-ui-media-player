import React, { Component } from 'react';
import type { PositionProps } from '@instructure/ui-position';
import type { DialogProps } from '@instructure/ui-dialog';
import type { PopoverProps, PopoverState } from './props';
/**
---
category: components
tags: overlay, portal, dialog
---
@tsProps
**/
declare class Popover extends Component<PopoverProps, PopoverState> {
    static readonly componentId = "Popover";
    static allowedProps: readonly (keyof import("./props").PopoverOwnProps)[];
    static propTypes: import("@instructure/shared-types/types/UtilityTypes").PropValidators<keyof import("./props").PopoverOwnProps>;
    static defaultProps: {
        defaultIsShowingContent: boolean;
        placement: string;
        stacking: string;
        shadow: string;
        offsetX: number;
        offsetY: number;
        color: string;
        on: string[];
        withArrow: boolean;
        constrain: string;
        insertAt: string;
        shouldAlignArrow: boolean;
        shouldTrackPosition: boolean;
        shouldRenderOffscreen: boolean;
        shouldContainFocus: boolean;
        shouldReturnFocus: boolean;
        shouldCloseOnDocumentClick: boolean;
        shouldFocusContentOnTriggerBlur: boolean;
        shouldCloseOnEscape: boolean;
    };
    constructor(props: PopoverProps);
    private _handleMouseOver;
    private _handleMouseOut;
    private _id;
    private _raf;
    private _trigger;
    private _view;
    private _dialog;
    private _contentElement;
    private _focusRegion?;
    private mouseOutTimeout?;
    ref: Element | null;
    handleRef: (el: Element | null) => void;
    get isTooltip(): boolean | undefined;
    componentDidMount(): void;
    componentWillUnmount(): void;
    shouldComponentUpdate(nextProps: PopoverProps, nextState: PopoverState): boolean;
    componentDidUpdate(prevProps: PopoverProps, prevState: PopoverState): void;
    computeOffsets(placement: PopoverProps['placement']): {
        offsetX: string | number | undefined;
        offsetY: string | number | undefined;
    };
    get placement(): PopoverProps['placement'];
    get positionProps(): Partial<PositionProps>;
    get shown(): boolean | undefined;
    get defaultFocusElement(): import("@instructure/shared-types").UIElement | undefined;
    show: (event: React.UIEvent | React.FocusEvent) => void;
    hide: (event: React.UIEvent | React.FocusEvent, documentClick?: boolean) => void;
    toggle: (event: React.MouseEvent) => void;
    handleDialogDismiss: DialogProps['onDismiss'];
    handleDialogBlur: (event: React.UIEvent | React.FocusEvent) => void;
    handleTriggerKeyDown: (event: React.KeyboardEvent) => void;
    handleTriggerKeyUp: (event: React.KeyboardEvent) => void;
    handleTriggerBlur: (event: React.FocusEvent) => void;
    handlePositioned: PositionProps['onPositioned'];
    handlePositionChanged: PositionProps['onPositionChanged'];
    renderTrigger(): React.ReactElement<any, string | React.JSXElementConstructor<any>>;
    renderContent(): JSX.Element | null;
    render(): JSX.Element;
}
export default Popover;
export { Popover };
//# sourceMappingURL=index.d.ts.map