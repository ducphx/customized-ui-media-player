import React from 'react';
import type { BidirectionalProps } from '@instructure/ui-i18n';
import type { OtherHTMLAttributes, PropValidators } from '@instructure/shared-types';
/**
 * The DOM Node of the Portal. It is created as a `span` element.
 */
declare type PortalNode = HTMLSpanElement | null;
declare type PortalOwnProps = {
    /**
     * Whether or not the `<Portal />` is open
     */
    open?: boolean;
    /**
     * Callback fired when `<Portal />` content has been mounted in the DOM. Ha the Portal DOMNode as parameter.
     */
    onOpen?: (DOMNode: PortalNode) => void;
    /**
     * Callback fired when `<Portal />` has been unmounted from the DOM
     */
    onClose?: () => void;
    /**
     * An element or a function returning an element to use as the mount node
     * for the `<Portal />` (defaults to `document.body`)
     */
    mountNode?: Element | (() => Element | null) | null;
    /**
     * Insert the element at the 'top' of the mountNode or at the 'bottom'
     */
    insertAt?: 'bottom' | 'top';
    /**
     * The children to be rendered within the `<Portal />`
     */
    children?: React.ReactNode;
    /**
     * Provides a reference to the underlying html element. Has the Portal DOMNode as parameter.
     */
    elementRef?: (el?: PortalNode) => void;
} & BidirectionalProps;
declare type PropKeys = keyof PortalOwnProps;
declare type AllowedPropKeys = Readonly<Array<PropKeys>>;
declare type PortalProps = PortalOwnProps & OtherHTMLAttributes<PortalOwnProps>;
declare type PortalState = {
    mountNode: Element;
};
declare const propTypes: PropValidators<PropKeys>;
declare const allowedProps: AllowedPropKeys;
export type { PortalProps, PortalState, PortalNode };
export { propTypes, allowedProps };
//# sourceMappingURL=props.d.ts.map