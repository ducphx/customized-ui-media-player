import React, { Component } from 'react';
import type { PortalNode, PortalProps, PortalState } from './props';
/**
---
category: components/utilities
---
@module Portal
@tsProps
**/
declare class Portal extends Component<PortalProps, PortalState> {
    static propTypes: import("@instructure/shared-types/types/UtilityTypes").PropValidators<"open" | "onOpen" | "onClose" | "mountNode" | "insertAt" | "children" | "elementRef" | "dir">;
    static allowedProps: readonly ("open" | "onOpen" | "onClose" | "mountNode" | "insertAt" | "children" | "elementRef" | "dir")[];
    static defaultProps: {
        open: boolean;
        insertAt: string;
        onOpen: () => void;
        onClose: () => void;
        mountNode: null;
        children: null;
        elementRef: () => void;
    };
    constructor(props: PortalProps);
    DOMNode: PortalNode;
    ref: PortalNode;
    handleRef: (el: PortalNode) => void;
    componentDidMount(): void;
    componentDidUpdate(prevProps: PortalProps): void;
    componentWillUnmount(): void;
    removeNode(): void;
    insertNode(): HTMLSpanElement;
    findMountNode(props: PortalProps): Element;
    get node(): PortalNode;
    render(): React.ReactPortal | null;
}
export default Portal;
export { Portal };
//# sourceMappingURL=index.d.ts.map