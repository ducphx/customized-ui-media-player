var _dec, _dec2, _dec3, _class, _class2;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/** @jsx jsx */
import { Component } from 'react';
import { safeCloneElement, callRenderProp, ensureSingleChild, withDeterministicId } from '@instructure/ui-react-utils';
import { addPositionChangeListener, findDOMNode } from '@instructure/ui-dom-utils';
import { shallowEqual, deepEqual } from '@instructure/ui-utils';
import { debounce } from '@instructure/debounce';
import { testable } from '@instructure/ui-testable';
import { Portal } from '@instructure/ui-portal';
import { withStyle, jsx } from '@instructure/emotion';
import generateStyle from './styles';
import generateComponentTheme from './theme';
import { allowedProps, propTypes } from './props';
import { calculateElementPosition } from '../calculateElementPosition';

/**
---
category: components/utilities
---
@tsProps
**/
let Position = (_dec = withDeterministicId(), _dec2 = withStyle(generateStyle, generateComponentTheme), _dec3 = testable(), _dec(_class = _dec2(_class = _dec3(_class = (_class2 = class Position extends Component {
  constructor(props) {
    super(props);
    this.ref = null;
    this._id = void 0;
    this._timeouts = [];
    this._listener = null;
    this._content = void 0;
    this._target = void 0;

    this.handleRef = el => {
      const elementRef = this.props.elementRef;
      this.ref = el;

      if (typeof elementRef === 'function') {
        elementRef(el);
      }
    };

    this.handlePortalOpen = () => {
      this.position();

      if (this.props.shouldTrackPosition) {
        this.startTracking();
      }

      this._timeouts.push(setTimeout(() => {
        if (this.state.positioned && typeof this.props.onPositioned === 'function') {
          this.props.onPositioned({
            top: this.state.style.top,
            left: this.state.style.left,
            placement: this.state.placement
          });
        }
      }, 0));
    };

    this.position = () => {
      this.setState({
        positioned: true,
        ...this.calculatePosition(this.props)
      });
    };

    this.state = {
      positioned: false,
      ...this.calculatePosition(props)
    };
    this.position = debounce(this.position, 0, {
      leading: false,
      trailing: true
    });
    this._id = this.props.id || props.deterministicId();
  }

  shouldComponentUpdate(nextProps, nextState, nextContext) {
    return !deepEqual(this.state, nextState) || !shallowEqual(this.props, nextProps) || !shallowEqual(this.context, nextContext);
  }

  componentDidMount() {
    var _this$props$makeStyle, _this$props;

    this.toggleLocatorAttributes(true);
    (_this$props$makeStyle = (_this$props = this.props).makeStyles) === null || _this$props$makeStyle === void 0 ? void 0 : _this$props$makeStyle.call(_this$props);
  }

  componentDidUpdate(prevProps, prevState) {
    var _this$props$makeStyle2, _this$props2;

    this.position();
    this.toggleLocatorAttributes(true);

    if (this.props.shouldTrackPosition !== prevProps.shouldTrackPosition) {
      this.props.shouldTrackPosition ? this.startTracking() : this.stopTracking();
    }

    const _this$state = this.state,
          style = _this$state.style,
          placement = _this$state.placement;

    if (style && prevState.style && (placement !== prevState.placement || style.top !== prevState.style.top || style.left !== prevState.style.left) && typeof this.props.onPositionChanged === 'function') {
      this.props.onPositionChanged({
        top: style.top,
        left: style.left,
        placement
      });
    }

    (_this$props$makeStyle2 = (_this$props2 = this.props).makeStyles) === null || _this$props$makeStyle2 === void 0 ? void 0 : _this$props$makeStyle2.call(_this$props2);
  }

  componentWillUnmount() {
    ;
    this.position.cancel();
    this.stopTracking();

    this._timeouts.forEach(timeout => clearTimeout(timeout));

    this.toggleLocatorAttributes(false);
  }

  toggleLocatorAttributes(set) {
    // We have to find the actual DOM nodes and append the attributes
    // directly, as we can't be sure when safe cloning the child that
    // it will accept the data attribute as a prop
    this.toggleLocatorAttribute(findDOMNode(this._content), Position.contentLocatorAttribute, set);
    this.toggleLocatorAttribute(findDOMNode(this._target), Position.targetLocatorAttribute, set);
  }

  toggleLocatorAttribute(node, locator, set) {
    if (node && node.hasAttribute) {
      if (set && !node.hasAttribute(locator)) {
        ;
        node.setAttribute(locator, this._id);
      }

      if (!set && node.hasAttribute(locator)) {
        ;
        node.removeAttribute(locator);
      }
    }
  }

  calculatePosition(props) {
    return calculateElementPosition(this._content, this._target, {
      placement: props.placement,
      offsetX: props.offsetX,
      offsetY: props.offsetY,
      constrain: props.constrain,
      container: props.mountNode,
      over: props.shouldPositionOverTarget
    });
  }

  startTracking() {
    this._listener = this._listener || addPositionChangeListener(this._target, this.position);
  }

  stopTracking() {
    if (this._listener) {
      this._listener.remove();

      this._listener = null;
    }
  } // content that needs to be positioned relative to the target


  renderContent() {
    let content = ensureSingleChild(this.props.children);

    if (content) {
      var _this$props$styles;

      content = safeCloneElement(content, {
        ref: el => {
          this._content = el;
        },
        style: {
          boxSizing: 'border-box',
          zIndex: (_this$props$styles = this.props.styles) === null || _this$props$styles === void 0 ? void 0 : _this$props$styles.zIndex,
          ...content.props.style,
          ...this.state.style
        },
        ...(content.props.className && {
          className: content.props.className
        }),
        [Position.contentLocatorAttribute]: this._id
      });
      content = jsx(Portal, {
        open: true,
        onOpen: this.handlePortalOpen,
        mountNode: this.props.mountNode,
        insertAt: this.props.insertAt
      }, content);
    }

    return content;
  }

  renderTarget() {
    const target = callRenderProp(this.props.renderTarget);

    if (target) {
      return safeCloneElement(target, {
        ref: el => {
          this._target = el;
        },
        [Position.targetLocatorAttribute]: this._id
      });
    } else if (this.props.target) {
      this._target = callRenderProp(this.props.target);
    }

    return null;
  }

  render() {
    const props = {
      [Position.locatorAttribute]: this._id
    };
    return jsx("span", Object.assign({}, props, {
      ref: this.handleRef
    }), this.renderTarget(), this.renderContent());
  }

}, _class2.displayName = "Position", _class2.componentId = 'Position', _class2.allowedProps = allowedProps, _class2.propTypes = propTypes, _class2.defaultProps = {
  placement: 'bottom center',
  mountNode: null,
  insertAt: 'bottom',
  constrain: 'window',
  offsetX: 0,
  offsetY: 0,
  shouldTrackPosition: true,
  shouldPositionOverTarget: false,
  children: null
}, _class2.locatorAttribute = 'data-position', _class2.targetLocatorAttribute = 'data-position-target', _class2.contentLocatorAttribute = 'data-position-content', _class2)) || _class) || _class) || _class);
export default Position;
export { Position };