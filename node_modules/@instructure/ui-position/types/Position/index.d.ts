/// <reference types="node" />
/** @jsx jsx */
import { Component } from 'react';
import type { PositionChangeListenerType } from '@instructure/ui-dom-utils';
import { jsx } from '@instructure/emotion';
import type { PositionProps, PositionState } from './props';
import { PositionElement } from '../PositionPropTypes';
/**
---
category: components/utilities
---
@tsProps
**/
declare class Position extends Component<PositionProps, PositionState> {
    static readonly componentId = "Position";
    static allowedProps: readonly (keyof {
        renderTarget?: import("react").ReactNode | (() => import("react").ReactNode);
        target?: import("../PositionPropTypes").PositionMountNode | undefined;
        placement?: import("../PositionPropTypes").PlacementPropValues | undefined;
        mountNode?: import("../PositionPropTypes").PositionMountNode | undefined;
        insertAt?: "top" | "bottom" | undefined;
        constrain?: import("../PositionPropTypes").PositionConstraint | undefined;
        offsetX?: string | number | undefined;
        offsetY?: string | number | undefined;
        id?: string | undefined;
        shouldTrackPosition?: boolean | undefined;
        shouldPositionOverTarget?: boolean | undefined;
        onPositionChanged?: ((position: import("./props").PositionObject) => void) | undefined;
        onPositioned?: ((position: import("./props").PositionObject) => void) | undefined;
        children?: import("react").ReactNode;
        elementRef?: ((element: Element | null) => void) | undefined;
    })[];
    static propTypes: import("@instructure/shared-types/types/UtilityTypes").PropValidators<keyof {
        renderTarget?: import("react").ReactNode | (() => import("react").ReactNode);
        target?: import("../PositionPropTypes").PositionMountNode | undefined;
        placement?: import("../PositionPropTypes").PlacementPropValues | undefined;
        mountNode?: import("../PositionPropTypes").PositionMountNode | undefined;
        insertAt?: "top" | "bottom" | undefined;
        constrain?: import("../PositionPropTypes").PositionConstraint | undefined;
        offsetX?: string | number | undefined;
        offsetY?: string | number | undefined;
        id?: string | undefined;
        shouldTrackPosition?: boolean | undefined;
        shouldPositionOverTarget?: boolean | undefined;
        onPositionChanged?: ((position: import("./props").PositionObject) => void) | undefined;
        onPositioned?: ((position: import("./props").PositionObject) => void) | undefined;
        children?: import("react").ReactNode;
        elementRef?: ((element: Element | null) => void) | undefined;
    }>;
    static defaultProps: PositionProps;
    static locatorAttribute: string;
    static targetLocatorAttribute: string;
    static contentLocatorAttribute: string;
    constructor(props: PositionProps);
    ref: Element | null;
    _id: string;
    _timeouts: NodeJS.Timeout[];
    _listener: PositionChangeListenerType | null;
    _content?: PositionElement;
    _target?: PositionElement;
    handleRef: (el: Element | null) => void;
    shouldComponentUpdate(nextProps: PositionProps, nextState: PositionState, nextContext: any): boolean;
    componentDidMount(): void;
    componentDidUpdate(prevProps: PositionProps, prevState: PositionState): void;
    componentWillUnmount(): void;
    toggleLocatorAttributes(set: boolean): void;
    toggleLocatorAttribute(node: Node | Window | null | undefined, locator: string, set: boolean): void;
    handlePortalOpen: () => void;
    calculatePosition(props: PositionProps): import("../PositionPropTypes").ElementPosition;
    position: () => void;
    startTracking(): void;
    stopTracking(): void;
    renderContent(): JSX.Element | null;
    renderTarget(): any;
    render(): jsx.JSX.Element;
}
export default Position;
export { Position };
//# sourceMappingURL=index.d.ts.map