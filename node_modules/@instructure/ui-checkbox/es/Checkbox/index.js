var _dec, _dec2, _dec3, _class, _class2;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/** @jsx jsx */
import React, { Component } from 'react';
import keycode from 'keycode';
import { FormFieldMessages } from '@instructure/ui-form-field';
import { createChainedFunction } from '@instructure/ui-utils';
import { logError as error } from '@instructure/console';
import { isActiveElement } from '@instructure/ui-dom-utils';
import { omitProps, withDeterministicId } from '@instructure/ui-react-utils';
import { View } from '@instructure/ui-view';
import { testable } from '@instructure/ui-testable';
import { withStyle, jsx } from '@instructure/emotion';
import { CheckboxFacade } from './CheckboxFacade';
import { ToggleFacade } from './ToggleFacade';
import generateStyle from './styles';
import { propTypes, allowedProps } from './props';

/**
---
category: components
tags: toggle, switch
---
@tsProps
**/
let Checkbox = (_dec = withDeterministicId(), _dec2 = withStyle(generateStyle, null), _dec3 = testable(), _dec(_class = _dec2(_class = _dec3(_class = (_class2 = class Checkbox extends Component {
  constructor(props) {
    super(props);
    this._defaultId = void 0;
    this._input = null;
    this.ref = null;

    this.handleRef = el => {
      this.ref = el;
    };

    this.handleChange = e => {
      const _this$props = this.props,
            onChange = _this$props.onChange,
            disabled = _this$props.disabled,
            checked = _this$props.checked,
            readOnly = _this$props.readOnly;

      if (disabled || readOnly) {
        e.preventDefault();
        return;
      }

      if (typeof checked === 'undefined') {
        this.setState({
          checked: !this.state.checked
        });
      }

      if (typeof onChange === 'function') {
        onChange(e);
      }
    };

    this.handleKeyDown = e => {
      if (this.props.variant === 'toggle' && e.keyCode === keycode.codes.enter) {
        this._input && this._input.click();
        e.preventDefault();
      }
    };

    this.handleFocus = () => {
      this.setState({
        focused: true
      });
    };

    this.handleBlur = () => {
      this.setState({
        focused: false
      });
    };

    this.handleMouseOver = () => {
      this.setState({
        hovered: true
      });
    };

    this.handleMouseOut = () => {
      this.setState({
        hovered: false
      });
    };

    this.state = {
      focused: false,
      hovered: false,
      checked: typeof props.checked === 'undefined' ? !!props.defaultChecked : void 0
    };

    if (typeof props.checked === 'undefined') {
      // @ts-expect-error ts-migrate(2339) FIXME: Property 'checked' does not exist on type 'Readonl... Remove this comment to see the full error message
      this.state.checked = !!props.defaultChecked;
    }

    this._defaultId = props.deterministicId();
  }

  componentDidMount() {
    var _this$props$makeStyle, _this$props2;

    if (this._input) {
      this._input.indeterminate = this.props.indeterminate;
    }

    (_this$props$makeStyle = (_this$props2 = this.props).makeStyles) === null || _this$props$makeStyle === void 0 ? void 0 : _this$props$makeStyle.call(_this$props2);
  }

  componentDidUpdate(prevProps) {
    var _this$props$makeStyle2, _this$props3;

    if (prevProps.indeterminate !== this.props.indeterminate && this._input) {
      this._input.indeterminate = this.props.indeterminate || false;
    }

    (_this$props$makeStyle2 = (_this$props3 = this.props).makeStyles) === null || _this$props$makeStyle2 === void 0 ? void 0 : _this$props$makeStyle2.call(_this$props3);
  }

  get id() {
    return this.props.id || this._defaultId;
  }

  get checked() {
    return typeof this.props.checked === 'undefined' ? this.state.checked : this.props.checked;
  }

  get focused() {
    return isActiveElement(this._input);
  }

  focus() {
    this._input && this._input.focus();
  }

  renderFacade() {
    const _this$props4 = this.props,
          size = _this$props4.size,
          disabled = _this$props4.disabled,
          variant = _this$props4.variant,
          label = _this$props4.label,
          readOnly = _this$props4.readOnly,
          indeterminate = _this$props4.indeterminate,
          labelPlacement = _this$props4.labelPlacement,
          themeOverride = _this$props4.themeOverride;
    const _this$state = this.state,
          hovered = _this$state.hovered,
          focused = _this$state.focused;
    error(!(variant === 'simple' && labelPlacement !== 'end'), `[Checkbox] The \`simple\` variant does not support the \`labelPlacement\` property.  Use the \`toggle\` variant instead.`);

    if (variant === 'toggle') {
      return jsx(ToggleFacade, {
        disabled: disabled,
        size: size,
        focused: focused,
        checked: this.checked,
        readOnly: readOnly,
        labelPlacement: labelPlacement,
        themeOverride: themeOverride
      }, label);
    } else {
      return jsx(CheckboxFacade, {
        size: size,
        hovered: hovered,
        focused: focused,
        checked: this.checked,
        indeterminate: indeterminate,
        themeOverride: themeOverride
      }, label);
    }
  }

  renderMessages() {
    const messages = this.props.messages;
    return messages && messages.length > 0 ? jsx(View, {
      display: "block",
      margin: "small 0 0"
    }, jsx(FormFieldMessages, {
      messages: messages
    })) : null;
  }

  render() {
    const _this$props5 = this.props,
          disabled = _this$props5.disabled,
          readOnly = _this$props5.readOnly,
          value = _this$props5.value,
          onKeyDown = _this$props5.onKeyDown,
          onFocus = _this$props5.onFocus,
          onBlur = _this$props5.onBlur,
          onMouseOver = _this$props5.onMouseOver,
          onMouseOut = _this$props5.onMouseOut,
          indeterminate = _this$props5.indeterminate,
          variant = _this$props5.variant,
          styles = _this$props5.styles;
    const props = omitProps(this.props, Checkbox.allowedProps);
    error(!(variant === 'toggle' && indeterminate), `[Checkbox] The \`toggle\` variant does not support the \`indeterminate\` property. Use the \`simple\` variant instead.`);
    /* eslint-disable jsx-a11y/mouse-events-have-key-events */

    return jsx("div", {
      css: styles === null || styles === void 0 ? void 0 : styles.checkbox,
      onMouseOver: createChainedFunction(onMouseOver, this.handleMouseOver),
      onMouseOut: createChainedFunction(onMouseOut, this.handleMouseOut),
      ref: this.handleRef
    }, jsx("input", Object.assign({}, props, {
      id: this.id,
      value: value,
      type: "checkbox",
      ref: c => {
        this._input = c;
      },
      disabled: disabled || readOnly,
      "aria-checked": indeterminate ? 'mixed' : void 0,
      css: styles === null || styles === void 0 ? void 0 : styles.input,
      onChange: this.handleChange,
      onKeyDown: createChainedFunction(onKeyDown, this.handleKeyDown),
      onFocus: createChainedFunction(onFocus, this.handleFocus),
      onBlur: createChainedFunction(onBlur, this.handleBlur),
      checked: this.checked
    })), jsx("label", {
      htmlFor: this.id,
      css: styles === null || styles === void 0 ? void 0 : styles.control
    }, this.renderFacade(), this.renderMessages()));
    /* eslint-enable jsx-a11y/mouse-events-have-key-events */
  }

}, _class2.displayName = "Checkbox", _class2.componentId = 'Checkbox', _class2.propTypes = propTypes, _class2.allowedProps = allowedProps, _class2.defaultProps = {
  size: 'medium',
  variant: 'simple',
  disabled: false,
  inline: false,
  indeterminate: false,
  readOnly: false,
  labelPlacement: 'end'
}, _class2)) || _class) || _class) || _class);
export default Checkbox;
export { Checkbox, CheckboxFacade, ToggleFacade };