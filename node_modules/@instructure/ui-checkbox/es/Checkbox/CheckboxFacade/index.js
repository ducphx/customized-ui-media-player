var _dec, _class, _class2, _SVGIcon, _IconCheckMarkSolid;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/** @jsx jsx */
import { Component } from 'react';
import { SVGIcon } from '@instructure/ui-svg-images';
import { IconCheckMarkSolid } from '@instructure/ui-icons';
import { withStyle, jsx } from '@instructure/emotion';
import generateStyle from './styles';
import generateComponentTheme from './theme';
import { propTypes, allowedProps } from './props';

/**
---
parent: Checkbox
---
@tsProps
**/
let CheckboxFacade = (_dec = withStyle(generateStyle, generateComponentTheme), _dec(_class = (_class2 = class CheckboxFacade extends Component {
  constructor() {
    super(...arguments);
    this.ref = null;

    this.handleRef = el => {
      this.ref = el;
    };
  }

  componentDidMount() {
    var _this$props$makeStyle, _this$props;

    (_this$props$makeStyle = (_this$props = this.props).makeStyles) === null || _this$props$makeStyle === void 0 ? void 0 : _this$props$makeStyle.call(_this$props);
  }

  componentDidUpdate() {
    var _this$props$makeStyle2, _this$props2;

    (_this$props$makeStyle2 = (_this$props2 = this.props).makeStyles) === null || _this$props$makeStyle2 === void 0 ? void 0 : _this$props$makeStyle2.call(_this$props2);
  }

  renderIcon() {
    if (this.props.indeterminate) {
      return _SVGIcon || (_SVGIcon = jsx(SVGIcon, {
        viewBox: "0 0 1920 1920",
        inline: false
      }, jsx("rect", {
        x: "140",
        y: "820",
        width: "1640",
        height: "280"
      })));
    } else if (this.props.checked) {
      return _IconCheckMarkSolid || (_IconCheckMarkSolid = jsx(IconCheckMarkSolid, {
        inline: false
      }));
    } else {
      return null;
    }
  }

  render() {
    const _this$props3 = this.props,
          children = _this$props3.children,
          styles = _this$props3.styles;
    return jsx("span", {
      css: styles === null || styles === void 0 ? void 0 : styles.checkboxFacade,
      ref: this.handleRef
    }, jsx("span", {
      css: styles === null || styles === void 0 ? void 0 : styles.facade,
      "aria-hidden": "true"
    }, this.renderIcon()), jsx("span", {
      css: styles === null || styles === void 0 ? void 0 : styles.label
    }, children));
  }

}, _class2.displayName = "CheckboxFacade", _class2.componentId = 'CheckboxFacade', _class2.propTypes = propTypes, _class2.allowedProps = allowedProps, _class2.defaultProps = {
  checked: false,
  focused: false,
  hovered: false,
  size: 'medium',
  indeterminate: false
}, _class2)) || _class);
export default CheckboxFacade;
export { CheckboxFacade };