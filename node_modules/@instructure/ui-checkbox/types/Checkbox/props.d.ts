/// <reference types="react" />
import type { FormMessage } from '@instructure/ui-form-field';
import type { CheckboxFacadeTheme, OtherHTMLAttributes, PropValidators, ToggleFacadeTheme } from '@instructure/shared-types';
import type { WithStyleProps, ComponentStyle } from '@instructure/emotion';
import type { WithDeterministicIdProps } from '@instructure/ui-react-utils';
declare type CheckboxOwnProps = {
    label: React.ReactNode;
    id?: string;
    value?: string | number;
    /**
     * Array of objects with shape: `{
     *   text: ReactNode,
     *   type: One of: ['error', 'hint', 'success', 'screenreader-only']
     *   }`
     */
    messages?: FormMessage[];
    defaultChecked?: boolean;
    /**
     * whether the input is checked or not (must be accompanied by an `onChange` prop)
     */
    checked?: boolean;
    /**
     * when used with the `checked` prop, the component will not control its own state
     */
    onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;
    onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;
    onFocus?: (e: React.FocusEvent<HTMLInputElement>) => void;
    onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;
    onMouseOver?: (e: React.MouseEvent<HTMLInputElement>) => void;
    onMouseOut?: (e: React.MouseEvent<HTMLInputElement>) => void;
    /**
     * Whether or not to disable the checkbox
     */
    disabled?: boolean;
    /**
     * Works just like disabled but keeps the same styles as if it were active
     */
    readOnly?: boolean;
    /**
     * Visual state showing that child checkboxes are a combination of checked and unchecked
     */
    indeterminate?: boolean;
    size?: 'small' | 'medium' | 'large';
    variant?: 'simple' | 'toggle';
    inline?: boolean;
    labelPlacement?: 'top' | 'start' | 'end';
};
declare type PropKeys = keyof CheckboxOwnProps;
declare type AllowedPropKeys = Readonly<Array<PropKeys>>;
declare type CheckboxProps = CheckboxOwnProps & WithStyleProps<CheckboxFacadeTheme | ToggleFacadeTheme, CheckboxStyle> & OtherHTMLAttributes<CheckboxOwnProps> & WithDeterministicIdProps;
declare type CheckboxStyle = ComponentStyle<'checkbox' | 'input' | 'control'>;
declare const propTypes: PropValidators<PropKeys>;
declare const allowedProps: AllowedPropKeys;
declare type CheckboxState = {
    focused: boolean;
    hovered: boolean;
    checked?: boolean;
};
export type { CheckboxProps, CheckboxStyle, CheckboxState };
export { propTypes, allowedProps };
//# sourceMappingURL=props.d.ts.map