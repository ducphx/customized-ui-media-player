/** @jsx jsx */
import React, { Component } from 'react';
import { jsx } from '@instructure/emotion';
import { CheckboxFacade } from './CheckboxFacade';
import { ToggleFacade } from './ToggleFacade';
import type { CheckboxProps, CheckboxState } from './props';
/**
---
category: components
tags: toggle, switch
---
@tsProps
**/
declare class Checkbox extends Component<CheckboxProps, CheckboxState> {
    static readonly componentId = "Checkbox";
    static propTypes: import("@instructure/shared-types/types/UtilityTypes").PropValidators<keyof {
        label: React.ReactNode;
        id?: string | undefined;
        value?: string | number | undefined;
        messages?: import("@instructure/ui-form-field/types/FormPropTypes").FormMessage[] | undefined;
        defaultChecked?: boolean | undefined;
        checked?: boolean | undefined;
        onChange?: ((e: React.ChangeEvent<HTMLInputElement>) => void) | undefined;
        onKeyDown?: ((e: React.KeyboardEvent<HTMLInputElement>) => void) | undefined;
        onFocus?: ((e: React.FocusEvent<HTMLInputElement, Element>) => void) | undefined;
        onBlur?: ((e: React.FocusEvent<HTMLInputElement, Element>) => void) | undefined;
        onMouseOver?: ((e: React.MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined;
        onMouseOut?: ((e: React.MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined;
        disabled?: boolean | undefined;
        readOnly?: boolean | undefined;
        indeterminate?: boolean | undefined;
        size?: "small" | "medium" | "large" | undefined;
        variant?: "simple" | "toggle" | undefined;
        inline?: boolean | undefined;
        labelPlacement?: "top" | "end" | "start" | undefined;
    }>;
    static allowedProps: readonly (keyof {
        label: React.ReactNode;
        id?: string | undefined;
        value?: string | number | undefined;
        messages?: import("@instructure/ui-form-field/types/FormPropTypes").FormMessage[] | undefined;
        defaultChecked?: boolean | undefined;
        checked?: boolean | undefined;
        onChange?: ((e: React.ChangeEvent<HTMLInputElement>) => void) | undefined;
        onKeyDown?: ((e: React.KeyboardEvent<HTMLInputElement>) => void) | undefined;
        onFocus?: ((e: React.FocusEvent<HTMLInputElement, Element>) => void) | undefined;
        onBlur?: ((e: React.FocusEvent<HTMLInputElement, Element>) => void) | undefined;
        onMouseOver?: ((e: React.MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined;
        onMouseOut?: ((e: React.MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined;
        disabled?: boolean | undefined;
        readOnly?: boolean | undefined;
        indeterminate?: boolean | undefined;
        size?: "small" | "medium" | "large" | undefined;
        variant?: "simple" | "toggle" | undefined;
        inline?: boolean | undefined;
        labelPlacement?: "top" | "end" | "start" | undefined;
    })[];
    static defaultProps: {
        size: string;
        variant: string;
        disabled: boolean;
        inline: boolean;
        indeterminate: boolean;
        readOnly: boolean;
        labelPlacement: string;
    };
    constructor(props: CheckboxProps);
    private readonly _defaultId;
    private _input;
    ref: Element | null;
    handleRef: (el: Element | null) => void;
    componentDidMount(): void;
    componentDidUpdate(prevProps: CheckboxProps): void;
    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    handleKeyDown: (e: React.KeyboardEvent<HTMLInputElement>) => void;
    handleFocus: () => void;
    handleBlur: () => void;
    handleMouseOver: () => void;
    handleMouseOut: () => void;
    get id(): string;
    get checked(): boolean | undefined;
    get focused(): boolean;
    focus(): void;
    renderFacade(): jsx.JSX.Element;
    renderMessages(): jsx.JSX.Element | null;
    render(): jsx.JSX.Element;
}
export default Checkbox;
export { Checkbox, CheckboxFacade, ToggleFacade };
//# sourceMappingURL=index.d.ts.map