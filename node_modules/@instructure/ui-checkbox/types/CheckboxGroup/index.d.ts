import React, { Component } from 'react';
import type { CheckboxGroupProps, CheckboxGroupState, CheckboxChild } from './props';
/**
---
category: components
---
@tsProps
**/
declare class CheckboxGroup extends Component<CheckboxGroupProps, CheckboxGroupState> {
    static readonly componentId = "CheckboxGroup";
    static propTypes: import("@instructure/shared-types/types/UtilityTypes").PropValidators<keyof {
        children?: CheckboxChild[] | undefined;
        name: string;
        description: React.ReactNode;
        defaultValue?: (string | number)[] | undefined;
        value?: (string | number)[] | undefined;
        onChange?: ((value: (string | number)[]) => void) | undefined;
        disabled?: boolean | undefined;
        readOnly?: boolean | undefined;
        messages?: import("@instructure/ui-form-field/types/FormPropTypes").FormMessage[] | undefined;
        size?: "small" | "medium" | "large" | undefined;
        layout?: "columns" | "inline" | "stacked" | undefined;
    }>;
    static allowedProps: readonly (keyof {
        children?: CheckboxChild[] | undefined;
        name: string;
        description: React.ReactNode;
        defaultValue?: (string | number)[] | undefined;
        value?: (string | number)[] | undefined;
        onChange?: ((value: (string | number)[]) => void) | undefined;
        disabled?: boolean | undefined;
        readOnly?: boolean | undefined;
        messages?: import("@instructure/ui-form-field/types/FormPropTypes").FormMessage[] | undefined;
        size?: "small" | "medium" | "large" | undefined;
        layout?: "columns" | "inline" | "stacked" | undefined;
    })[];
    static defaultProps: {
        disabled: boolean;
        readOnly: boolean;
        size: string;
        layout: string;
        children: null;
    };
    constructor(props: CheckboxGroupProps);
    private readonly _messagesId;
    ref: Element | null;
    handleRef: (el: Element | null) => void;
    get hasMessages(): boolean | undefined;
    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    get value(): (string | number)[];
    renderChildren(): (React.ReactChild | React.ReactFragment | React.ReactPortal)[] | null | undefined;
    render(): JSX.Element;
}
export default CheckboxGroup;
export { CheckboxGroup };
//# sourceMappingURL=index.d.ts.map