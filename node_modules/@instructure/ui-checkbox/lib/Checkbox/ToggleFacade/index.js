"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ToggleFacade = void 0;

var _react = require("react");

var _IconCheckSolid = require("@instructure/ui-icons/lib/IconCheckSolid.js");

var _IconXSolid = require("@instructure/ui-icons/lib/IconXSolid.js");

var _emotion = require("@instructure/emotion");

var _styles = _interopRequireDefault(require("./styles"));

var _theme = _interopRequireDefault(require("./theme"));

var _props = require("./props");

var _dec, _class, _class2;

/**
---
parent: Checkbox
---
@tsProps
**/
let ToggleFacade = (_dec = (0, _emotion.withStyle)(_styles.default, _theme.default), _dec(_class = (_class2 = class ToggleFacade extends _react.Component {
  constructor() {
    super(...arguments);
    this.ref = null;

    this.handleRef = el => {
      this.ref = el;
    };
  }

  componentDidMount() {
    var _this$props$makeStyle, _this$props;

    (_this$props$makeStyle = (_this$props = this.props).makeStyles) === null || _this$props$makeStyle === void 0 ? void 0 : _this$props$makeStyle.call(_this$props);
  }

  componentDidUpdate() {
    var _this$props$makeStyle2, _this$props2;

    (_this$props$makeStyle2 = (_this$props2 = this.props).makeStyles) === null || _this$props$makeStyle2 === void 0 ? void 0 : _this$props$makeStyle2.call(_this$props2);
  }

  renderIcon() {
    const _this$props3 = this.props,
          styles = _this$props3.styles,
          checked = _this$props3.checked;

    if (checked) {
      return (0, _emotion.jsx)(_IconCheckSolid.IconCheckSolid, {
        css: styles === null || styles === void 0 ? void 0 : styles.iconSVG
      });
    } else {
      return (0, _emotion.jsx)(_IconXSolid.IconXSolid, {
        css: styles === null || styles === void 0 ? void 0 : styles.iconSVG
      });
    }
  }

  renderLabel() {
    const _this$props4 = this.props,
          children = _this$props4.children,
          styles = _this$props4.styles;
    return (0, _emotion.jsx)("span", {
      css: styles === null || styles === void 0 ? void 0 : styles.label
    }, children);
  }

  render() {
    const _this$props5 = this.props,
          labelPlacement = _this$props5.labelPlacement,
          styles = _this$props5.styles;
    return (0, _emotion.jsx)("span", {
      css: styles === null || styles === void 0 ? void 0 : styles.toggleFacade,
      ref: this.handleRef
    }, (labelPlacement === 'top' || labelPlacement === 'start') && this.renderLabel(), (0, _emotion.jsx)("span", {
      css: styles === null || styles === void 0 ? void 0 : styles.facade,
      "aria-hidden": "true"
    }, (0, _emotion.jsx)("span", {
      css: styles === null || styles === void 0 ? void 0 : styles.icon
    }, (0, _emotion.jsx)("span", {
      css: styles === null || styles === void 0 ? void 0 : styles.iconToggle
    }, this.renderIcon()))), labelPlacement === 'end' && this.renderLabel());
  }

}, _class2.displayName = "ToggleFacade", _class2.componentId = 'ToggleFacade', _class2.propTypes = _props.propTypes, _class2.allowedProps = _props.allowedProps, _class2.defaultProps = {
  checked: false,
  focused: false,
  size: 'medium',
  disabled: false,
  readOnly: false,
  labelPlacement: 'end'
}, _class2)) || _class);
exports.ToggleFacade = ToggleFacade;
var _default = ToggleFacade;
exports.default = _default;