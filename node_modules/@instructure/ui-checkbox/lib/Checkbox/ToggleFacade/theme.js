"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * Generates the theme object for the component from the theme and provided additional information
 * @param  {Object} theme The actual theme object.
 * @return {Object} The final theme object with the overrides and component variables
 */
const generateComponentTheme = theme => {
  const colors = theme.colors,
        borders = theme.borders,
        forms = theme.forms,
        shadows = theme.shadows,
        spacing = theme.spacing,
        typography = theme.typography,
        themeName = theme.key;
  const themeSpecificStyle = {
    canvas: {
      focusOutlineColor: theme['ic-brand-primary'],
      labelColor: theme['ic-brand-font-color-dark']
    },
    'canvas-high-contrast': {
      background: colors === null || colors === void 0 ? void 0 : colors.backgroundDarkest,
      borderColor: colors === null || colors === void 0 ? void 0 : colors.borderDarkest
    }
  };
  const componentVariables = {
    color: colors === null || colors === void 0 ? void 0 : colors.textLightest,
    background: colors === null || colors === void 0 ? void 0 : colors.backgroundLight,
    borderColor: colors === null || colors === void 0 ? void 0 : colors.borderMedium,
    borderWidth: borders === null || borders === void 0 ? void 0 : borders.widthSmall,
    borderRadius: '4rem',
    marginEnd: spacing === null || spacing === void 0 ? void 0 : spacing.small,
    marginStart: spacing === null || spacing === void 0 ? void 0 : spacing.small,
    marginVertical: spacing === null || spacing === void 0 ? void 0 : spacing.xSmall,
    checkedBackground: colors === null || colors === void 0 ? void 0 : colors.backgroundSuccess,
    uncheckedIconColor: colors === null || colors === void 0 ? void 0 : colors.textDarkest,
    checkedIconColor: colors === null || colors === void 0 ? void 0 : colors.textSuccess,
    focusOutlineColor: colors === null || colors === void 0 ? void 0 : colors.borderBrand,
    focusBorderWidth: borders === null || borders === void 0 ? void 0 : borders.widthMedium,
    focusBorderStyle: borders === null || borders === void 0 ? void 0 : borders.style,
    toggleBackground: colors === null || colors === void 0 ? void 0 : colors.backgroundLightest,
    toggleShadow: shadows === null || shadows === void 0 ? void 0 : shadows.depth1,
    toggleSize: forms === null || forms === void 0 ? void 0 : forms.inputHeightSmall,
    labelColor: colors === null || colors === void 0 ? void 0 : colors.textDarkest,
    labelFontFamily: typography === null || typography === void 0 ? void 0 : typography.fontFamily,
    labelFontWeight: typography === null || typography === void 0 ? void 0 : typography.fontWeightNormal,
    labelLineHeight: typography === null || typography === void 0 ? void 0 : typography.lineHeightCondensed,
    labelFontSizeSmall: typography === null || typography === void 0 ? void 0 : typography.fontSizeSmall,
    labelFontSizeMedium: typography === null || typography === void 0 ? void 0 : typography.fontSizeMedium,
    labelFontSizeLarge: typography === null || typography === void 0 ? void 0 : typography.fontSizeLarge
  };
  return { ...componentVariables,
    ...themeSpecificStyle[themeName]
  };
};

var _default = generateComponentTheme;
exports.default = _default;