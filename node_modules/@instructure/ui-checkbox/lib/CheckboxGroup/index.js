"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.CheckboxGroup = void 0;

var _react = _interopRequireWildcard(require("react"));

var _FormFieldGroup = require("@instructure/ui-form-field/lib/FormFieldGroup");

var _matchComponentTypes = require("@instructure/ui-react-utils/lib/matchComponentTypes.js");

var _safeCloneElement = require("@instructure/ui-react-utils/lib/safeCloneElement.js");

var _pickProps = require("@instructure/ui-react-utils/lib/pickProps.js");

var _omitProps = require("@instructure/ui-react-utils/lib/omitProps.js");

var _withDeterministicId = require("@instructure/ui-react-utils/lib/DeterministicIdContext/withDeterministicId.js");

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _Checkbox = require("../Checkbox");

var _props = require("./props");

var _dec, _dec2, _class, _class2;

/**
---
category: components
---
@tsProps
**/
let CheckboxGroup = (_dec = (0, _withDeterministicId.withDeterministicId)(), _dec2 = (0, _testable.testable)(), _dec(_class = _dec2(_class = (_class2 = class CheckboxGroup extends _react.Component {
  constructor(props) {
    super(props);
    this._messagesId = void 0;
    this.ref = null;

    this.handleRef = el => {
      this.ref = el;
    };

    this.handleChange = e => {
      const newValue = this.value;

      if (this.props.disabled || this.props.readOnly) {
        e.preventDefault();
        return;
      }

      if (e.target.checked) {
        newValue.push(e.target.value);
      } else {
        newValue.splice(newValue.indexOf(e.target.value), 1);
      }

      if (typeof this.props.value === 'undefined') {
        this.setState({
          value: newValue
        });
      }

      if (typeof this.props.onChange === 'function') {
        this.props.onChange(newValue);
      }
    };

    if (typeof props.value === 'undefined') {
      this.state = {
        value: props.defaultValue || []
      };
    }

    this._messagesId = props.deterministicId();
  }

  get hasMessages() {
    return this.props.messages && this.props.messages.length > 0;
  }

  get value() {
    return typeof this.props.value === 'undefined' ? [...this.state.value] : [...this.props.value];
  }

  renderChildren() {
    const _this$props = this.props,
          children = _this$props.children,
          name = _this$props.name,
          size = _this$props.size,
          disabled = _this$props.disabled,
          readOnly = _this$props.readOnly;
    return _react.Children.map(children, child => {
      if ((0, _matchComponentTypes.matchComponentTypes)(child, [_Checkbox.Checkbox])) {
        return (0, _safeCloneElement.safeCloneElement)(child, {
          key: `${child.props.name}`,
          name,
          label: child.props.label,
          disabled: disabled || child.props.disabled,
          readOnly: readOnly || child.props.readOnly,
          size,
          checked: this.value.indexOf(child.props.value) > -1,
          onChange: this.handleChange,
          width: child.props.width || 'auto',
          'aria-describedby': this.hasMessages ? this._messagesId : void 0
        });
      } else {
        return child;
      }
    });
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_FormFieldGroup.FormFieldGroup, Object.assign({}, (0, _omitProps.omitProps)(this.props, CheckboxGroup.allowedProps), (0, _pickProps.pickProps)(this.props, _FormFieldGroup.FormFieldGroup.allowedProps), {
      description: this.props.description,
      rowSpacing: "small",
      vAlign: "top",
      messagesId: this._messagesId,
      elementRef: this.handleRef
    }), this.renderChildren());
  }

}, _class2.displayName = "CheckboxGroup", _class2.componentId = 'CheckboxGroup', _class2.propTypes = _props.propTypes, _class2.allowedProps = _props.allowedProps, _class2.defaultProps = {
  disabled: false,
  readOnly: false,
  size: 'medium',
  layout: 'stacked',
  children: null
}, _class2)) || _class) || _class);
exports.CheckboxGroup = CheckboxGroup;
var _default = CheckboxGroup;
exports.default = _default;