"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Dialog = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _omitProps = require("@instructure/ui-react-utils/lib/omitProps.js");

var _getElementType = require("@instructure/ui-react-utils/lib/getElementType.js");

var _findDOMNode = require("@instructure/ui-dom-utils/lib/findDOMNode.js");

var _requestAnimationFrame = require("@instructure/ui-dom-utils/lib/requestAnimationFrame.js");

var _console = require("@instructure/console");

var _FocusRegionManager = require("@instructure/ui-a11y-utils/lib/FocusRegionManager.js");

var _props = require("./props");

const _excluded = ["open", "contentElement"],
      _excluded2 = ["open", "contentElement"];

/**
---
category: components/utilities
---
@module Dialog
@tsProps
**/
class Dialog extends _react.Component {
  constructor() {
    super(...arguments);
    this._timeouts = [];
    this._raf = [];
    this._focusRegion = null;
    this.ref = null;

    this.getRef = el => {
      const elementRef = this.props.elementRef;
      this.ref = el;

      if (typeof elementRef === 'function') {
        elementRef(el);
      }
    };
  }

  get _root() {
    return this.ref;
  }

  componentDidMount() {
    if (this.props.open) {
      this.open();
    }
  }

  componentDidUpdate(prevProps) {
    const _this$props = this.props,
          open = _this$props.open,
          contentElement = _this$props.contentElement,
          options = (0, _objectWithoutProperties2.default)(_this$props, _excluded);

    if (open && !prevProps.open) {
      this.open();
    } else if (!open && prevProps.open) {
      this.close();
    }

    if (this._focusRegion) {
      this._focusRegion.updateElement(this.contentElement, options);
    }
  }

  componentWillUnmount() {
    if (this.props.open) {
      this.close();
    }

    this._timeouts.forEach(timeout => clearTimeout(timeout));

    this._timeouts = [];

    this._raf.forEach(request => request.cancel());

    this._raf = [];
  }

  open() {
    const _this$props2 = this.props,
          open = _this$props2.open,
          contentElement = _this$props2.contentElement,
          options = (0, _objectWithoutProperties2.default)(_this$props2, _excluded2);

    this._raf.push((0, _requestAnimationFrame.requestAnimationFrame)(() => {
      // It needs to wait a heartbeat until the content is fully loaded
      // inside the dialog. If it contains a focusable element, it will
      // get focused on open, and browsers scroll to the focused element.
      // If the css is not fully applied, the element may not be in their
      // final position, making the page jump.
      this._timeouts.push(setTimeout(() => {
        this._focusRegion = _FocusRegionManager.FocusRegionManager.activateRegion(this.contentElement, { ...options
        });
      }, 0));
    }));
  }

  close() {
    if (this._focusRegion) {
      _FocusRegionManager.FocusRegionManager.blurRegion(this.contentElement, this._focusRegion.id);
    }
  }

  focus() {
    if (!this.props.open || !this.contentElement) {
      (0, _console.logError)(false, "[Dialog] Can't focus a Dialog that isn't open.");
      return;
    }

    if (this._focusRegion) {
      _FocusRegionManager.FocusRegionManager.focusRegion(this.contentElement, this._focusRegion.id);
    }
  }

  blur() {
    if (!this.props.open || !this.contentElement) {
      (0, _console.logError)(false, "[Dialog] Can't blur a Dialog that isn't open.");
      return;
    }

    this.close();
  }

  get contentElement() {
    let contentElement = (0, _findDOMNode.findDOMNode)(this.props.contentElement);

    if (!contentElement) {
      contentElement = (0, _findDOMNode.findDOMNode)(this.ref);
    }

    return contentElement;
  }

  get focused() {
    return this.contentElement && this._focusRegion && _FocusRegionManager.FocusRegionManager.isFocused(this.contentElement, this._focusRegion.id);
  }

  render() {
    const ElementType = (0, _getElementType.getElementType)(Dialog, this.props); // In case the HTML role attribute is explicitly passed, use props.role

    const role = this.props.role || (this.props.label ? 'dialog' : void 0);
    return this.props.open ? /*#__PURE__*/_react.default.createElement(ElementType // @ts-expect-error TODO: `ref` prop causes: "Expression produces a union type that is too complex to represent.ts(2590)"
    , Object.assign({}, (0, _omitProps.omitProps)(this.props, Dialog.allowedProps), {
      role: role,
      "aria-label": this.props.label,
      className: this.props.className // eslint-disable-line react/prop-types
      ,
      ref: this.getRef
    }), this.props.children) : null;
  }

}

exports.Dialog = Dialog;
Dialog.displayName = "Dialog";
Dialog.componentId = 'Dialog';
Dialog.propTypes = _props.propTypes;
Dialog.allowedProps = _props.allowedProps;
Dialog.defaultProps = {
  open: false,
  shouldFocusOnOpen: true,
  shouldContainFocus: false,
  shouldReturnFocus: false,
  shouldCloseOnDocumentClick: true,
  shouldCloseOnEscape: true
};
var _default = Dialog;
exports.default = _default;