"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.propTypes = exports.allowedProps = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// JSDoc comments are here, because the doc app is not able to pick them up if
// they are in another package
const propTypes = {
  children: _propTypes.default.node,
  as: _propTypes.default.elementType,
  // eslint-disable-line react/require-default-props
  display: _propTypes.default.oneOf(['auto', 'block', 'inline-block']),
  label: _propTypes.default.string,
  open: _propTypes.default.bool,

  /**
   * Function called when tab focus leaves the focusable content. This only
   * occurs when `shouldContainFocus` is set to false.
   */
  onBlur: _propTypes.default.func,

  /**
   * Function called when a focus region is dismissed. This can happen when
   * the user presses the escape key and `shouldCloseOnEscape` is true or
   * when an IFrame is clicked or when anything outside the focus region
   * is clicked if `shouldCloseOnDocumentClick` is true.
   * @param event The event triggered the dismissal
   * @param documentClick Whether the dismissal was triggered by a mouse click.
   */
  onDismiss: _propTypes.default.func,

  /**
   * An element or a function returning an element to focus by default
   */
  defaultFocusElement: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.func]),
  contentElement: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.func]),

  /**
   * An element, function returning an element, or array of elements that will not be hidden from
   * the screen reader when the focus region is active
   */
  liveRegion: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.element), _propTypes.default.element, _propTypes.default.func]),

  /**
   * When set to true or its an array that includes the 'keyboard' string,
   * the keyboard and screenreader focus is trapped; when set to 'screenreader'
   * only the screenreader focus is trapped.
   */
  shouldContainFocus: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['keyboard', 'screenreader'])]),

  /**
   * When set to true the keyboard focus is returned to the active element
   * before the focus region was activated.
   */
  shouldReturnFocus: _propTypes.default.bool,

  /**
   * When set to true the `onDismiss` function is called on a click outside
   * the focus region.
   */
  shouldCloseOnDocumentClick: _propTypes.default.bool,

  /**
   * When set to true the `onDismiss` function is called on the `Escape`
   * keypress
   */
  shouldCloseOnEscape: _propTypes.default.bool,

  /**
   * When set to true, the `defaultFocusElement` is focused on initialization.
   */
  shouldFocusOnOpen: _propTypes.default.bool,

  /**
   * provides a reference to the underlying html root element
   */
  elementRef: _propTypes.default.func
};
exports.propTypes = propTypes;
const allowedProps = ['children', 'as', 'display', 'label', 'open', 'onBlur', 'onDismiss', 'defaultFocusElement', 'contentElement', 'liveRegion', 'shouldContainFocus', 'shouldReturnFocus', 'shouldCloseOnDocumentClick', 'shouldCloseOnEscape', 'shouldFocusOnOpen', 'elementRef'];
exports.allowedProps = allowedProps;