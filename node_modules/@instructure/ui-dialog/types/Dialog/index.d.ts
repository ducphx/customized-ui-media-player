import { Component } from 'react';
import type { RequestAnimationFrameType } from '@instructure/ui-dom-utils';
import type { DialogProps } from './props';
/**
---
category: components/utilities
---
@module Dialog
@tsProps
**/
declare class Dialog extends Component<DialogProps> {
    static readonly componentId = "Dialog";
    static propTypes: import("@instructure/shared-types/types/UtilityTypes").PropValidators<"label" | "children" | "as" | "display" | "open" | "contentElement" | keyof import("@instructure/ui-a11y-utils").FocusRegionOptions>;
    static allowedProps: readonly ("label" | "children" | "as" | "display" | "open" | "contentElement" | keyof import("@instructure/ui-a11y-utils").FocusRegionOptions)[];
    static defaultProps: {
        readonly open: false;
        readonly shouldFocusOnOpen: true;
        readonly shouldContainFocus: false;
        readonly shouldReturnFocus: false;
        readonly shouldCloseOnDocumentClick: true;
        readonly shouldCloseOnEscape: true;
    };
    _timeouts: ReturnType<typeof setTimeout>[];
    _raf: RequestAnimationFrameType[];
    private _focusRegion;
    ref: Element | null;
    get _root(): Element | null;
    componentDidMount(): void;
    componentDidUpdate(prevProps: DialogProps): void;
    componentWillUnmount(): void;
    open(): void;
    close(): void;
    focus(): void;
    blur(): void;
    getRef: (el: Element | null) => void;
    get contentElement(): Node | Element;
    get focused(): boolean | null | undefined;
    render(): JSX.Element | null;
}
export default Dialog;
export { Dialog };
//# sourceMappingURL=index.d.ts.map