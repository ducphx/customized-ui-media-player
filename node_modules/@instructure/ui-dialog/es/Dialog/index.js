import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
const _excluded = ["open", "contentElement"],
      _excluded2 = ["open", "contentElement"];

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import { omitProps, getElementType } from '@instructure/ui-react-utils';
import { findDOMNode, requestAnimationFrame } from '@instructure/ui-dom-utils';
import { logError as error } from '@instructure/console';
import { FocusRegionManager } from '@instructure/ui-a11y-utils';
import { propTypes, allowedProps } from './props';

/**
---
category: components/utilities
---
@module Dialog
@tsProps
**/
class Dialog extends Component {
  constructor() {
    super(...arguments);
    this._timeouts = [];
    this._raf = [];
    this._focusRegion = null;
    this.ref = null;

    this.getRef = el => {
      const elementRef = this.props.elementRef;
      this.ref = el;

      if (typeof elementRef === 'function') {
        elementRef(el);
      }
    };
  }

  get _root() {
    return this.ref;
  }

  componentDidMount() {
    if (this.props.open) {
      this.open();
    }
  }

  componentDidUpdate(prevProps) {
    const _this$props = this.props,
          open = _this$props.open,
          contentElement = _this$props.contentElement,
          options = _objectWithoutProperties(_this$props, _excluded);

    if (open && !prevProps.open) {
      this.open();
    } else if (!open && prevProps.open) {
      this.close();
    }

    if (this._focusRegion) {
      this._focusRegion.updateElement(this.contentElement, options);
    }
  }

  componentWillUnmount() {
    if (this.props.open) {
      this.close();
    }

    this._timeouts.forEach(timeout => clearTimeout(timeout));

    this._timeouts = [];

    this._raf.forEach(request => request.cancel());

    this._raf = [];
  }

  open() {
    const _this$props2 = this.props,
          open = _this$props2.open,
          contentElement = _this$props2.contentElement,
          options = _objectWithoutProperties(_this$props2, _excluded2);

    this._raf.push(requestAnimationFrame(() => {
      // It needs to wait a heartbeat until the content is fully loaded
      // inside the dialog. If it contains a focusable element, it will
      // get focused on open, and browsers scroll to the focused element.
      // If the css is not fully applied, the element may not be in their
      // final position, making the page jump.
      this._timeouts.push(setTimeout(() => {
        this._focusRegion = FocusRegionManager.activateRegion(this.contentElement, { ...options
        });
      }, 0));
    }));
  }

  close() {
    if (this._focusRegion) {
      FocusRegionManager.blurRegion(this.contentElement, this._focusRegion.id);
    }
  }

  focus() {
    if (!this.props.open || !this.contentElement) {
      error(false, "[Dialog] Can't focus a Dialog that isn't open.");
      return;
    }

    if (this._focusRegion) {
      FocusRegionManager.focusRegion(this.contentElement, this._focusRegion.id);
    }
  }

  blur() {
    if (!this.props.open || !this.contentElement) {
      error(false, "[Dialog] Can't blur a Dialog that isn't open.");
      return;
    }

    this.close();
  }

  get contentElement() {
    let contentElement = findDOMNode(this.props.contentElement);

    if (!contentElement) {
      contentElement = findDOMNode(this.ref);
    }

    return contentElement;
  }

  get focused() {
    return this.contentElement && this._focusRegion && FocusRegionManager.isFocused(this.contentElement, this._focusRegion.id);
  }

  render() {
    const ElementType = getElementType(Dialog, this.props); // In case the HTML role attribute is explicitly passed, use props.role

    const role = this.props.role || (this.props.label ? 'dialog' : void 0);
    return this.props.open ? /*#__PURE__*/React.createElement(ElementType // @ts-expect-error TODO: `ref` prop causes: "Expression produces a union type that is too complex to represent.ts(2590)"
    , Object.assign({}, omitProps(this.props, Dialog.allowedProps), {
      role: role,
      "aria-label": this.props.label,
      className: this.props.className // eslint-disable-line react/prop-types
      ,
      ref: this.getRef
    }), this.props.children) : null;
  }

}

Dialog.displayName = "Dialog";
Dialog.componentId = 'Dialog';
Dialog.propTypes = propTypes;
Dialog.allowedProps = allowedProps;
Dialog.defaultProps = {
  open: false,
  shouldFocusOnOpen: true,
  shouldContainFocus: false,
  shouldReturnFocus: false,
  shouldCloseOnDocumentClick: true,
  shouldCloseOnEscape: true
};
export default Dialog;
export { Dialog };