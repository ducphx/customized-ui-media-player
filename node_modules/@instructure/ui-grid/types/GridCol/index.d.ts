/** @jsx jsx */
import { Component } from 'react';
import { jsx } from '@instructure/emotion';
import type { GridColProps } from './props';
/**
---
parent: Grid
id: Grid.Col
---
@tsProps
**/
declare class GridCol extends Component<GridColProps> {
    static readonly componentId = "Grid.Col";
    static propTypes: import("@instructure/shared-types/types/UtilityTypes").PropValidators<keyof {
        children?: import("react").ReactNode;
        colSpacing?: "small" | "medium" | "large" | "none" | undefined;
        rowSpacing?: "small" | "medium" | "large" | "none" | undefined;
        textAlign?: "start" | "end" | "center" | "inherit" | undefined;
        hAlign?: "start" | "end" | "center" | "space-around" | "space-between" | undefined;
        vAlign?: "top" | "middle" | "bottom" | undefined;
        startAt?: import("..").GridBreakpoints | undefined;
        visualDebug?: boolean | undefined;
        width?: (number | "auto") | {
            small?: (number | "auto") | undefined;
            medium?: (number | "auto") | undefined;
            large?: (number | "auto") | undefined;
            xLarge?: (number | "auto") | undefined;
        } | undefined;
        offset?: (number | "auto") | {
            small?: (number | "auto") | undefined;
            medium?: (number | "auto") | undefined;
            large?: (number | "auto") | undefined;
            xLarge?: (number | "auto") | undefined;
        } | undefined;
        isLastRow?: boolean | undefined;
        isLastCol?: boolean | undefined;
        elementRef?: ((element: HTMLSpanElement | null) => void) | undefined;
    }>;
    static allowedProps: readonly (keyof {
        children?: import("react").ReactNode;
        colSpacing?: "small" | "medium" | "large" | "none" | undefined;
        rowSpacing?: "small" | "medium" | "large" | "none" | undefined;
        textAlign?: "start" | "end" | "center" | "inherit" | undefined;
        hAlign?: "start" | "end" | "center" | "space-around" | "space-between" | undefined;
        vAlign?: "top" | "middle" | "bottom" | undefined;
        startAt?: import("..").GridBreakpoints | undefined;
        visualDebug?: boolean | undefined;
        width?: (number | "auto") | {
            small?: (number | "auto") | undefined;
            medium?: (number | "auto") | undefined;
            large?: (number | "auto") | undefined;
            xLarge?: (number | "auto") | undefined;
        } | undefined;
        offset?: (number | "auto") | {
            small?: (number | "auto") | undefined;
            medium?: (number | "auto") | undefined;
            large?: (number | "auto") | undefined;
            xLarge?: (number | "auto") | undefined;
        } | undefined;
        isLastRow?: boolean | undefined;
        isLastCol?: boolean | undefined;
        elementRef?: ((element: HTMLSpanElement | null) => void) | undefined;
    })[];
    static defaultProps: {
        textAlign: string;
        children: null;
        isLastCol: boolean;
        isLastRow: boolean;
    };
    ref: HTMLSpanElement | null;
    handleRef: (el: HTMLSpanElement | null) => void;
    widthCheck(): void;
    componentDidMount(): void;
    componentDidUpdate(): void;
    render(): jsx.JSX.Element;
}
export default GridCol;
export { GridCol };
//# sourceMappingURL=index.d.ts.map