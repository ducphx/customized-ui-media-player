/// <reference types="react" />
import type { WithStyleProps, ComponentStyle } from '@instructure/emotion';
import type { PropValidators, GridTheme, OtherHTMLAttributes } from '@instructure/shared-types';
import type { GridBreakpoints } from '../GridTypes';
declare type ColWidths = 'auto' | number;
declare type GridColOwnProps = {
    children?: React.ReactNode;
    colSpacing?: 'none' | 'small' | 'medium' | 'large';
    rowSpacing?: 'none' | 'small' | 'medium' | 'large';
    textAlign?: 'start' | 'end' | 'center' | 'inherit';
    hAlign?: 'start' | 'center' | 'end' | 'space-around' | 'space-between';
    vAlign?: 'top' | 'middle' | 'bottom';
    startAt?: GridBreakpoints;
    visualDebug?: boolean;
    width?: ColWidths | {
        small?: ColWidths;
        medium?: ColWidths;
        large?: ColWidths;
        xLarge?: ColWidths;
    };
    offset?: ColWidths | {
        small?: ColWidths;
        medium?: ColWidths;
        large?: ColWidths;
        xLarge?: ColWidths;
    };
    isLastRow?: boolean;
    isLastCol?: boolean;
    /**
     * provides a reference to the underlying html root element
     */
    elementRef?: (element: HTMLSpanElement | null) => void;
};
declare type PropKeys = keyof GridColOwnProps;
declare type AllowedPropKeys = Readonly<Array<PropKeys>>;
declare type GridColProps = GridColOwnProps & WithStyleProps<GridTheme, GridColStyle> & OtherHTMLAttributes<GridColOwnProps>;
declare type GridColStyle = ComponentStyle<'gridCol'>;
declare const propTypes: PropValidators<PropKeys>;
declare const allowedProps: AllowedPropKeys;
export type { GridColProps, GridColStyle };
export { propTypes, allowedProps };
//# sourceMappingURL=props.d.ts.map