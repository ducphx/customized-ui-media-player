/** @jsx jsx */
import React, { Component } from 'react';
import { jsx } from '@instructure/emotion';
import type { GridRowProps } from './props';
/**
---
parent: Grid
id: Grid.Row
---
@tsProps
**/
declare class GridRow extends Component<GridRowProps> {
    static readonly componentId = "Grid.Row";
    static propTypes: import("@instructure/shared-types/types/UtilityTypes").PropValidators<keyof {
        children?: React.ReactNode;
        rowSpacing?: "small" | "medium" | "large" | "none" | undefined;
        colSpacing?: "small" | "medium" | "large" | "none" | undefined;
        hAlign?: "start" | "end" | "center" | "space-around" | "space-between" | undefined;
        vAlign?: "top" | "middle" | "bottom" | undefined;
        startAt?: import("..").GridBreakpoints | undefined;
        visualDebug?: boolean | undefined;
        isLastRow?: boolean | undefined;
    }>;
    static allowedProps: readonly (keyof {
        children?: React.ReactNode;
        rowSpacing?: "small" | "medium" | "large" | "none" | undefined;
        colSpacing?: "small" | "medium" | "large" | "none" | undefined;
        hAlign?: "start" | "end" | "center" | "space-around" | "space-between" | undefined;
        vAlign?: "top" | "middle" | "bottom" | undefined;
        startAt?: import("..").GridBreakpoints | undefined;
        visualDebug?: boolean | undefined;
        isLastRow?: boolean | undefined;
    })[];
    static defaultProps: {
        children: null;
        isLastRow: boolean;
    };
    ref: Element | null;
    handleRef: (el: Element | null) => void;
    componentDidMount(): void;
    componentDidUpdate(): void;
    renderChildren(): {}[] | null | undefined;
    render(): jsx.JSX.Element;
}
export default GridRow;
export { GridRow };
//# sourceMappingURL=index.d.ts.map