"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.GridCol = void 0;

var _react = require("react");

var _omitProps = require("@instructure/ui-react-utils/lib/omitProps.js");

var _emotion = require("@instructure/emotion");

var _console = require("@instructure/console");

var _styles = _interopRequireDefault(require("./styles"));

var _theme = _interopRequireDefault(require("./theme"));

var _props = require("./props");

var _dec, _class, _class2;

/**
---
parent: Grid
id: Grid.Col
---
@tsProps
**/
let GridCol = (_dec = (0, _emotion.withStyle)(_styles.default, _theme.default), _dec(_class = (_class2 = class GridCol extends _react.Component {
  constructor() {
    super(...arguments);
    this.ref = null;

    this.handleRef = el => {
      const elementRef = this.props.elementRef;
      this.ref = el;

      if (typeof elementRef === 'function') {
        elementRef(el);
      }
    };
  }

  widthCheck() {
    const width = this.props.width;
    let shouldWarn = false;

    if (width) {
      if (typeof width === 'number' && width <= 0) {
        shouldWarn = true;
      }

      if (typeof width === 'object') {
        Object.keys(width).forEach(breakpoint => {
          //@ts-expect-error Ts doesn't understand Object.keys properly
          if (typeof width[breakpoint] === 'number' && width[breakpoint] <= 0) {
            shouldWarn = true;
          }
        });
      }
    }

    if (shouldWarn) {
      (0, _console.logWarn)(false, 'Col width must be positive!');
    }
  }

  componentDidMount() {
    var _this$props$makeStyle, _this$props;

    (_this$props$makeStyle = (_this$props = this.props).makeStyles) === null || _this$props$makeStyle === void 0 ? void 0 : _this$props$makeStyle.call(_this$props);
    this.widthCheck();
  }

  componentDidUpdate() {
    var _this$props$makeStyle2, _this$props2;

    (_this$props$makeStyle2 = (_this$props2 = this.props).makeStyles) === null || _this$props$makeStyle2 === void 0 ? void 0 : _this$props$makeStyle2.call(_this$props2);
    this.widthCheck();
  }

  render() {
    const _this$props3 = this.props,
          children = _this$props3.children,
          styles = _this$props3.styles;
    const props = (0, _omitProps.omitProps)(this.props, GridCol.allowedProps);
    return (0, _emotion.jsx)("span", Object.assign({}, props, {
      ref: this.handleRef,
      css: styles === null || styles === void 0 ? void 0 : styles.gridCol
    }), children);
  }

}, _class2.displayName = "GridCol", _class2.componentId = 'Grid.Col', _class2.propTypes = _props.propTypes, _class2.allowedProps = _props.allowedProps, _class2.defaultProps = {
  textAlign: 'inherit',
  children: null,
  isLastCol: false,
  isLastRow: false
}, _class2)) || _class);
exports.GridCol = GridCol;
var _default = GridCol;
exports.default = _default;