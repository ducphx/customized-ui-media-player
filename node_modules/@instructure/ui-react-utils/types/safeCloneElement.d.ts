import { Attributes, FunctionComponentElement, ComponentElement, ReactElement, ReactNode, DOMElement } from 'react';
declare type GetProps<E extends ReactElement = ReactElement> = E extends FunctionComponentElement<infer P> | ComponentElement<infer P, any> | DOMElement<infer P, any> ? P & {
    ref?: any;
} : Record<string, any> & {
    ref?: any;
};
/**
 * ---
 * category: utilities/react
 * ---
 * Clones a React element without overwriting refs.
 * @param element The element to clone
 * @param props Props of the element
 * @param children
 */
declare function safeCloneElement<E extends ReactElement = ReactElement, P extends GetProps<E> = GetProps<E>>(element: {
    ref?: any;
} & E, props: {
    style?: any;
} & Attributes & P, ...children: ReactNode[]): E;
export default safeCloneElement;
export { safeCloneElement };
//# sourceMappingURL=safeCloneElement.d.ts.map