"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.experimental = exports.default = void 0;

var _decorator = require("@instructure/ui-decorator/lib/decorator.js");

var _console = require("@instructure/console");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
const experimental = process.env.NODE_ENV == 'production' ? () => ReactComponent => ReactComponent : (0, _decorator.decorator)((ComposedComponent, experimentalProps, message) => {
  return class ExperimentalComponent extends ComposedComponent {
    componentDidMount() {
      if (!this.props.__dangerouslyIgnoreExperimentalWarnings) {
        if (experimentalProps) {
          warnExperimentalProps(ComposedComponent.name, this.props, experimentalProps, message);
        } else {
          warnExperimentalComponent(ComposedComponent.name, message);
        }
      }

      if (super.componentDidMount) {
        super.componentDidMount();
      }
    }

    componentDidUpdate(prevProps, prevState, prevContext) {
      if (!this.props.__dangerouslyIgnoreExperimentalWarnings) {
        if (experimentalProps) {
          warnExperimentalProps(ComposedComponent.name, this.props, experimentalProps, message);
        } else {
          warnExperimentalComponent(ComposedComponent.name, message);
        }
      }

      if (super.componentDidUpdate) {
        super.componentDidUpdate(prevProps, prevState, prevContext);
      }
    }

  };
});
exports.experimental = experimental;

function warnExperimentalProps(name, props, experimentalProps) {
  let message = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : '';
  experimentalProps.forEach(experimentalProp => {
    (0, _console.logWarn)(typeof props[experimentalProp] === 'undefined', `[${name}] The \`${experimentalProp}\` prop is experimental and its API could change significantly in a future release. ${message}`);
  });
}

function warnExperimentalComponent(name) {
  let message = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : '';
  (0, _console.logWarn)(false, `[${name}] is experimental and its API could change significantly in a future release. ${message}`);
}

var _default = experimental;
exports.default = _default;