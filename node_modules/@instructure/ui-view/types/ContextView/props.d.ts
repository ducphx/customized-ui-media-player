import React from 'react';
import type { AsElementType, PropValidators, ContextViewTheme, OtherHTMLAttributes } from '@instructure/shared-types';
import type { PlacementPropValues } from '@instructure/ui-position';
import type { Shadow, Spacing, Stacking, WithStyleProps, ComponentStyle } from '@instructure/emotion';
declare type ContextViewOwnProps = {
    as?: AsElementType;
    elementRef?: (element: Element | null) => void;
    height?: string | number;
    width?: string | number;
    maxHeight?: string | number;
    maxWidth?: string | number;
    minHeight?: string | number;
    minWidth?: string | number;
    children?: React.ReactNode;
    textAlign?: 'start' | 'center' | 'end';
    background?: 'default' | 'inverse';
    debug?: boolean;
    margin?: Spacing;
    padding?: Spacing;
    shadow?: Shadow;
    stacking?: Stacking;
    placement?: PlacementPropValues;
};
declare type PropKeys = keyof ContextViewOwnProps;
declare type AllowedPropKeys = Readonly<Array<PropKeys>>;
declare type ContextViewProps = ContextViewOwnProps & WithStyleProps<ContextViewTheme, ContextViewStyle> & OtherHTMLAttributes<ContextViewOwnProps>;
declare type ContextViewStyle = ComponentStyle<'contextView' | 'contextView__content' | 'contextView__arrow'> & {
    arrowSize: string | 0;
    arrowBorderWidth: string | 0;
};
declare const propTypes: PropValidators<PropKeys>;
declare const allowedProps: AllowedPropKeys;
export type { ContextViewProps, ContextViewStyle };
export { propTypes, allowedProps };
//# sourceMappingURL=props.d.ts.map