/** @jsx jsx */
import { Component } from 'react';
import { jsx } from '@instructure/emotion';
import type { ContextViewProps } from './props';
/**
---
category: components
---
@tsProps
**/
declare class ContextView extends Component<ContextViewProps> {
    static readonly componentId = "ContextView";
    static allowedProps: readonly (keyof {
        as?: import("@instructure/shared-types/types/CommonProps").AsElementType | undefined;
        elementRef?: ((element: Element | null) => void) | undefined;
        height?: string | number | undefined;
        width?: string | number | undefined;
        maxHeight?: string | number | undefined;
        maxWidth?: string | number | undefined;
        minHeight?: string | number | undefined;
        minWidth?: string | number | undefined;
        children?: import("react").ReactNode;
        textAlign?: "start" | "center" | "end" | undefined;
        background?: "inverse" | "default" | undefined;
        debug?: boolean | undefined;
        margin?: import("@instructure/emotion/types/styleUtils/ThemeablePropValues").Spacing | undefined;
        padding?: import("@instructure/emotion/types/styleUtils/ThemeablePropValues").Spacing | undefined;
        shadow?: import("@instructure/emotion/types/styleUtils/ThemeablePropValues").Shadow | undefined;
        stacking?: import("@instructure/emotion/types/styleUtils/ThemeablePropValues").Stacking | undefined;
        placement?: import("@instructure/ui-position").PlacementPropValues | undefined;
    })[];
    static propTypes: import("@instructure/shared-types/types/UtilityTypes").PropValidators<keyof {
        as?: import("@instructure/shared-types/types/CommonProps").AsElementType | undefined;
        elementRef?: ((element: Element | null) => void) | undefined;
        height?: string | number | undefined;
        width?: string | number | undefined;
        maxHeight?: string | number | undefined;
        maxWidth?: string | number | undefined;
        minHeight?: string | number | undefined;
        minWidth?: string | number | undefined;
        children?: import("react").ReactNode;
        textAlign?: "start" | "center" | "end" | undefined;
        background?: "inverse" | "default" | undefined;
        debug?: boolean | undefined;
        margin?: import("@instructure/emotion/types/styleUtils/ThemeablePropValues").Spacing | undefined;
        padding?: import("@instructure/emotion/types/styleUtils/ThemeablePropValues").Spacing | undefined;
        shadow?: import("@instructure/emotion/types/styleUtils/ThemeablePropValues").Shadow | undefined;
        stacking?: import("@instructure/emotion/types/styleUtils/ThemeablePropValues").Stacking | undefined;
        placement?: import("@instructure/ui-position").PlacementPropValues | undefined;
    }>;
    static defaultProps: {
        as: string;
        elementRef: () => void;
        debug: boolean;
        width: string;
        height: string;
        children: null;
        textAlign: string;
        background: string;
        shadow: string;
        placement: string;
    };
    componentDidMount(): void;
    componentDidUpdate(): void;
    ref: Element | null;
    handleRef: (el: Element | null) => void;
    render(): jsx.JSX.Element;
}
export default ContextView;
export { ContextView };
//# sourceMappingURL=index.d.ts.map