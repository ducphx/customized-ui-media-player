"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.propTypes = exports.allowedProps = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _cursor = require("@instructure/ui-prop-types/lib/cursor.js");

var _textDirectionContextConsumer = require("@instructure/ui-i18n/lib/textDirectionContextConsumer.js");

var _emotion = require("@instructure/emotion");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
const propTypes = {
  as: _propTypes.default.elementType,
  elementRef: _propTypes.default.func,
  display: _propTypes.default.oneOf(['auto', 'inline', 'block', 'inline-block', 'flex', 'inline-flex']),
  overflowX: _propTypes.default.oneOf(['auto', 'hidden', 'visible']),
  overflowY: _propTypes.default.oneOf(['auto', 'hidden', 'visible']),
  margin: _emotion.ThemeablePropTypes.spacing,
  padding: _emotion.ThemeablePropTypes.spacing,
  height: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  width: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  maxHeight: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  maxWidth: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  minHeight: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  minWidth: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  children: _propTypes.default.node,
  textAlign: _propTypes.default.oneOf(['start', 'center', 'end']),
  borderWidth: _emotion.ThemeablePropTypes.borderWidth,
  borderRadius: _emotion.ThemeablePropTypes.borderRadius,
  borderColor: _propTypes.default.oneOf(['transparent', 'primary', 'secondary', 'brand', 'info', 'success', 'warning', 'alert', 'danger']),
  background: _propTypes.default.oneOf(['transparent', 'primary', 'secondary', 'primary-inverse', 'brand', 'info', 'alert', 'success', 'danger', 'warning']),
  shadow: _emotion.ThemeablePropTypes.shadow,
  stacking: _emotion.ThemeablePropTypes.stacking,
  cursor: _cursor.cursor,
  position: _propTypes.default.oneOf(['static', 'absolute', 'relative', 'sticky', 'fixed']),
  insetInlineStart: _propTypes.default.string,
  insetInlineEnd: _propTypes.default.string,
  insetBlockStart: _propTypes.default.string,
  insetBlockEnd: _propTypes.default.string,
  withFocusOutline: _propTypes.default.bool,
  focusPosition: _propTypes.default.oneOf(['offset', 'inset']),
  focusColor: _propTypes.default.oneOf(['info', 'inverse', 'success', 'danger']),
  shouldAnimateFocus: _propTypes.default.bool,
  withVisualDebug: _propTypes.default.bool,
  dir: _propTypes.default.oneOf(Object.values(_textDirectionContextConsumer.textDirectionContextConsumer.DIRECTION))
}; // This variable will be attached as static property on the `View` component
// so we don't rely on the `PropTypes` validators for our internal logic.
// This means on prod builds the consuming applications can safely delete propTypes.

exports.propTypes = propTypes;
const allowedProps = ['as', 'background', 'borderColor', 'borderRadius', 'borderWidth', 'children', 'cursor', 'dir', 'display', 'elementRef', 'focusColor', 'focusPosition', 'height', 'insetBlockEnd', 'insetBlockStart', 'insetInlineEnd', 'insetInlineStart', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'overflowX', 'overflowY', 'padding', 'position', 'shadow', 'shouldAnimateFocus', 'stacking', 'textAlign', 'width', 'withFocusOutline', 'withVisualDebug'];
exports.allowedProps = allowedProps;