"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.propTypes = exports.allowedProps = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _emotion = require("@instructure/emotion");

var _PositionPropTypes = require("@instructure/ui-position/lib/PositionPropTypes.js");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
const propTypes = {
  /**
   * The element to render as the component root
   */
  as: _propTypes.default.elementType,

  /**
   * provides a reference to the underlying html root element
   */
  elementRef: _propTypes.default.func,

  /**
   * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
   * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
   * familiar CSS-like shorthand. For example: `margin="small auto large"`.
   */
  margin: _emotion.ThemeablePropTypes.spacing,

  /**
   * Valid values are `0`, `none`, `xxx-small`, `xx-small`, `x-small`,
   * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
   * familiar CSS-like shorthand. For example: `padding="small x-large large"`.
   */
  padding: _emotion.ThemeablePropTypes.spacing,
  height: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  width: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  maxHeight: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  maxWidth: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  minHeight: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  minWidth: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /**
   * The children to render inside the `<ContextView />`
   */
  children: _propTypes.default.node,

  /**
   * Designates the text alignment within the `<ContextView />`
   */
  textAlign: _propTypes.default.oneOf(['start', 'center', 'end']),

  /**
   * Controls the shadow depth for the `<ContextView />`
   */
  shadow: _emotion.ThemeablePropTypes.shadow,

  /**
   * Controls the z-index depth for the `<ContextView />`
   */
  stacking: _emotion.ThemeablePropTypes.stacking,

  /**
   * Designates the background style of the `<ContextView />`
   */
  background: _propTypes.default.oneOf(['default', 'inverse']),

  /**
   * Specifies how the arrow for `<ContextView />` will be rendered.
   * Ex. `placement="top"` will render with an arrow pointing down.
   */
  placement: _PositionPropTypes.PositionPropTypes.placement,

  /**
   * Activate an outline around the component to make building your
   * layout easier
   */
  debug: _propTypes.default.bool
};
exports.propTypes = propTypes;
const allowedProps = ['as', 'elementRef', 'margin', 'padding', 'height', 'width', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'children', 'textAlign', 'shadow', 'stacking', 'background', 'placement', 'debug'];
exports.allowedProps = allowedProps;