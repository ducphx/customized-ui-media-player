"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ContextView = void 0;

var _react = require("react");

var _emotion = require("@instructure/emotion");

var _omitProps = require("@instructure/ui-react-utils/lib/omitProps.js");

var _View = require("../View");

var _styles = _interopRequireDefault(require("./styles"));

var _theme = _interopRequireDefault(require("./theme"));

var _props = require("./props");

var _dec, _class, _class2;

/**
---
category: components
---
@tsProps
**/
let ContextView = (_dec = (0, _emotion.withStyle)(_styles.default, _theme.default), _dec(_class = (_class2 = class ContextView extends _react.Component {
  constructor() {
    super(...arguments);
    this.ref = null;

    this.handleRef = el => {
      const elementRef = this.props.elementRef;
      this.ref = el;

      if (typeof elementRef === 'function') {
        elementRef(el);
      }
    };
  }

  componentDidMount() {
    var _this$props$makeStyle, _this$props;

    (_this$props$makeStyle = (_this$props = this.props).makeStyles) === null || _this$props$makeStyle === void 0 ? void 0 : _this$props$makeStyle.call(_this$props);
  }

  componentDidUpdate() {
    var _this$props$makeStyle2, _this$props2;

    (_this$props$makeStyle2 = (_this$props2 = this.props).makeStyles) === null || _this$props$makeStyle2 === void 0 ? void 0 : _this$props$makeStyle2.call(_this$props2);
  }

  render() {
    const _this$props3 = this.props,
          as = _this$props3.as,
          background = _this$props3.background,
          children = _this$props3.children,
          debug = _this$props3.debug,
          height = _this$props3.height,
          width = _this$props3.width,
          maxHeight = _this$props3.maxHeight,
          maxWidth = _this$props3.maxWidth,
          minHeight = _this$props3.minHeight,
          minWidth = _this$props3.minWidth,
          margin = _this$props3.margin,
          padding = _this$props3.padding,
          shadow = _this$props3.shadow,
          stacking = _this$props3.stacking,
          style = _this$props3.style,
          textAlign = _this$props3.textAlign,
          styles = _this$props3.styles;
    return (0, _emotion.jsx)(_View.View, Object.assign({}, (0, _omitProps.omitProps)(this.props, ContextView.allowedProps), {
      css: styles === null || styles === void 0 ? void 0 : styles.contextView,
      style: style,
      borderWidth: "none",
      display: "inline-block",
      as: as,
      withVisualDebug: debug,
      elementRef: this.handleRef,
      margin: margin,
      stacking: stacking
    }), (0, _emotion.jsx)(_View.View, {
      css: styles === null || styles === void 0 ? void 0 : styles.contextView__content,
      display: "block",
      borderRadius: "medium",
      borderWidth: "small",
      borderColor: background === 'default' ? 'primary' : 'transparent',
      background: background === 'default' ? 'primary' : 'primary-inverse',
      withVisualDebug: debug,
      height: height,
      width: width,
      maxHeight: maxHeight,
      maxWidth: maxWidth,
      minHeight: minHeight,
      minWidth: minWidth,
      padding: padding,
      shadow: shadow,
      textAlign: textAlign
    }, (0, _emotion.jsx)("span", {
      css: styles === null || styles === void 0 ? void 0 : styles.contextView__arrow
    }), children));
  }

}, _class2.displayName = "ContextView", _class2.componentId = 'ContextView', _class2.allowedProps = _props.allowedProps, _class2.propTypes = _props.propTypes, _class2.defaultProps = {
  as: 'span',
  elementRef: () => {},
  debug: false,
  width: 'auto',
  height: 'auto',
  children: null,
  textAlign: 'start',
  background: 'default',
  shadow: 'resting',
  placement: 'center end'
}, _class2)) || _class);
exports.ContextView = ContextView;
var _default = ContextView;
exports.default = _default;