/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/* Global variables (colors, typography, spacing, etc.) are defined in lib/themes */
import { makeThemeVars } from '@instructure/emotion';

/**
 * Generates the theme object for the component from the theme and provided additional information
 * @param  {Object} theme The actual theme object.
 * @return {Object} The final theme object with the overrides and component variables
 */
const generateComponentTheme = theme => {
  const colors = theme.colors,
        typography = theme.typography,
        borders = theme.borders,
        breakpoints = theme.breakpoints,
        spacing = theme.spacing,
        shadows = theme.shadows,
        stacking = theme.stacking,
        themeName = theme.key;
  const themeSpecificStyle = {
    canvas: {
      color: theme['ic-brand-font-color-dark'],
      focusColorInfo: theme['ic-brand-primary'],
      backgroundBrand: theme['ic-brand-primary'],
      backgroundInfo: theme['ic-brand-primary'],
      borderColorBrand: theme['ic-brand-primary'],
      borderColorInfo: theme['ic-brand-primary']
    }
  };
  const componentVariables = {
    fontFamily: typography === null || typography === void 0 ? void 0 : typography.fontFamily,
    color: colors === null || colors === void 0 ? void 0 : colors.textDarkest,
    colorPrimaryInverse: colors === null || colors === void 0 ? void 0 : colors.textLightest,
    borderColorPrimary: colors === null || colors === void 0 ? void 0 : colors.borderMedium,
    borderColorSecondary: colors === null || colors === void 0 ? void 0 : colors.borderDark,
    borderColorSuccess: colors === null || colors === void 0 ? void 0 : colors.borderSuccess,
    borderColorBrand: colors === null || colors === void 0 ? void 0 : colors.borderBrand,
    borderColorInfo: colors === null || colors === void 0 ? void 0 : colors.borderInfo,
    borderColorAlert: colors === null || colors === void 0 ? void 0 : colors.borderAlert,
    borderColorWarning: colors === null || colors === void 0 ? void 0 : colors.borderWarning,
    borderColorDanger: colors === null || colors === void 0 ? void 0 : colors.borderDanger,
    borderColorTransparent: 'transparent',
    debugOutlineColor: colors === null || colors === void 0 ? void 0 : colors.borderDebug,
    backgroundPrimary: colors === null || colors === void 0 ? void 0 : colors.backgroundLightest,
    backgroundSecondary: colors === null || colors === void 0 ? void 0 : colors.backgroundLight,
    backgroundPrimaryInverse: colors === null || colors === void 0 ? void 0 : colors.backgroundDarkest,
    backgroundBrand: colors === null || colors === void 0 ? void 0 : colors.backgroundBrand,
    backgroundInfo: colors === null || colors === void 0 ? void 0 : colors.backgroundInfo,
    backgroundAlert: colors === null || colors === void 0 ? void 0 : colors.backgroundAlert,
    backgroundSuccess: colors === null || colors === void 0 ? void 0 : colors.backgroundSuccess,
    backgroundDanger: colors === null || colors === void 0 ? void 0 : colors.backgroundDanger,
    backgroundWarning: colors === null || colors === void 0 ? void 0 : colors.backgroundWarning,
    arrowSize: '0.5rem',
    focusOutlineStyle: borders === null || borders === void 0 ? void 0 : borders.style,
    focusOutlineWidth: borders === null || borders === void 0 ? void 0 : borders.widthMedium,
    focusOutlineOffset: '0.3125rem',
    focusOutlineInset: '0rem',
    // do not use unitless zero (for CSS calc())
    focusColorInfo: colors === null || colors === void 0 ? void 0 : colors.borderInfo,
    focusColorDanger: colors === null || colors === void 0 ? void 0 : colors.borderDanger,
    focusColorSuccess: colors === null || colors === void 0 ? void 0 : colors.borderSuccess,
    focusColorInverse: colors === null || colors === void 0 ? void 0 : colors.borderLightest,
    xSmallMaxWidth: breakpoints === null || breakpoints === void 0 ? void 0 : breakpoints.xSmall,
    smallMaxWidth: breakpoints === null || breakpoints === void 0 ? void 0 : breakpoints.small,
    mediumMaxWidth: breakpoints === null || breakpoints === void 0 ? void 0 : breakpoints.medium,
    largeMaxWidth: breakpoints === null || breakpoints === void 0 ? void 0 : breakpoints.large,
    ...makeThemeVars('margin', spacing),
    ...makeThemeVars('padding', spacing),
    ...makeThemeVars('shadow', shadows),
    ...makeThemeVars('stacking', stacking),
    ...makeThemeVars('border', borders)
  };
  return { ...componentVariables,
    ...themeSpecificStyle[themeName]
  };
};

export default generateComponentTheme;