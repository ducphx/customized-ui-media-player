var _dec, _class, _class2;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/** @jsx jsx */
import { Component } from 'react';
import { jsx, withStyle } from '@instructure/emotion';
import { omitProps } from '@instructure/ui-react-utils';
import { View } from '../View';
import generateStyle from './styles';
import generateComponentTheme from './theme';
import { propTypes, allowedProps } from './props';

/**
---
category: components
---
@tsProps
**/
let ContextView = (_dec = withStyle(generateStyle, generateComponentTheme), _dec(_class = (_class2 = class ContextView extends Component {
  constructor() {
    super(...arguments);
    this.ref = null;

    this.handleRef = el => {
      const elementRef = this.props.elementRef;
      this.ref = el;

      if (typeof elementRef === 'function') {
        elementRef(el);
      }
    };
  }

  componentDidMount() {
    var _this$props$makeStyle, _this$props;

    (_this$props$makeStyle = (_this$props = this.props).makeStyles) === null || _this$props$makeStyle === void 0 ? void 0 : _this$props$makeStyle.call(_this$props);
  }

  componentDidUpdate() {
    var _this$props$makeStyle2, _this$props2;

    (_this$props$makeStyle2 = (_this$props2 = this.props).makeStyles) === null || _this$props$makeStyle2 === void 0 ? void 0 : _this$props$makeStyle2.call(_this$props2);
  }

  render() {
    const _this$props3 = this.props,
          as = _this$props3.as,
          background = _this$props3.background,
          children = _this$props3.children,
          debug = _this$props3.debug,
          height = _this$props3.height,
          width = _this$props3.width,
          maxHeight = _this$props3.maxHeight,
          maxWidth = _this$props3.maxWidth,
          minHeight = _this$props3.minHeight,
          minWidth = _this$props3.minWidth,
          margin = _this$props3.margin,
          padding = _this$props3.padding,
          shadow = _this$props3.shadow,
          stacking = _this$props3.stacking,
          style = _this$props3.style,
          textAlign = _this$props3.textAlign,
          styles = _this$props3.styles;
    return jsx(View, Object.assign({}, omitProps(this.props, ContextView.allowedProps), {
      css: styles === null || styles === void 0 ? void 0 : styles.contextView,
      style: style,
      borderWidth: "none",
      display: "inline-block",
      as: as,
      withVisualDebug: debug,
      elementRef: this.handleRef,
      margin: margin,
      stacking: stacking
    }), jsx(View, {
      css: styles === null || styles === void 0 ? void 0 : styles.contextView__content,
      display: "block",
      borderRadius: "medium",
      borderWidth: "small",
      borderColor: background === 'default' ? 'primary' : 'transparent',
      background: background === 'default' ? 'primary' : 'primary-inverse',
      withVisualDebug: debug,
      height: height,
      width: width,
      maxHeight: maxHeight,
      maxWidth: maxWidth,
      minHeight: minHeight,
      minWidth: minWidth,
      padding: padding,
      shadow: shadow,
      textAlign: textAlign
    }, jsx("span", {
      css: styles === null || styles === void 0 ? void 0 : styles.contextView__arrow
    }), children));
  }

}, _class2.displayName = "ContextView", _class2.componentId = 'ContextView', _class2.allowedProps = allowedProps, _class2.propTypes = propTypes, _class2.defaultProps = {
  as: 'span',
  elementRef: () => {},
  debug: false,
  width: 'auto',
  height: 'auto',
  children: null,
  textAlign: 'start',
  background: 'default',
  shadow: 'resting',
  placement: 'center end'
}, _class2)) || _class);
export default ContextView;
export { ContextView };