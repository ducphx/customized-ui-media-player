/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import { mirrorPlacement } from '@instructure/ui-position';
const endPlacements = ['end center', 'end top', 'end bottom', 'center end', 'end'];
const startPlacements = ['start center', 'start top', 'start bottom', 'center start', 'start'];
const bottomPlacements = ['bottom', 'bottom end', 'bottom start', 'bottom center'];
const topPlacements = ['top', 'top start', 'top end', 'top center'];

const getPlacementStyle = (placement, theme) => {
  if (endPlacements.includes(placement)) {
    return {
      paddingInlineStart: theme === null || theme === void 0 ? void 0 : theme.arrowSize,
      paddingInlineEnd: '0'
    };
  }

  if (startPlacements.includes(placement)) {
    return {
      paddingInlineEnd: theme === null || theme === void 0 ? void 0 : theme.arrowSize,
      paddingInlineStart: '0'
    };
  }

  if (bottomPlacements.includes(placement)) {
    return {
      paddingTop: theme === null || theme === void 0 ? void 0 : theme.arrowSize
    };
  }

  if (topPlacements.includes(placement)) {
    return {
      paddingBottom: theme === null || theme === void 0 ? void 0 : theme.arrowSize
    };
  }

  return {
    position: 'absolute',
    left: '-999em'
  };
};

const getArrowCorrections = (placement, theme) => {
  const center = ['top', 'bottom', 'top center', 'bottom center'];
  const start = ['top start', 'bottom start'];
  const end = ['top end', 'bottom end'];
  const top = ['start top', 'end top'];
  const bottom = ['start bottom', 'end bottom'];

  if (center.includes(placement)) {
    return {
      insetInlineStart: '50%'
    };
  }

  if (start.includes(placement)) {
    return {
      insetInlineStart: `calc((${theme === null || theme === void 0 ? void 0 : theme.arrowSize} + ${theme === null || theme === void 0 ? void 0 : theme.arrowBorderWidth}) * 2)`,
      insetInlineEnd: 'auto'
    };
  }

  if (end.includes(placement)) {
    return {
      insetInlineStart: `calc(100% - (${theme === null || theme === void 0 ? void 0 : theme.arrowSize} + ${theme === null || theme === void 0 ? void 0 : theme.arrowBorderWidth}) * 2)`,
      insetInlineEnd: 'auto'
    };
  }

  if (top.includes(placement)) {
    return {
      top: `calc((${theme === null || theme === void 0 ? void 0 : theme.arrowSize} + ${theme === null || theme === void 0 ? void 0 : theme.arrowBorderWidth}) * 2)`
    };
  }

  if (bottom.includes(placement)) {
    return {
      top: `calc(100% - (${theme === null || theme === void 0 ? void 0 : theme.arrowSize} + ${theme === null || theme === void 0 ? void 0 : theme.arrowBorderWidth}) * 2)`
    };
  }

  return {};
};

const getArrowPlacementVariant = (placement, background, theme) => {
  const transformedPlacement = mirrorPlacement(placement, ' ');
  const isInversed = background === 'inverse';

  if (endPlacements.includes(transformedPlacement)) {
    return {
      main: {
        top: '50%',
        insetInlineStart: '100%',
        insetInlineEnd: 'auto',
        marginTop: `calc(-1 * (${theme === null || theme === void 0 ? void 0 : theme.arrowSize} + ${theme === null || theme === void 0 ? void 0 : theme.arrowBorderWidth}))`,
        borderInlineEndWidth: '0',
        borderInlineEndColor: 'transparent',
        borderInlineStartColor: isInversed ? theme === null || theme === void 0 ? void 0 : theme.arrowBorderColorInverse : theme === null || theme === void 0 ? void 0 : theme.arrowBorderColor,
        borderTopColor: 'transparent',
        borderBottomColor: 'transparent',
        borderInlineStartWidth: theme === null || theme === void 0 ? void 0 : theme.arrowSize
      },
      __after: {
        insetInlineEnd: theme === null || theme === void 0 ? void 0 : theme.arrowBorderWidth,
        insetInlineStart: 'auto',
        marginTop: `calc(-1 * ${theme === null || theme === void 0 ? void 0 : theme.arrowSize})`,
        borderInlineEndWidth: '0',
        borderInlineEndColor: 'transparent',
        borderTopColor: 'transparent',
        borderBottomColor: 'transparent',
        borderInlineStartWidth: theme === null || theme === void 0 ? void 0 : theme.arrowSize,
        borderInlineStartColor: isInversed ? theme === null || theme === void 0 ? void 0 : theme.arrowBackgroundColorInverse : theme === null || theme === void 0 ? void 0 : theme.arrowBackgroundColor
      }
    };
  }

  if (startPlacements.includes(transformedPlacement)) {
    return {
      main: {
        top: '50%',
        insetInlineEnd: '100%',
        insetInlineStart: 'auto',
        marginTop: `calc(-1 * (${theme === null || theme === void 0 ? void 0 : theme.arrowSize} + ${theme === null || theme === void 0 ? void 0 : theme.arrowBorderWidth}))`,
        borderInlineStartWidth: '0',
        borderInlineStartColor: 'transparent',
        borderInlineEndColor: isInversed ? theme === null || theme === void 0 ? void 0 : theme.arrowBorderColorInverse : theme === null || theme === void 0 ? void 0 : theme.arrowBorderColor,
        borderTopColor: 'transparent',
        borderBottomColor: 'transparent',
        borderInlineEndWidth: theme === null || theme === void 0 ? void 0 : theme.arrowSize
      },
      __after: {
        insetInlineStart: theme === null || theme === void 0 ? void 0 : theme.arrowBorderWidth,
        insetInlineEnd: 'auto',
        marginTop: `calc(-1 * ${theme === null || theme === void 0 ? void 0 : theme.arrowSize})`,
        borderInlineStartWidth: '0',
        borderInlineStartColor: 'transparent',
        borderTopColor: 'transparent',
        borderBottomColor: 'transparent',
        borderInlineEndWidth: theme === null || theme === void 0 ? void 0 : theme.arrowSize,
        borderInlineEndColor: isInversed ? theme === null || theme === void 0 ? void 0 : theme.arrowBackgroundColorInverse : theme === null || theme === void 0 ? void 0 : theme.arrowBackgroundColor
      }
    };
  }

  if (bottomPlacements.includes(transformedPlacement)) {
    return {
      main: {
        top: '100%',
        marginInlineStart: `calc(-1 * (${theme === null || theme === void 0 ? void 0 : theme.arrowSize} + ${theme === null || theme === void 0 ? void 0 : theme.arrowBorderWidth}))`,
        marginInlineEnd: '0',
        borderBottomWidth: '0',
        borderBottomColor: 'transparent',
        borderInlineStartColor: 'transparent',
        borderInlineEndColor: 'transparent'
      },
      __after: {
        bottom: theme === null || theme === void 0 ? void 0 : theme.arrowBorderWidth,
        marginInlineStart: `calc(-1 * ${theme === null || theme === void 0 ? void 0 : theme.arrowSize})`,
        marginInlineEnd: '0',
        borderBottomWidth: '0',
        borderBottomColor: 'transparent',
        borderInlineStartColor: 'transparent',
        borderInlineEndColor: 'transparent',
        borderTopColor: isInversed ? theme === null || theme === void 0 ? void 0 : theme.arrowBackgroundColorInverse : theme === null || theme === void 0 ? void 0 : theme.arrowBackgroundColor
      }
    };
  }

  return {
    main: {
      bottom: '100%',
      marginInlineStart: `calc(-1 * (${theme === null || theme === void 0 ? void 0 : theme.arrowSize} + ${theme === null || theme === void 0 ? void 0 : theme.arrowBorderWidth}))`,
      marginInlineEnd: '0',
      borderTopWidth: '0',
      borderTopColor: 'transparent',
      borderInlineStartColor: 'transparent',
      borderInlineEndColor: 'transparent'
    },
    __after: {
      top: theme === null || theme === void 0 ? void 0 : theme.arrowBorderWidth,
      marginInlineStart: `calc(-1 * ${theme === null || theme === void 0 ? void 0 : theme.arrowSize})`,
      marginInlineEnd: '0',
      borderTopWidth: '0',
      borderTopColor: 'transparent',
      borderInlineStartColor: 'transparent',
      borderInlineEndColor: 'transparent',
      borderBottomColor: isInversed ? theme === null || theme === void 0 ? void 0 : theme.arrowBackgroundColorInverse : theme === null || theme === void 0 ? void 0 : theme.arrowBackgroundColor
    }
  };
};
/**
 * ---
 * private: true
 * ---
 * Generates the style object from the theme and provided additional information
 * @param  {Object} componentTheme The theme variable object.
 * @param  {Object} props the props of the component, the style is applied to
 * @param  {Object} state the state of the component, the style is applied to
 * @return {Object} The final style object, which will be used in the component
 */


const generateStyle = (componentTheme, props) => {
  const placement = props.placement,
        background = props.background;
  const arrowBaseStyles = {
    content: '""',
    height: '0',
    width: '0',
    position: 'absolute',
    display: 'block',
    boxSizing: 'border-box',
    pointerEvents: 'none',
    borderStyle: 'solid'
  };
  const arrowBackGroundVariants = {
    default: componentTheme === null || componentTheme === void 0 ? void 0 : componentTheme.arrowBorderColor,
    inverse: componentTheme === null || componentTheme === void 0 ? void 0 : componentTheme.arrowBorderColorInverse
  };
  const arrowPlacementVariant = getArrowPlacementVariant(placement, background, componentTheme);
  return {
    contextView: {
      label: 'contextView',
      boxSizing: 'border-box',
      minHeight: `calc(${componentTheme === null || componentTheme === void 0 ? void 0 : componentTheme.arrowSize} * 2)`,
      ...getPlacementStyle(placement, componentTheme)
    },
    contextView__content: {
      label: 'contextView__content',
      position: 'relative'
    },
    contextView__arrow: {
      label: 'contextView__arrow',
      ...arrowBaseStyles,
      display: 'block',
      borderWidth: `calc(${componentTheme === null || componentTheme === void 0 ? void 0 : componentTheme.arrowSize} + ${componentTheme === null || componentTheme === void 0 ? void 0 : componentTheme.arrowBorderWidth})`,
      borderColor: arrowBackGroundVariants[background],
      ...arrowPlacementVariant.main,
      ...getArrowCorrections(placement, componentTheme),
      '&::after': {
        borderWidth: componentTheme === null || componentTheme === void 0 ? void 0 : componentTheme.arrowSize,
        borderColor: arrowBackGroundVariants[background],
        ...arrowPlacementVariant.__after,
        ...arrowBaseStyles
      }
    },
    arrowSize: componentTheme.arrowSize,
    arrowBorderWidth: componentTheme.arrowBorderWidth
  };
};

export default generateStyle;