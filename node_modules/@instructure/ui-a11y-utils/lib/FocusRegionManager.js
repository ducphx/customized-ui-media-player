"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FocusRegionManager = void 0;

var _console = require("@instructure/console");

var _FocusRegion = require("./FocusRegion");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
let ENTRIES = [];

class FocusRegionManager {}

exports.FocusRegionManager = FocusRegionManager;

FocusRegionManager.focusRegion = function (element) {
  let idOrOptions = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  let entry;

  if (typeof idOrOptions === 'string') {
    entry = FocusRegionManager.getEntry(element, idOrOptions);
  } else {
    entry = FocusRegionManager.addEntry(element, idOrOptions);
  }

  if (entry && entry.region && typeof entry.region.focus === 'function') {
    entry.region.focus();
    return entry.region;
  } else {
    (0, _console.logError)(false, `[FocusRegionManager] Could not focus region with element: ${element}`);
  }

  return;
};

FocusRegionManager.activateRegion = (element, options) => {
  const _FocusRegionManager$a = FocusRegionManager.addEntry(element, options),
        region = _FocusRegionManager$a.region;

  return region;
};

FocusRegionManager.getActiveEntry = () => {
  return ENTRIES.find(_ref => {
    let region = _ref.region;
    return region.focused;
  });
};

FocusRegionManager.findEntry = (element, id) => {
  let index;

  if (id) {
    index = ENTRIES.findIndex(entry => entry.id === id);
  } else {
    index = ENTRIES.findIndex(entry => entry.element === element);
  }

  return index;
};

FocusRegionManager.getEntry = (element, id) => {
  return ENTRIES[FocusRegionManager.findEntry(element, id)];
};

FocusRegionManager.addEntry = function (element) {
  let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  const region = new _FocusRegion.FocusRegion(element, options);
  const activeEntry = FocusRegionManager.getActiveEntry();
  const keyboardFocusable = region.keyboardFocusable;
  ENTRIES.forEach(_ref2 => {
    let region = _ref2.region;

    if (region) {
      // If the active region is triggering a new focus region that does not have
      // keyboard focusable content, don't deactivate the active region's keyboard
      // focus region
      const keyboard = region.focused && !keyboardFocusable ? {
        keyboard: false
      } : void 0;
      region.deactivate(keyboard);
    }
  });
  region.activate();

  if (options.shouldFocusOnOpen) {
    region.focus();
  }

  const entry = {
    id: region.id,
    element,
    region,
    children: [],
    parent: activeEntry
  };
  ENTRIES.push(entry);

  if (activeEntry) {
    activeEntry.children.push(entry);
  }

  return entry;
};

FocusRegionManager.removeEntry = (element, id) => {
  const index = FocusRegionManager.findEntry(element, id);
  const entry = ENTRIES[index];

  if (index > -1) {
    ENTRIES.splice(index, 1);
  }

  return entry;
};

FocusRegionManager.isFocused = (element, id) => {
  const entry = FocusRegionManager.getActiveEntry();

  if (id) {
    return entry && entry.region && entry.id === id;
  } else {
    return entry && entry.region && entry.element === element;
  }
};

FocusRegionManager.clearEntries = () => {
  ENTRIES = [];
};

FocusRegionManager.blurRegion = (element, id) => {
  const entry = FocusRegionManager.removeEntry(element, id);

  if (entry) {
    const children = entry.children,
          region = entry.region,
          parent = entry.parent; // deactivate the region...

    region && region.deactivate(); // and any regions created from it

    if (children) {
      children.forEach(_ref3 => {
        let id = _ref3.id,
            element = _ref3.element;
        const entry = FocusRegionManager.removeEntry(element, id);
        entry && entry.region && entry.region.deactivate();
      });
    } // activate the region's parent if it exists


    parent && parent.region && parent.region.activate();
    region && region.blur(); // this should focus the parent region
  }
};

var _default = FocusRegionManager;
exports.default = _default;