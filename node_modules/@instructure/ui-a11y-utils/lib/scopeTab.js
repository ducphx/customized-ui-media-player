"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.scopeTab = scopeTab;

var _findDOMNode = require("@instructure/ui-dom-utils/lib/findDOMNode.js");

var _findTabbable = require("@instructure/ui-dom-utils/lib/findTabbable.js");

var _isActiveElement = require("@instructure/ui-dom-utils/lib/isActiveElement.js");

var _containsActiveElement = require("@instructure/ui-dom-utils/lib/containsActiveElement.js");

var _getActiveElement = require("@instructure/ui-dom-utils/lib/getActiveElement.js");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
function scopeTab(element, event, onLeavingFinalTabbable) {
  const node = (0, _findDOMNode.findDOMNode)(element);
  const tabbable = (0, _findTabbable.findTabbable)(node);

  if (!tabbable.length) {
    event.preventDefault();
    return;
  } // Account for a changing tabindex of the active element
  // (a case that happens with Menu for KO a11y)


  if ((0, _containsActiveElement.containsActiveElement)(element)) {
    const activeElement = (0, _getActiveElement.getActiveElement)();

    if (activeElement && tabbable.indexOf(activeElement) === -1) {
      tabbable.push(activeElement);
    }
  }

  const finalTabbable = tabbable[event.shiftKey ? 0 : tabbable.length - 1];
  const leavingFinalTabbable = (0, _isActiveElement.isActiveElement)(finalTabbable) || // handle immediate shift+tab after opening with mouse
  (0, _isActiveElement.isActiveElement)(node) || // already left final tabbable
  !(0, _containsActiveElement.containsActiveElement)(element);
  if (!leavingFinalTabbable) return;

  if (typeof onLeavingFinalTabbable === 'function') {
    onLeavingFinalTabbable();
    return;
  }

  event.preventDefault();
  const target = tabbable[event.shiftKey ? tabbable.length - 1 : 0];
  target.focus();
}

var _default = scopeTab;
exports.default = _default;