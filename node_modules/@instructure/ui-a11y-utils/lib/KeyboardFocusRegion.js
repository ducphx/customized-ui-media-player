"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.KeyboardFocusRegion = void 0;

var _findDOMNode = require("@instructure/ui-dom-utils/lib/findDOMNode.js");

var _findTabbable = require("@instructure/ui-dom-utils/lib/findTabbable.js");

var _findFocusable = require("@instructure/ui-dom-utils/lib/findFocusable.js");

var _ownerWindow = require("@instructure/ui-dom-utils/lib/ownerWindow.js");

var _getActiveElement = require("@instructure/ui-dom-utils/lib/getActiveElement.js");

var _addEventListener = require("@instructure/ui-dom-utils/lib/addEventListener.js");

var _ownerDocument = require("@instructure/ui-dom-utils/lib/ownerDocument.js");

var _containsActiveElement = require("@instructure/ui-dom-utils/lib/containsActiveElement.js");

var _requestAnimationFrame = require("@instructure/ui-dom-utils/lib/requestAnimationFrame.js");

var _console = require("@instructure/console");

var _keycode = _interopRequireDefault(require("keycode"));

var _scopeTab = require("./scopeTab");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
class KeyboardFocusRegion {
  constructor(element, options) {
    this._options = void 0;
    this._focusLaterElement = null;
    this._needToFocus = false;
    this._listeners = [];
    this._raf = [];
    this._active = false;
    this._wasDocumentClick = void 0;
    this._contextElement = void 0;

    this.handleKeyDown = event => {
      if (event.keyCode === _keycode.default.codes.tab) {
        (0, _scopeTab.scopeTab)(this._contextElement, event);
      }
    };

    this.handleClick = () => {
      this._wasDocumentClick = true;
    };

    this.handleWindowBlur = () => {
      if (this._wasDocumentClick) {
        this._wasDocumentClick = false;
        return;
      }

      this._needToFocus = true;
    };

    this.handleFocus = () => {
      if (this._needToFocus) {
        this._needToFocus = false;

        if (!this._contextElement) {
          return;
        } // need to see how jQuery shims document.on('focusin') so we don't need the
        // setTimeout, firefox doesn't support focusin, if it did, we could focus
        // the element outside of a setTimeout. Side-effect of this implementation
        // is that the document.body gets focus, and then we focus our element right
        // after, seems fine.


        this._raf.push((0, _requestAnimationFrame.requestAnimationFrame)(() => {
          if ((0, _containsActiveElement.containsActiveElement)(this._contextElement)) {
            return;
          }

          this.focusDefaultElement();
        }));
      }
    };

    this.handleFirstTabbableKeyDown = event => {
      if (event.keyCode === _keycode.default.codes.tab && event.shiftKey) {
        var _this$_options$onBlur, _this$_options;

        (_this$_options$onBlur = (_this$_options = this._options).onBlur) === null || _this$_options$onBlur === void 0 ? void 0 : _this$_options$onBlur.call(_this$_options, event);
      }
    };

    this.handleLastTabbableKeyDown = event => {
      if (event.keyCode === _keycode.default.codes.tab && !event.shiftKey) {
        var _this$_options$onBlur2, _this$_options2;

        (_this$_options$onBlur2 = (_this$_options2 = this._options).onBlur) === null || _this$_options$onBlur2 === void 0 ? void 0 : _this$_options$onBlur2.call(_this$_options2, event);
      }
    };

    this._contextElement = (0, _findDOMNode.findDOMNode)(element);
    this._options = options || {
      shouldContainFocus: true,
      shouldReturnFocus: true,
      defaultFocusElement: null
    };

    if (this._options.shouldReturnFocus) {
      this._focusLaterElement = (0, _getActiveElement.getActiveElement)(this.doc);
    }
  }

  get focused() {
    return (0, _containsActiveElement.containsActiveElement)(this._contextElement);
  }

  get shouldContainFocus() {
    const shouldContainFocus = this._options.shouldContainFocus;
    return shouldContainFocus === true || Array.isArray(shouldContainFocus) && shouldContainFocus.includes('keyboard');
  }

  get focusable() {
    return (0, _findFocusable.findFocusable)(this._contextElement, () => true, true) || [];
  }

  get tabbable() {
    return (0, _findTabbable.findTabbable)(this._contextElement) || [];
  }

  get firstTabbable() {
    return this.tabbable[0];
  }

  get lastTabbable() {
    return this.tabbable.pop();
  }

  get firstFocusable() {
    return this.focusable[0];
  }

  get lastFocusable() {
    return this.focusable.pop();
  }

  get doc() {
    return (0, _ownerDocument.ownerDocument)(this._contextElement);
  }

  get win() {
    return (0, _ownerWindow.ownerWindow)(this._contextElement);
  }

  get defaultFocusElement() {
    const defaultFocusElement = this._options.defaultFocusElement;
    const element = (0, _findDOMNode.findDOMNode)(typeof defaultFocusElement === 'function' ? defaultFocusElement() : defaultFocusElement);

    if (element && this._contextElement && this._contextElement.contains(element)) {
      return element;
    }

    if (this.firstTabbable) {
      return this.firstTabbable;
    }

    if (this._contextElement && this.focusable.includes(this._contextElement)) {
      return this._contextElement;
    }

    return null;
  }

  updateElement(element) {
    this._contextElement = (0, _findDOMNode.findDOMNode)(element);
  }

  focusDefaultElement() {
    if (this.defaultFocusElement) {
      ;
      this.defaultFocusElement.focus();
    } else {
      if (this.shouldContainFocus) {
        // Blur the active element to place focus on the document body
        (0, _getActiveElement.getActiveElement)(this.doc) && (0, _getActiveElement.getActiveElement)(this.doc).blur();
        (0, _console.logError)(true, `
          [KeyboardFocusRegion] No \`defaultFocusElement\` was provided and
          \`shouldContainFocus\` was set to \`true\` or \`keyboard\`. Focus has
          been moved to the document body instead.`);
      }
    }
  }

  focus() {
    if (this.focused) {
      return;
    }

    this._raf.push((0, _requestAnimationFrame.requestAnimationFrame)(() => {
      this.focusDefaultElement();
    }));
  }

  blur() {
    if (this._options.shouldReturnFocus && this._focusLaterElement) {
      try {
        ;

        this._focusLaterElement.focus();
      } catch (e) {
        (0, _console.logError)(false, `
          [KeyboardFocusRegion] You tried to return focus to ${this._focusLaterElement}
          but it is not in the DOM anymore: ${e}
          `);
      }

      this._focusLaterElement = null;
    }
  }

  activate() {
    const defaultFocusElement = this.defaultFocusElement,
          shouldContainFocus = this.shouldContainFocus;

    if (!this._active) {
      if (defaultFocusElement || shouldContainFocus) {
        if (shouldContainFocus) {
          this._listeners.push((0, _addEventListener.addEventListener)(this.doc, 'keydown', this.handleKeyDown));
        } else {
          this._listeners.push((0, _addEventListener.addEventListener)(this.firstTabbable || defaultFocusElement, 'keydown', this.handleFirstTabbableKeyDown));

          this._listeners.push((0, _addEventListener.addEventListener)(this.lastTabbable || defaultFocusElement, 'keydown', this.handleLastTabbableKeyDown));
        }

        this._listeners.push((0, _addEventListener.addEventListener)(this.doc, 'click', this.handleClick, true));

        this._listeners.push((0, _addEventListener.addEventListener)(this.win, 'blur', this.handleWindowBlur, false));

        this._listeners.push((0, _addEventListener.addEventListener)(this.doc, 'focus', this.handleFocus, true));

        this._active = true;
      }
    }
  }

  deactivate() {
    if (this._active) {
      this._listeners.forEach(listener => {
        listener.remove();
      });

      this._listeners = [];

      this._raf.forEach(request => request.cancel());

      this._raf = [];
      this._active = false;
    }
  }

}

exports.KeyboardFocusRegion = KeyboardFocusRegion;
var _default = KeyboardFocusRegion;
exports.default = _default;