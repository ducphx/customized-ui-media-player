"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FocusRegion = void 0;

var _keycode = _interopRequireDefault(require("keycode"));

var _contains = require("@instructure/ui-dom-utils/lib/contains.js");

var _addEventListener = require("@instructure/ui-dom-utils/lib/addEventListener.js");

var _ownerDocument = require("@instructure/ui-dom-utils/lib/ownerDocument.js");

var _findTabbable = require("@instructure/ui-dom-utils/lib/findTabbable.js");

var _uid = require("@instructure/uid");

var _console = require("@instructure/console");

var _ScreenReaderFocusRegion = require("./ScreenReaderFocusRegion");

var _KeyboardFocusRegion = require("./KeyboardFocusRegion");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
class FocusRegion {
  constructor(element, options) {
    this._contextElement = null;
    this._preventCloseOnDocumentClick = false;
    this._options = void 0;
    this._screenReaderFocusRegion = void 0;
    this._keyboardFocusRegion = void 0;
    this._id = void 0;
    this._listeners = [];
    this._active = false;

    this.handleDismiss = (event, documentClick) => {
      var _this$_options$onDism, _this$_options;

      (_this$_options$onDism = (_this$_options = this._options).onDismiss) === null || _this$_options$onDism === void 0 ? void 0 : _this$_options$onDism.call(_this$_options, event, documentClick);
    };

    this.captureDocumentClick = event => {
      const target = event.target;
      this._preventCloseOnDocumentClick = event.button !== 0 || (0, _contains.contains)(this._contextElement, target);
    };

    this.handleDocumentClick = event => {
      if (this._options.shouldCloseOnDocumentClick && !this._preventCloseOnDocumentClick) {
        this.handleDismiss(event, true);
      }
    };

    this.handleFrameClick = (event, frame) => {
      if (!(0, _contains.contains)(this._contextElement, frame)) {
        // dismiss if frame is not within the region
        this.handleDismiss(event, true);
      }
    };

    this.handleKeyUp = event => {
      if (this._options.shouldCloseOnEscape && event.keyCode === _keycode.default.codes.esc && !event.defaultPrevented) {
        this.handleDismiss(event);
      }
    };

    this._options = options || {
      shouldCloseOnDocumentClick: true,
      shouldCloseOnEscape: true
    };
    this._contextElement = element;
    this._screenReaderFocusRegion = new _ScreenReaderFocusRegion.ScreenReaderFocusRegion(element, options);
    this._keyboardFocusRegion = new _KeyboardFocusRegion.KeyboardFocusRegion(element, options);
    this._id = (0, _uid.uid)();
  }

  updateElement(element, options) {
    this._contextElement = element;

    if (options) {
      this._options = options;
    }

    if (this._keyboardFocusRegion) {
      this._keyboardFocusRegion.updateElement(element);
    }

    if (this._screenReaderFocusRegion) {
      this._screenReaderFocusRegion.updateElement(element);
    }
  }

  get id() {
    return this._id;
  } // Focused returns when the focus region is active. Checking focused with the active element
  // is inconsistent across browsers (Safari/Firefox do not focus elements on click)


  get focused() {
    return this._active;
  }

  get keyboardFocusable() {
    return ((0, _findTabbable.findTabbable)(this._contextElement) || []).length > 0;
  }

  activate() {
    if (!this._active) {
      const doc = (0, _ownerDocument.ownerDocument)(this._contextElement);

      this._keyboardFocusRegion.activate();

      this._screenReaderFocusRegion.activate();

      if (this._options.shouldCloseOnDocumentClick) {
        this._listeners.push((0, _addEventListener.addEventListener)(doc, 'click', this.captureDocumentClick, true));

        this._listeners.push((0, _addEventListener.addEventListener)(doc, 'click', this.handleDocumentClick));

        Array.from(doc.getElementsByTagName('iframe')).forEach(el => {
          // listen for mouseup events on any iframes in the document
          const frameDoc = el.contentDocument;

          if (frameDoc) {
            this._listeners.push((0, _addEventListener.addEventListener)(frameDoc, 'mouseup', event => {
              this.handleFrameClick(event, el);
            }));
          }
        });
      }

      if (this._options.shouldCloseOnEscape) {
        this._listeners.push((0, _addEventListener.addEventListener)(doc, 'keyup', this.handleKeyUp));
      }

      this._active = true;
    }
  }

  deactivate() {
    let _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {},
        _ref$keyboard = _ref.keyboard,
        keyboard = _ref$keyboard === void 0 ? true : _ref$keyboard;

    if (this._active) {
      this._listeners.forEach(listener => {
        listener.remove();
      });

      this._listeners = [];

      if (keyboard) {
        this._keyboardFocusRegion.deactivate();
      }

      this._screenReaderFocusRegion.deactivate();

      this._active = false;
    }
  }

  focus() {
    (0, _console.logError)(this._active, `[FocusRegion] Cannot call '.focus()' on a region that is not currently active.`);

    this._keyboardFocusRegion.focus();
  }

  blur() {
    (0, _console.logError)(!this._active, `[FocusRegion] Cannot call '.blur()' on a region that is currently active.`);

    this._keyboardFocusRegion.blur();
  }

}

exports.FocusRegion = FocusRegion;
var _default = FocusRegion;
exports.default = _default;