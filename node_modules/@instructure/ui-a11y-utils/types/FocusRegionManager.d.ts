import { FocusRegion } from './FocusRegion';
import { FocusRegionOptions } from './FocusRegionOptions';
declare type Entry = {
    id: string;
    element: Element | Node;
    region: FocusRegion;
    children: Entry[];
    parent?: Entry;
};
declare class FocusRegionManager {
    static focusRegion: (element: Element | Node, idOrOptions?: string | FocusRegionOptions) => FocusRegion | undefined;
    static activateRegion: (element: Element | Node, options: FocusRegionOptions) => FocusRegion;
    static getActiveEntry: () => Entry | undefined;
    static findEntry: (element: Element | Node, id?: string) => number;
    static getEntry: (element: Element | Node, id?: string) => Entry;
    static addEntry: (element: Element | Node, options?: FocusRegionOptions) => {
        id: string;
        element: Element | Node;
        region: FocusRegion;
        children: never[];
        parent: Entry | undefined;
    };
    static removeEntry: (element: Element | Node, id?: string) => Entry;
    static isFocused: (element: Element | Node, id?: string) => boolean | undefined;
    static clearEntries: () => void;
    static blurRegion: (element: Element | Node, id?: string) => void;
}
export default FocusRegionManager;
export { 
/**
 * ---
 * category: utilities/a11y
 * ---
 *
 * Class for focus operations, manages multiple [FocusRegion](#FocusRegion)s.
 * - Scoping focus within a given context,
 * - Mark active element for focus later
 * - Return focus to the marked element
 * @module FocusManager
 */
FocusRegionManager };
//# sourceMappingURL=FocusRegionManager.d.ts.map