import { FocusRegionOptions } from './FocusRegionOptions';
declare class FocusRegion {
    private _contextElement;
    private _preventCloseOnDocumentClick;
    private _options;
    private readonly _screenReaderFocusRegion;
    private readonly _keyboardFocusRegion;
    private readonly _id;
    private _listeners;
    private _active;
    constructor(element: Element | Node | null, options: FocusRegionOptions);
    updateElement(element: Element | Node, options?: FocusRegionOptions): void;
    handleDismiss: (event: React.MouseEvent | React.KeyboardEvent, documentClick?: boolean) => void;
    captureDocumentClick: (event: React.MouseEvent) => void;
    handleDocumentClick: (event: React.MouseEvent) => void;
    handleFrameClick: (event: React.MouseEvent, frame: HTMLIFrameElement) => void;
    handleKeyUp: (event: React.KeyboardEvent) => void;
    get id(): string;
    get focused(): boolean;
    get keyboardFocusable(): boolean;
    activate(): void;
    deactivate({ keyboard }?: {
        keyboard?: boolean;
    }): void;
    focus(): void;
    blur(): void;
}
export default FocusRegion;
export { 
/**
 * ---
 * category: utilities/a11y
 * ---
 *
 * Class for focus operations, manages [ScreenReaderFocusRegion](#ScreenReaderFocusRegion)
 * and [KeyboardFocusRegion](#KeyboardFocusRegion) for the given DOM element.
 * - Scoping focus within a given context (DOM node),
 * - Mark active element for focus later
 * - Return focus to the marked element
 * @module FocusRegion
 */
FocusRegion };
//# sourceMappingURL=FocusRegion.d.ts.map