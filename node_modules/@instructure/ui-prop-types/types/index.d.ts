/// <reference types="react" />
import { Children } from './Children';
import { childrenOrValue } from './childrenOrValue';
import { controllable } from './controllable';
import { cursor } from './cursor';
import { xor } from './xor';
import { makeRequirable } from './makeRequirable';
import { element } from './element';
export { Children, childrenOrValue, controllable, cursor, makeRequirable, xor, element };
declare const _default: {
    Children: {
        oneOf(validTypes: (string | import("react").ComponentType<any> | null)[]): {
            (props: Record<string, any>, propName: string, componentName: string): Error | null;
            isRequired: (props: Record<string, any>, propName: string, componentName: string, location?: string, propFullName?: string) => Error | null;
        };
        oneOfEach(validTypes: (string | import("react").ComponentType<any>)[]): (props: Record<string, any>, propName: string, componentName: string) => Error | null;
        enforceOrder(...validTypeGroups: (string | import("react").ComponentType<any>)[][]): {
            (props: Record<string, any>, propName: string, componentName: string): Error | null;
            isRequired: (props: Record<string, any>, propName: string, componentName: string, location?: string, propFullName?: string) => Error | null;
        };
    };
    childrenOrValue: typeof childrenOrValue;
    controllable: typeof controllable;
    cursor: import("prop-types").Requireable<string>;
    element: import("prop-types").Requireable<Element | import("prop-types").ReactElementLike>;
    makeRequirable: typeof makeRequirable;
    xor: typeof xor;
};
export default _default;
export type { Cursor } from './cursor';
//# sourceMappingURL=index.d.ts.map