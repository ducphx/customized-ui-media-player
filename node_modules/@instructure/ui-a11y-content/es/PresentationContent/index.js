import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
const _excluded = ["children"];

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import { passthroughProps, getElementType } from '@instructure/ui-react-utils';
import { propTypes, allowedProps } from './props';

/**
---
category: components/utilities
---
@module PresentationContent
@tsProps
**/
class PresentationContent extends Component {
  constructor() {
    super(...arguments);
    this.ref = null;

    this.handleRef = el => {
      const elementRef = this.props.elementRef;
      this.ref = el;

      if (typeof elementRef === 'function') {
        elementRef(el);
      }
    };
  }

  render() {
    const _this$props = this.props,
          children = _this$props.children,
          props = _objectWithoutProperties(_this$props, _excluded);

    const ElementType = getElementType(PresentationContent, this.props);
    return /*#__PURE__*/React.createElement(ElementType // @ts-expect-error TODO: `ref` prop causes: "Expression produces a union type that is too complex to represent.ts(2590)"
    , Object.assign({}, passthroughProps(props), {
      "aria-hidden": "true",
      ref: this.handleRef
    }), children);
  }

}

PresentationContent.displayName = "PresentationContent";
PresentationContent.propTypes = propTypes;
PresentationContent.allowedProps = allowedProps;
PresentationContent.defaultProps = {
  as: 'span',
  children: null
};
export default PresentationContent;
export { PresentationContent };