"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ScreenReaderContent = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = require("react");

var _passthroughProps = require("@instructure/ui-react-utils/lib/passthroughProps.js");

var _getElementType = require("@instructure/ui-react-utils/lib/getElementType.js");

var _emotion = require("@instructure/emotion");

var _styles = _interopRequireDefault(require("./styles"));

var _props = require("./props");

const _excluded = ["children", "styles"];

var _dec, _class, _class2;

/**
---
category: components/utilities
---
@module ScreenReaderContent
@tsProps
**/
let ScreenReaderContent = (_dec = (0, _emotion.withStyle)(_styles.default, null), _dec(_class = (_class2 = class ScreenReaderContent extends _react.Component {
  constructor() {
    super(...arguments);
    this.ref = null;

    this.handleRef = el => {
      const elementRef = this.props.elementRef;
      this.ref = el;

      if (typeof elementRef === 'function') {
        elementRef(el);
      }
    };
  }

  componentDidMount() {
    var _this$props$makeStyle, _this$props;

    (_this$props$makeStyle = (_this$props = this.props).makeStyles) === null || _this$props$makeStyle === void 0 ? void 0 : _this$props$makeStyle.call(_this$props);
  }

  componentDidUpdate() {
    var _this$props$makeStyle2, _this$props2;

    (_this$props$makeStyle2 = (_this$props2 = this.props).makeStyles) === null || _this$props$makeStyle2 === void 0 ? void 0 : _this$props$makeStyle2.call(_this$props2);
  }

  render() {
    const _this$props3 = this.props,
          children = _this$props3.children,
          styles = _this$props3.styles,
          props = (0, _objectWithoutProperties2.default)(_this$props3, _excluded); // any cast is needed to prevent Expression produces a union type that is too complex to represent errors

    const ElementType = (0, _getElementType.getElementType)(ScreenReaderContent, props);
    return (0, _emotion.jsx)(ElementType, Object.assign({}, (0, _passthroughProps.passthroughProps)(props), {
      css: styles === null || styles === void 0 ? void 0 : styles.screenReaderContent,
      ref: this.handleRef
    }), children);
  }

}, _class2.displayName = "ScreenReaderContent", _class2.componentId = 'ScreenReaderContent', _class2.propTypes = _props.propTypes, _class2.allowedProps = _props.allowedProps, _class2.defaultProps = {
  as: 'span',
  children: null
}, _class2)) || _class);
exports.ScreenReaderContent = ScreenReaderContent;
var _default = ScreenReaderContent;
exports.default = _default;