/// <reference types="react" />
import type { Spacing, WithStyleProps, ComponentStyle } from '@instructure/emotion';
import type { AsElementType, OtherHTMLAttributes, PropValidators, SpinnerTheme } from '@instructure/shared-types';
import type { WithDeterministicIdProps } from '@instructure/ui-react-utils';
declare type SpinnerOwnProps = {
    /**
     * Give the spinner a title to be read by screenreaders
     */
    renderTitle?: (() => React.ReactNode) | React.ReactNode;
    /**
     * Different-sized spinners
     */
    size?: 'x-small' | 'small' | 'medium' | 'large';
    /**
     * Different color schemes for use with light or dark backgrounds
     */
    variant?: 'default' | 'inverse';
    /**
     * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
     * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
     * familiar CSS-like shorthand. For example: `margin="small auto large"`.
     */
    margin?: Spacing;
    /**
     * provides a reference to the underlying html root element
     */
    elementRef?: (element: Element | null) => void;
    as?: AsElementType;
};
declare type PropKeys = keyof SpinnerOwnProps;
declare type AllowedPropKeys = Readonly<Array<PropKeys>>;
declare type SpinnerProps = SpinnerOwnProps & WithStyleProps<SpinnerTheme, SpinnerStyle> & OtherHTMLAttributes<SpinnerOwnProps> & WithDeterministicIdProps;
declare type SpinnerStyle = ComponentStyle<'spinner' | 'circle' | 'circleTrack' | 'circleSpin'>;
declare const propTypes: PropValidators<PropKeys>;
declare const allowedProps: AllowedPropKeys;
export type { SpinnerProps, SpinnerStyle };
export { propTypes, allowedProps };
//# sourceMappingURL=props.d.ts.map