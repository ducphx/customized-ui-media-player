/** @jsx jsx */
import { Component } from 'react';
import { jsx } from '@instructure/emotion';
import type { SpinnerProps } from './props';
/**
---
category: components
---
@tsProps
**/
declare class Spinner extends Component<SpinnerProps> {
    static readonly componentId = "Spinner";
    static allowedProps: readonly (keyof {
        renderTitle?: import("react").ReactNode | (() => import("react").ReactNode); /**
        ---
        category: components
        ---
        @tsProps
        **/
        size?: "x-small" | "small" | "medium" | "large" | undefined;
        variant?: "default" | "inverse" | undefined;
        margin?: import("@instructure/emotion/types/styleUtils/ThemeablePropValues").Spacing | undefined;
        elementRef?: ((element: Element | null) => void) | undefined;
        as?: import("@instructure/shared-types/types/CommonProps").AsElementType | undefined;
    })[];
    static propTypes: import("@instructure/shared-types/types/UtilityTypes").PropValidators<keyof {
        renderTitle?: import("react").ReactNode | (() => import("react").ReactNode); /**
        ---
        category: components
        ---
        @tsProps
        **/
        size?: "x-small" | "small" | "medium" | "large" | undefined;
        variant?: "default" | "inverse" | undefined;
        margin?: import("@instructure/emotion/types/styleUtils/ThemeablePropValues").Spacing | undefined;
        elementRef?: ((element: Element | null) => void) | undefined;
        as?: import("@instructure/shared-types/types/CommonProps").AsElementType | undefined;
    }>;
    static defaultProps: {
        as: string;
        size: string;
        variant: string;
    };
    ref: Element | null;
    private readonly titleId?;
    handleRef: (el: Element | null) => void;
    constructor(props: SpinnerProps);
    componentDidMount(): void;
    componentDidUpdate(): void;
    radius(): "0.5em" | "1em" | "2.25em" | "1.75em";
    render(): jsx.JSX.Element;
}
export default Spinner;
export { Spinner };
//# sourceMappingURL=index.d.ts.map