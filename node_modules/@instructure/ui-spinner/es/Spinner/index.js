var _dec, _dec2, _dec3, _class, _class2;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/** @jsx jsx */
import { Component } from 'react';
import { View } from '@instructure/ui-view';
import { callRenderProp, omitProps, withDeterministicId } from '@instructure/ui-react-utils';
import { testable } from '@instructure/ui-testable';
import { logError as error } from '@instructure/console';
import { withStyle, jsx } from '@instructure/emotion';
import generateStyle from './styles';
import generateComponentTheme from './theme';
import { allowedProps, propTypes } from './props';
/**
---
category: components
---
@tsProps
**/

let Spinner = (_dec = withDeterministicId(), _dec2 = withStyle(generateStyle, generateComponentTheme), _dec3 = testable(), _dec(_class = _dec2(_class = _dec3(_class = (_class2 = class Spinner extends Component {
  constructor(props) {
    super(props);
    this.ref = null;
    this.titleId = void 0;

    this.handleRef = el => {
      const elementRef = this.props.elementRef;
      this.ref = el;

      if (typeof elementRef === 'function') {
        elementRef(el);
      }
    };

    this.titleId = props.deterministicId();
  }

  componentDidMount() {
    var _this$props$makeStyle, _this$props;

    (_this$props$makeStyle = (_this$props = this.props).makeStyles) === null || _this$props$makeStyle === void 0 ? void 0 : _this$props$makeStyle.call(_this$props);
  }

  componentDidUpdate() {
    var _this$props$makeStyle2, _this$props2;

    (_this$props$makeStyle2 = (_this$props2 = this.props).makeStyles) === null || _this$props$makeStyle2 === void 0 ? void 0 : _this$props$makeStyle2.call(_this$props2);
  }

  radius() {
    switch (this.props.size) {
      case 'x-small':
        return '0.5em';

      case 'small':
        return '1em';

      case 'large':
        return '2.25em';

      default:
        return '1.75em';
    }
  }

  render() {
    var _this$props$styles, _this$props$styles2, _this$props$styles3, _this$props$styles4;

    const passthroughProps = View.omitViewProps(omitProps(this.props, Spinner.allowedProps), Spinner);
    const hasTitle = this.props.renderTitle;
    error(!!hasTitle, '[Spinner] The renderTitle prop is necessary for screen reader support.');
    return jsx(View, Object.assign({}, passthroughProps, {
      as: this.props.as,
      elementRef: this.handleRef,
      css: (_this$props$styles = this.props.styles) === null || _this$props$styles === void 0 ? void 0 : _this$props$styles.spinner,
      margin: this.props.margin
    }), jsx("svg", {
      css: (_this$props$styles2 = this.props.styles) === null || _this$props$styles2 === void 0 ? void 0 : _this$props$styles2.circle,
      role: "img",
      "aria-labelledby": this.titleId,
      focusable: "false"
    }, jsx("title", {
      id: this.titleId
    }, callRenderProp(this.props.renderTitle)), jsx("g", {
      role: "presentation"
    }, this.props.variant !== 'inverse' && jsx("circle", {
      css: (_this$props$styles3 = this.props.styles) === null || _this$props$styles3 === void 0 ? void 0 : _this$props$styles3.circleTrack,
      cx: "50%",
      cy: "50%",
      r: this.radius()
    }), jsx("circle", {
      css: (_this$props$styles4 = this.props.styles) === null || _this$props$styles4 === void 0 ? void 0 : _this$props$styles4.circleSpin,
      cx: "50%",
      cy: "50%",
      r: this.radius()
    }))));
  }

}, _class2.displayName = "Spinner", _class2.componentId = 'Spinner', _class2.allowedProps = allowedProps, _class2.propTypes = propTypes, _class2.defaultProps = {
  as: 'div',
  size: 'medium',
  variant: 'default'
}, _class2)) || _class) || _class) || _class);
export default Spinner;
export { Spinner };