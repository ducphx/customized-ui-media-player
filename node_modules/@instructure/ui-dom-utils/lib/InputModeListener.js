"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.MODES = exports.InputModeListener = void 0;

var _console = require("@instructure/console");

var _addEventListener = require("./addEventListener");

var _canUseDOM = require("./canUseDOM");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
const MODES = {
  keyboard: 'keyboard',
  pointer: 'pointer'
};
exports.MODES = MODES;

class InputModeListenerImpl {
  constructor() {
    this._listeners = [];
    this._initialized = false;
    this._mode = MODES.keyboard;

    this.onInitialPointerMove = event => {
      var _event$target, _event$target$nodeNam;

      // Work around a Safari quirk that fires a mousemove on <html> whenever the
      // window blurs, even if you're tabbing out of the page. ¯\_(ツ)_/¯
      if ((event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : (_event$target$nodeNam = _event$target.nodeName) === null || _event$target$nodeNam === void 0 ? void 0 : _event$target$nodeNam.toLowerCase()) === 'html') {
        return;
      }

      this._mode = MODES.pointer;

      this._listeners.forEach(listener => listener.remove());
    };

    this.onKeyDown = () => {
      this._mode = MODES.keyboard;
    };

    this.onPointerDown = () => {
      this._mode = MODES.pointer;
    };

    this.init = () => {
      if (!_canUseDOM.canUseDOM || this._initialized) return;
      (0, _addEventListener.addEventListener)(document, 'keydown', this.onKeyDown, true);
      (0, _addEventListener.addEventListener)(document, 'mousedown', this.onPointerDown, true);
      (0, _addEventListener.addEventListener)(document, 'pointerdown', this.onPointerDown, true);
      (0, _addEventListener.addEventListener)(document, 'touchstart', this.onPointerDown, true);
      this.addInitialPointerMoveListeners();
      this._initialized = true;
    };

    (0, _console.logWarn)(false, `[InputModeListener] is deprecated and will be removed in version 7.0.0. Use addInputModeListener instead.`);
    this.init();
  }

  addInitialPointerMoveListeners() {
    this._listeners.push((0, _addEventListener.addEventListener)(document, 'mousemove', this.onInitialPointerMove, true));

    this._listeners.push((0, _addEventListener.addEventListener)(document, 'mousedown', this.onInitialPointerMove, true));

    this._listeners.push((0, _addEventListener.addEventListener)(document, 'mouseup', this.onInitialPointerMove, true));

    this._listeners.push((0, _addEventListener.addEventListener)(document, 'pointermove', this.onInitialPointerMove, true));

    this._listeners.push((0, _addEventListener.addEventListener)(document, 'pointerdown', this.onInitialPointerMove, true));

    this._listeners.push((0, _addEventListener.addEventListener)(document, 'pointerup', this.onInitialPointerMove, true));

    this._listeners.push((0, _addEventListener.addEventListener)(document, 'touchmove', this.onInitialPointerMove, true));

    this._listeners.push((0, _addEventListener.addEventListener)(document, 'touchstart', this.onInitialPointerMove, true));

    this._listeners.push((0, _addEventListener.addEventListener)(document, 'touchend', this.onInitialPointerMove, true));
  }

  get mode() {
    this.init();
    return this._mode;
  }

  isKeyboardMode() {
    this.init();
    return this._mode === MODES.keyboard;
  }

}

const InputModeListener = new InputModeListenerImpl();
exports.InputModeListener = InputModeListener;
var _default = InputModeListener;
exports.default = _default;