import { UIElement } from '@instructure/shared-types';
declare type ResizeListenerType = {
    remove: () => void;
};
declare type DimensionTypes = 'width' | 'height';
/**
 * ---
 * category: utilities/DOM
 * ---
 * ### This utility is deprecated since version __8.0__ and will be permanently deleted in version 9.0.
 * *Please use the native [DOM ResizeObserver API](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver) instead of this.*
 *
 *
 * Example usage of the `ResizeObserver`:
 *  ```js
 *    const observer = new ResizeObserver((entries) => {
 *    for (let entry of entries) {
 *       const size = {
 *        width: entry.contentRect.width
 *       }
 *
 *       if (size.width !== origSize.width) {
 *         // call your handler function here
 *         this._debounced(size)
 *      }
 *     }
 *   })
 *
 *   observer.observe(content)
 *   ```
 *
 * Adds a listener to an element and calls a specified handler function whenever the size changes.
 * @deprecated since version 8.0
 * @module
 *
 *
 * @param { Node | Window | React.ReactElement | React.Component | function } el - component or DOM node
 * @param {function} handler - function to run when resize occurs
 * @param dimensions
 * @returns {function} remove - cancel the listener and no longer execute the handler function
 */
declare function addResizeListener(el: UIElement, handler: (dimensions: Record<DimensionTypes, number>) => any, dimensions?: DimensionTypes[]): ResizeListenerType;
export default addResizeListener;
export { addResizeListener };
//# sourceMappingURL=addResizeListener.d.ts.map