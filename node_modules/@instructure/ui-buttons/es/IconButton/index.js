import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
const _excluded = ["children", "renderIcon", "screenReaderLabel", "type", "size", "elementRef", "as", "interaction", "color", "focusColor", "shape", "withBackground", "withBorder", "margin", "cursor", "href"];

var _dec, _dec2, _class, _class2;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import { testable } from '@instructure/ui-testable';
import { passthroughProps } from '@instructure/ui-react-utils';
import { ScreenReaderContent } from '@instructure/ui-a11y-content';
import { withStyle } from '@instructure/emotion';
import generateComponentTheme from './theme';
import { BaseButton } from '../BaseButton';
import { propTypes, allowedProps } from './props';

/**
---
category: components
---
@tsProps
**/
// needed for listing the available theme variables on docs page
let IconButton = (_dec = withStyle(null, generateComponentTheme), _dec2 = testable(), _dec(_class = _dec2(_class = (_class2 = class IconButton extends Component {
  constructor() {
    super(...arguments);
    this._baseButton = null;
    this.ref = null;

    this.handleRef = el => {
      const elementRef = this.props.elementRef;
      this.ref = el;

      if (typeof elementRef === 'function') {
        elementRef(el);
      }
    };
  }

  get focused() {
    return this._baseButton && this._baseButton.focused;
  }

  focus() {
    this._baseButton && this._baseButton.focus();
  }

  render() {
    const _this$props = this.props,
          children = _this$props.children,
          renderIcon = _this$props.renderIcon,
          screenReaderLabel = _this$props.screenReaderLabel,
          type = _this$props.type,
          size = _this$props.size,
          elementRef = _this$props.elementRef,
          as = _this$props.as,
          interaction = _this$props.interaction,
          color = _this$props.color,
          focusColor = _this$props.focusColor,
          shape = _this$props.shape,
          withBackground = _this$props.withBackground,
          withBorder = _this$props.withBorder,
          margin = _this$props.margin,
          cursor = _this$props.cursor,
          href = _this$props.href,
          props = _objectWithoutProperties(_this$props, _excluded);

    const themeOverride = this.props.themeOverride;
    return /*#__PURE__*/React.createElement(BaseButton, Object.assign({}, passthroughProps(props), {
      type: type,
      size: size,
      elementRef: this.handleRef,
      as: as,
      interaction: interaction,
      color: color,
      focusColor: focusColor,
      shape: shape,
      withBackground: withBackground,
      withBorder: withBorder,
      margin: margin,
      cursor: cursor,
      href: href,
      renderIcon: children || renderIcon,
      themeOverride: themeOverride,
      ref: component => {
        this._baseButton = component;
      }
    }), /*#__PURE__*/React.createElement(ScreenReaderContent, null, screenReaderLabel));
  }

}, _class2.displayName = "IconButton", _class2.componentId = 'IconButton', _class2.propTypes = propTypes, _class2.allowedProps = allowedProps, _class2.defaultProps = {
  type: 'button',
  size: 'medium',
  as: 'button',
  // Leave interaction default undefined so that `disabled` and `readOnly` can also be supplied
  interaction: void 0,
  color: 'secondary',
  shape: 'rectangle',
  withBackground: true,
  withBorder: true,
  margin: '0',
  cursor: 'pointer'
}, _class2)) || _class) || _class);
export default IconButton;
export { IconButton };