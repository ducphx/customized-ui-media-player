import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
const _excluded = ["screenReaderLabel", "elementRef", "size", "onClick", "margin", "placement", "offset", "type", "as", "href", "cursor", "tabIndex", "styles"];

var _dec, _dec2, _class, _class2;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/** @jsx jsx */
import { Component } from 'react';
import { IconXSolid } from '@instructure/ui-icons';
import { ScreenReaderContent } from '@instructure/ui-a11y-content';
import { testable } from '@instructure/ui-testable';
import { getInteraction, passthroughProps } from '@instructure/ui-react-utils';
import { withStyle, jsx } from '@instructure/emotion';
import generateStyle from './styles';
import generateComponentTheme from './theme';
import { BaseButton } from '../BaseButton';
import { propTypes, allowedProps } from './props';

/**
---
category: components
---
@tsProps
**/
let CloseButton = (_dec = withStyle(generateStyle, generateComponentTheme), _dec2 = testable(), _dec(_class = _dec2(_class = (_class2 = class CloseButton extends Component {
  constructor() {
    super(...arguments);
    this.ref = null;

    this.handleRef = el => {
      const elementRef = this.props.elementRef;

      if (typeof elementRef === 'function') {
        elementRef(el);
      }
    };
  }

  componentDidMount() {
    var _this$props$makeStyle, _this$props;

    (_this$props$makeStyle = (_this$props = this.props).makeStyles) === null || _this$props$makeStyle === void 0 ? void 0 : _this$props$makeStyle.call(_this$props);
  }

  componentDidUpdate() {
    var _this$props$makeStyle2, _this$props2;

    (_this$props$makeStyle2 = (_this$props2 = this.props).makeStyles) === null || _this$props$makeStyle2 === void 0 ? void 0 : _this$props$makeStyle2.call(_this$props2);
  }

  get interaction() {
    return getInteraction({
      props: this.props
    });
  }

  get color() {
    const color = this.props.color;
    return color === 'primary' ? 'secondary' : color;
  }

  render() {
    const _this$props3 = this.props,
          screenReaderLabel = _this$props3.screenReaderLabel,
          elementRef = _this$props3.elementRef,
          size = _this$props3.size,
          onClick = _this$props3.onClick,
          margin = _this$props3.margin,
          placement = _this$props3.placement,
          offset = _this$props3.offset,
          type = _this$props3.type,
          as = _this$props3.as,
          href = _this$props3.href,
          cursor = _this$props3.cursor,
          tabIndex = _this$props3.tabIndex,
          styles = _this$props3.styles,
          props = _objectWithoutProperties(_this$props3, _excluded);

    return jsx("span", Object.assign({}, passthroughProps(props), {
      css: styles === null || styles === void 0 ? void 0 : styles.closeButton,
      ref: el => this.ref = el
    }), jsx(BaseButton, {
      renderIcon: IconXSolid,
      elementRef: this.handleRef,
      interaction: this.interaction,
      type: type,
      color: this.color,
      size: size,
      onClick: onClick,
      margin: margin,
      withBorder: false,
      withBackground: false,
      as: as,
      href: href,
      cursor: cursor,
      tabIndex: tabIndex
    }, jsx(ScreenReaderContent, null, screenReaderLabel)));
  }

}, _class2.displayName = "CloseButton", _class2.componentId = 'CloseButton', _class2.propTypes = propTypes, _class2.allowedProps = allowedProps, _class2.defaultProps = {
  // Leave interaction default undefined so that `disabled` and `readOnly` can also be supplied
  interaction: void 0,
  type: 'button',
  placement: 'static',
  offset: 'x-small',
  size: 'small',
  margin: '0',
  as: 'button',
  cursor: 'pointer'
}, _class2)) || _class) || _class);
export default CloseButton;
export { CloseButton };