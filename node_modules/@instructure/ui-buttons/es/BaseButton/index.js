import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
const _excluded = ["type", "size", "elementRef", "as", "href", "color", "focusColor", "textAlign", "shape", "display", "withBackground", "withBorder", "isCondensed", "margin", "cursor", "onClick", "renderIcon", "tabIndex", "styles", "makeStyles"];

var _dec, _dec2, _class, _class2;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/** @jsx jsx */
import React, { Component } from 'react';
import keycode from 'keycode';
import { warn } from '@instructure/console';
import { testable } from '@instructure/ui-testable';
import { getElementType, getInteraction, passthroughProps, callRenderProp } from '@instructure/ui-react-utils';
import { isActiveElement } from '@instructure/ui-dom-utils';
import { hasVisibleChildren } from '@instructure/ui-a11y-utils';
import { View } from '@instructure/ui-view';
import { withStyle, jsx } from '@instructure/emotion';
import generateStyles from './styles';
import generateComponentTheme from './theme';
import { propTypes, allowedProps } from './props';

/**
---
category: components/utilities
---
@tsProps
**/
let BaseButton = (_dec = withStyle(generateStyles, generateComponentTheme), _dec2 = testable(), _dec(_class = _dec2(_class = (_class2 = class BaseButton extends Component {
  constructor() {
    super(...arguments);
    this.ref = null;

    this.handleElementRef = el => {
      const elementRef = this.props.elementRef;
      this.ref = el;

      if (typeof elementRef === 'function') {
        elementRef(el);
      }
    };

    this.handleClick = event => {
      const onClick = this.props.onClick;
      const interaction = this.interaction;

      if (interaction !== 'enabled') {
        event.preventDefault();
        event.stopPropagation();
        return;
      }

      if (typeof onClick === 'function') {
        onClick(event);
      }
    };

    this.handleKeyDown = event => {
      const _this$props = this.props,
            onClick = _this$props.onClick,
            onKeyDown = _this$props.onKeyDown,
            href = _this$props.href;
      const interaction = this.interaction;

      if (typeof onKeyDown === 'function') {
        onKeyDown(event);
      } // behave like a button when space key is pressed


      const _keycode$codes = keycode.codes,
            space = _keycode$codes.space,
            enter = _keycode$codes.enter;

      if (this.elementType !== 'button' && [space, enter].includes(event.keyCode)) {
        event.preventDefault();
        event.stopPropagation();

        if (typeof onClick === 'function' && interaction === 'enabled') {
          onClick(event);
        }

        if (href) {
          this.ref && this.ref.click();
        }
      }
    };
  }

  componentDidMount() {
    var _this$props$makeStyle, _this$props2;

    (_this$props$makeStyle = (_this$props2 = this.props).makeStyles) === null || _this$props$makeStyle === void 0 ? void 0 : _this$props$makeStyle.call(_this$props2, this.makeStylesVariables);
  }

  componentDidUpdate() {
    var _this$props$makeStyle2, _this$props3;

    (_this$props$makeStyle2 = (_this$props3 = this.props).makeStyles) === null || _this$props$makeStyle2 === void 0 ? void 0 : _this$props$makeStyle2.call(_this$props3, this.makeStylesVariables);
  }

  get _rootElement() {
    return this.ref;
  }

  get makeStylesVariables() {
    return {
      isDisabled: this.isDisabled,
      hasOnlyIconVisible: this.hasOnlyIconVisible
    };
  }

  get hasOnlyIconVisible() {
    const _this$props4 = this.props,
          children = _this$props4.children,
          renderIcon = _this$props4.renderIcon;
    return !!(renderIcon && !hasVisibleChildren(children));
  }

  get elementType() {
    return getElementType(BaseButton, this.props);
  }

  get interaction() {
    return getInteraction({
      props: this.props
    });
  }

  get isDisabled() {
    return this.interaction === 'disabled';
  }

  get isReadOnly() {
    return this.interaction === 'readonly';
  }

  get isEnabled() {
    return this.interaction === 'enabled';
  } // TODO: delete once the type of tabIndex is changed to number only


  get tabIndex() {
    const tabIndex = this.props.tabIndex;

    if (typeof tabIndex === 'string') {
      warn(false, 'The `string` value for `tabIndex` is deprecated. Only `number` type will be accepted from V9.0.0.');
      return parseInt(tabIndex);
    }

    return tabIndex;
  }

  get focusColor() {
    const _this$props5 = this.props,
          color = _this$props5.color,
          focusColor = _this$props5.focusColor,
          withBackground = _this$props5.withBackground; // Give user specified focusColor preference

    if (focusColor) {
      return focusColor;
    } // The `primary-inverse` background has an info focus outline
    // by default since it is replacing the `light` button variant.
    // Override the focus color with info even though it is
    // an inverse color


    if (color === 'primary-inverse' && withBackground) {
      return 'info';
    }

    return color.includes('inverse') ? 'inverse' : 'info';
  }

  get focused() {
    return isActiveElement(this.ref);
  }

  focus() {
    this.ref && this.ref.focus();
  }

  renderChildren() {
    const _this$props6 = this.props,
          renderIcon = _this$props6.renderIcon,
          children = _this$props6.children,
          styles = _this$props6.styles;
    const wrappedChildren = jsx("span", {
      css: styles === null || styles === void 0 ? void 0 : styles.children
    }, children);

    if (!renderIcon) {
      return wrappedChildren;
    }

    const hasOnlyIconVisible = this.hasOnlyIconVisible;
    const wrappedIcon = jsx("span", {
      css: styles === null || styles === void 0 ? void 0 : styles.iconSVG
    }, callRenderProp(renderIcon));
    const flexChildren = hasOnlyIconVisible ? jsx("span", {
      css: styles === null || styles === void 0 ? void 0 : styles.iconOnly
    }, wrappedIcon, children) : [jsx("span", {
      key: "icon",
      css: styles === null || styles === void 0 ? void 0 : styles.iconWrapper
    }, wrappedIcon), jsx("span", {
      key: "children",
      css: styles === null || styles === void 0 ? void 0 : styles.childrenWrapper
    }, wrappedChildren)];
    return jsx("span", {
      css: styles === null || styles === void 0 ? void 0 : styles.childrenLayout
    }, flexChildren);
  }

  render() {
    const _this$props7 = this.props,
          type = _this$props7.type,
          size = _this$props7.size,
          elementRef = _this$props7.elementRef,
          as = _this$props7.as,
          href = _this$props7.href,
          color = _this$props7.color,
          focusColor = _this$props7.focusColor,
          textAlign = _this$props7.textAlign,
          shape = _this$props7.shape,
          display = _this$props7.display,
          withBackground = _this$props7.withBackground,
          withBorder = _this$props7.withBorder,
          isCondensed = _this$props7.isCondensed,
          margin = _this$props7.margin,
          cursor = _this$props7.cursor,
          onClick = _this$props7.onClick,
          renderIcon = _this$props7.renderIcon,
          tabIndex = _this$props7.tabIndex,
          styles = _this$props7.styles,
          makeStyles = _this$props7.makeStyles,
          props = _objectWithoutProperties(_this$props7, _excluded);

    const isDisabled = this.isDisabled,
          isEnabled = this.isEnabled,
          isReadOnly = this.isReadOnly;
    const tabIndexNumber = this.tabIndex;
    return jsx(View, Object.assign({}, passthroughProps(props), {
      as: this.elementType,
      focusColor: this.focusColor,
      position: "relative",
      display: display,
      width: display === 'block' ? '100%' : 'auto',
      borderRadius: shape === 'circle' ? 'circle' : 'medium',
      background: "transparent",
      padding: "none",
      borderWidth: "none",
      margin: margin,
      cursor: isDisabled ? 'not-allowed' : cursor,
      href: href,
      type: href ? void 0 : type,
      elementRef: this.handleElementRef,
      onClick: this.handleClick,
      onKeyDown: this.handleKeyDown,
      role: onClick && as !== 'button' ? 'button' : void 0,
      tabIndex: onClick && as ? tabIndexNumber || 0 : tabIndexNumber,
      disabled: isDisabled || isReadOnly,
      css: isEnabled ? styles === null || styles === void 0 ? void 0 : styles.baseButton : null
    }), jsx("span", {
      css: styles === null || styles === void 0 ? void 0 : styles.content
    }, this.renderChildren()));
  }

}, _class2.displayName = "BaseButton", _class2.componentId = 'BaseButton', _class2.propTypes = propTypes, _class2.allowedProps = allowedProps, _class2.defaultProps = {
  type: 'button',
  size: 'medium',
  as: 'button',
  // Leave interaction default undefined so that `disabled` and `readOnly` can also be supplied
  interaction: void 0,
  color: 'secondary',
  shape: 'rectangle',
  display: 'inline-block',
  textAlign: 'start',
  withBackground: true,
  withBorder: true,
  isCondensed: false,
  margin: '0',
  cursor: 'pointer'
}, _class2)) || _class) || _class);
export { BaseButton };
export default BaseButton;