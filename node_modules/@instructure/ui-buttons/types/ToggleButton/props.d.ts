import React from 'react';
import type { AsElementType, OtherHTMLAttributes, PropValidators } from '@instructure/shared-types';
import type { PlacementPropValues, PositionConstraint, PositionMountNode } from '@instructure/ui-position';
import type { ViewProps } from '@instructure/ui-view';
declare type ToggleButtonOwnProps = {
    /**
     * Text to output only to screen readers
     */
    screenReaderLabel: string;
    /**
     * Text to render in the tooltip shown on hover/focus
     */
    renderTooltipContent: React.ReactNode | ((...args: any[]) => any);
    /**
     * An icon or function that returns an icon
     */
    renderIcon: React.ReactNode | (() => React.ReactNode);
    /**
     * Toggles the `aria-pressed` attribute on the button (`true` if `pressed`; `false` if `unpressed`)
     */
    status: 'pressed' | 'unpressed';
    /**
     * The element to render as the component root; `button` by default
     */
    as?: AsElementType;
    /**
     * Specifies if interaction with `ToggleButton` is `enabled`, `disabled`, or `readonly`
     */
    interaction?: 'enabled' | 'disabled' | 'readonly';
    /**
     * The size of the `ToggleButton`
     */
    size?: 'small' | 'medium' | 'large';
    /**
     * Provides a reference to `ToggleButton`'s underlying HTML element
     */
    elementRef?: (element: Element | null) => void;
    /**
     * Callback fired when the `ToggleButton` is clicked
     */
    onClick?: (event: React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>) => void;
    /**
     * The color in which to display the icon
     */
    color?: 'primary' | 'primary-inverse' | 'secondary' | 'success' | 'danger';
    /**
     * By default, the tooltip will show on hover/focus. Use this prop if you need to override that behavior.
     */
    isShowingTooltip?: boolean;
    /**
     * An element or a function returning an element to use as the mount node
     */
    mountNode?: PositionMountNode;
    /**
     * The placement of the tooltip in relation to the button
     */
    placement?: PlacementPropValues;
    /**
     * The parent in which to constrain the tooltip.
     * One of: 'window', 'scroll-parent', 'parent', 'none', an element,
     * or a function returning an element.
     */
    constrain?: PositionConstraint;
};
declare type PropKeys = keyof ToggleButtonOwnProps;
declare type AllowedPropKeys = Readonly<Array<PropKeys>>;
declare type ToggleButtonProps = ToggleButtonOwnProps & OtherHTMLAttributes<ToggleButtonOwnProps>;
declare type ToggleButtonState = {
    isShowingTooltip: boolean;
};
declare const propTypes: PropValidators<PropKeys>;
declare const allowedProps: AllowedPropKeys;
export type { ToggleButtonProps, ToggleButtonState };
export { propTypes, allowedProps };
//# sourceMappingURL=props.d.ts.map