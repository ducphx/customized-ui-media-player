import React, { Component } from 'react';
import type { ToggleButtonProps, ToggleButtonState } from './props';
/**
---
category: components
---
@tsProps
**/
declare class ToggleButton extends Component<ToggleButtonProps, ToggleButtonState> {
    static readonly componentId = "ToggleButton";
    static propTypes: import("@instructure/shared-types/types/UtilityTypes").PropValidators<keyof {
        screenReaderLabel: string;
        renderTooltipContent: React.ReactNode | ((...args: any[]) => any);
        renderIcon: React.ReactNode | (() => React.ReactNode);
        status: "pressed" | "unpressed";
        as?: import("@instructure/shared-types/types/CommonProps").AsElementType | undefined;
        interaction?: "enabled" | "disabled" | "readonly" | undefined;
        size?: "small" | "medium" | "large" | undefined;
        elementRef?: ((element: Element | null) => void) | undefined;
        onClick?: ((event: React.KeyboardEvent<import("@instructure/ui-view/types/View/props").ViewProps> | React.MouseEvent<import("@instructure/ui-view/types/View/props").ViewProps, MouseEvent>) => void) | undefined;
        color?: "primary" | "primary-inverse" | "secondary" | "success" | "danger" | undefined;
        isShowingTooltip?: boolean | undefined;
        mountNode?: import("@instructure/ui-position").PositionMountNode | undefined;
        placement?: import("@instructure/ui-position").PlacementPropValues | undefined;
        constrain?: import("@instructure/ui-position").PositionConstraint | undefined;
    }>;
    static allowedProps: readonly (keyof {
        screenReaderLabel: string;
        renderTooltipContent: React.ReactNode | ((...args: any[]) => any);
        renderIcon: React.ReactNode | (() => React.ReactNode);
        status: "pressed" | "unpressed";
        as?: import("@instructure/shared-types/types/CommonProps").AsElementType | undefined;
        interaction?: "enabled" | "disabled" | "readonly" | undefined;
        size?: "small" | "medium" | "large" | undefined;
        elementRef?: ((element: Element | null) => void) | undefined;
        onClick?: ((event: React.KeyboardEvent<import("@instructure/ui-view/types/View/props").ViewProps> | React.MouseEvent<import("@instructure/ui-view/types/View/props").ViewProps, MouseEvent>) => void) | undefined;
        color?: "primary" | "primary-inverse" | "secondary" | "success" | "danger" | undefined;
        isShowingTooltip?: boolean | undefined;
        mountNode?: import("@instructure/ui-position").PositionMountNode | undefined;
        placement?: import("@instructure/ui-position").PlacementPropValues | undefined;
        constrain?: import("@instructure/ui-position").PositionConstraint | undefined;
    })[];
    static defaultProps: {
        size: string;
        as: string;
        interaction: undefined;
        mountNode: null;
        color: string;
        placement: string;
        constrain: string;
    };
    constructor(props: ToggleButtonProps);
    ref: Element | null;
    handleRef: (el: Element | null) => void;
    get isShowingTooltip(): boolean;
    render(): JSX.Element;
}
export { ToggleButton };
export default ToggleButton;
//# sourceMappingURL=index.d.ts.map