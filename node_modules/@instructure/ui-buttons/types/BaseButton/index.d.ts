/** @jsx jsx */
import React, { Component } from 'react';
import type { ViewProps } from '@instructure/ui-view';
import { jsx } from '@instructure/emotion';
import type { BaseButtonProps, BaseButtonStyleProps } from './props';
/**
---
category: components/utilities
---
@tsProps
**/
declare class BaseButton extends Component<BaseButtonProps> {
    static readonly componentId = "BaseButton";
    static propTypes: import("@instructure/shared-types/types/UtilityTypes").PropValidators<keyof {
        children?: React.ReactNode;
        type?: "button" | "submit" | "reset" | undefined;
        size?: "small" | "medium" | "large" | undefined;
        elementRef?: ((element: Element | null) => void) | undefined;
        as?: import("@instructure/shared-types/types/CommonProps").AsElementType | undefined;
        interaction?: import("@instructure/ui-react-utils").InteractionType | undefined;
        color?: "primary" | "primary-inverse" | "secondary" | "success" | "danger" | undefined;
        focusColor?: "info" | "inverse" | undefined;
        display?: "inline-block" | "block" | undefined;
        textAlign?: "start" | "center" | undefined;
        shape?: "circle" | "rectangle" | undefined;
        withBackground?: boolean | undefined;
        withBorder?: boolean | undefined;
        isCondensed?: boolean | undefined;
        margin?: import("@instructure/emotion/types/styleUtils/ThemeablePropValues").Spacing | undefined;
        cursor?: import("@instructure/ui-prop-types/types/cursor").Cursor | undefined;
        href?: string | undefined;
        onClick?: ((event: React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps, MouseEvent>) => void) | undefined;
        onKeyDown?: ((event: React.KeyboardEvent<ViewProps>) => void) | undefined;
        renderIcon?: React.ReactNode | (() => React.ReactNode);
        tabIndex?: string | number | undefined;
    }>;
    static allowedProps: readonly (keyof {
        children?: React.ReactNode;
        type?: "button" | "submit" | "reset" | undefined;
        size?: "small" | "medium" | "large" | undefined;
        elementRef?: ((element: Element | null) => void) | undefined;
        as?: import("@instructure/shared-types/types/CommonProps").AsElementType | undefined;
        interaction?: import("@instructure/ui-react-utils").InteractionType | undefined;
        color?: "primary" | "primary-inverse" | "secondary" | "success" | "danger" | undefined;
        focusColor?: "info" | "inverse" | undefined;
        display?: "inline-block" | "block" | undefined;
        textAlign?: "start" | "center" | undefined;
        shape?: "circle" | "rectangle" | undefined;
        withBackground?: boolean | undefined;
        withBorder?: boolean | undefined;
        isCondensed?: boolean | undefined;
        margin?: import("@instructure/emotion/types/styleUtils/ThemeablePropValues").Spacing | undefined;
        cursor?: import("@instructure/ui-prop-types/types/cursor").Cursor | undefined;
        href?: string | undefined;
        onClick?: ((event: React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps, MouseEvent>) => void) | undefined;
        onKeyDown?: ((event: React.KeyboardEvent<ViewProps>) => void) | undefined;
        renderIcon?: React.ReactNode | (() => React.ReactNode);
        tabIndex?: string | number | undefined;
    })[];
    static defaultProps: {
        readonly type: "button";
        readonly size: "medium";
        readonly as: "button";
        readonly interaction: undefined;
        readonly color: "secondary";
        readonly shape: "rectangle";
        readonly display: "inline-block";
        readonly textAlign: "start";
        readonly withBackground: true;
        readonly withBorder: true;
        readonly isCondensed: false;
        readonly margin: "0";
        readonly cursor: "pointer";
    };
    ref: Element | null;
    componentDidMount(): void;
    componentDidUpdate(): void;
    get _rootElement(): Element | null;
    get makeStylesVariables(): BaseButtonStyleProps;
    get hasOnlyIconVisible(): boolean;
    get elementType(): import("@instructure/shared-types/types/CommonProps").AsElementType;
    get interaction(): import("@instructure/ui-react-utils").InteractionType;
    get isDisabled(): boolean;
    get isReadOnly(): boolean;
    get isEnabled(): boolean;
    get tabIndex(): number | undefined;
    get focusColor(): "info" | "inverse";
    get focused(): boolean;
    focus(): void;
    handleElementRef: (el: Element | null) => void;
    handleClick: (event: React.MouseEvent<ViewProps>) => void;
    handleKeyDown: (event: React.KeyboardEvent<ViewProps>) => void;
    renderChildren(): jsx.JSX.Element;
    render(): jsx.JSX.Element;
}
export { BaseButton };
export default BaseButton;
//# sourceMappingURL=index.d.ts.map