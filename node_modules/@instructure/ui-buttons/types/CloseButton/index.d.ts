/** @jsx jsx */
import { Component } from 'react';
import { jsx } from '@instructure/emotion';
import type { CloseButtonProps } from './props';
/**
---
category: components
---
@tsProps
**/
declare class CloseButton extends Component<CloseButtonProps> {
    static readonly componentId = "CloseButton";
    static propTypes: import("@instructure/shared-types/types/UtilityTypes").PropValidators<keyof {
        screenReaderLabel: import("react").ReactNode;
        color?: "primary" | "primary-inverse" | undefined;
        interaction?: "enabled" | "disabled" | "readonly" | undefined;
        elementRef?: ((element: Element | null) => void) | undefined;
        size?: "small" | "medium" | "large" | undefined;
        onClick?: ((event: import("react").KeyboardEvent<import("@instructure/ui-view/types/View/props").ViewProps> | import("react").MouseEvent<import("@instructure/ui-view/types/View/props").ViewProps, MouseEvent>) => void) | undefined;
        margin?: import("@instructure/emotion/types/styleUtils/ThemeablePropValues").Spacing | undefined;
        placement?: "start" | "end" | "static" | undefined;
        offset?: "small" | "medium" | "none" | "x-small" | undefined;
        type?: "button" | "submit" | "reset" | undefined;
        as?: import("@instructure/shared-types/types/CommonProps").AsElementType | undefined;
        href?: string | undefined;
        cursor?: import("@instructure/ui-prop-types/types/cursor").Cursor | undefined;
        tabIndex?: string | number | undefined;
    }>;
    static allowedProps: readonly (keyof {
        screenReaderLabel: import("react").ReactNode;
        color?: "primary" | "primary-inverse" | undefined;
        interaction?: "enabled" | "disabled" | "readonly" | undefined;
        elementRef?: ((element: Element | null) => void) | undefined;
        size?: "small" | "medium" | "large" | undefined;
        onClick?: ((event: import("react").KeyboardEvent<import("@instructure/ui-view/types/View/props").ViewProps> | import("react").MouseEvent<import("@instructure/ui-view/types/View/props").ViewProps, MouseEvent>) => void) | undefined;
        margin?: import("@instructure/emotion/types/styleUtils/ThemeablePropValues").Spacing | undefined;
        placement?: "start" | "end" | "static" | undefined;
        offset?: "small" | "medium" | "none" | "x-small" | undefined;
        type?: "button" | "submit" | "reset" | undefined;
        as?: import("@instructure/shared-types/types/CommonProps").AsElementType | undefined;
        href?: string | undefined;
        cursor?: import("@instructure/ui-prop-types/types/cursor").Cursor | undefined;
        tabIndex?: string | number | undefined;
    })[];
    static defaultProps: {
        interaction: undefined;
        type: string;
        placement: string;
        offset: string;
        size: string;
        margin: string;
        as: string;
        cursor: string;
    };
    ref: Element | null;
    handleRef: (el: Element | null) => void;
    componentDidMount(): void;
    componentDidUpdate(): void;
    get interaction(): import("@instructure/ui-react-utils").InteractionType;
    get color(): "primary-inverse" | "secondary" | undefined;
    render(): jsx.JSX.Element;
}
export default CloseButton;
export { CloseButton };
//# sourceMappingURL=index.d.ts.map