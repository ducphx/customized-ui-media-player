import React, { Component } from 'react';
import { BaseButton } from '../BaseButton';
import type { IconButtonProps } from './props';
/**
---
category: components
---
@tsProps
**/
declare class IconButton extends Component<IconButtonProps> {
    static readonly componentId = "IconButton";
    static propTypes: import("@instructure/shared-types/types/UtilityTypes").PropValidators<keyof {
        children?: React.ReactNode | (() => React.ReactNode);
        renderIcon?: React.ReactNode | (() => React.ReactNode);
        screenReaderLabel: string;
        type?: "button" | "submit" | "reset" | undefined;
        size?: "small" | "medium" | "large" | undefined;
        elementRef?: ((element: Element | null) => void) | undefined;
        as?: import("@instructure/shared-types/types/CommonProps").AsElementType | undefined;
        interaction?: "enabled" | "disabled" | "readonly" | undefined;
        color?: "primary" | "primary-inverse" | "secondary" | "success" | "danger" | undefined;
        focusColor?: "info" | "inverse" | undefined;
        shape?: "circle" | "rectangle" | undefined;
        withBackground?: boolean | undefined;
        withBorder?: boolean | undefined;
        margin?: import("@instructure/emotion/types/styleUtils/ThemeablePropValues").Spacing | undefined;
        cursor?: import("@instructure/ui-prop-types/types/cursor").Cursor | undefined;
        href?: string | undefined;
        onClick?: ((event: React.KeyboardEvent<import("@instructure/ui-view/types/View/props").ViewProps> | React.MouseEvent<import("@instructure/ui-view/types/View/props").ViewProps, MouseEvent>) => void) | undefined;
    }>;
    static allowedProps: readonly (keyof {
        children?: React.ReactNode | (() => React.ReactNode);
        renderIcon?: React.ReactNode | (() => React.ReactNode);
        screenReaderLabel: string;
        type?: "button" | "submit" | "reset" | undefined;
        size?: "small" | "medium" | "large" | undefined;
        elementRef?: ((element: Element | null) => void) | undefined;
        as?: import("@instructure/shared-types/types/CommonProps").AsElementType | undefined;
        interaction?: "enabled" | "disabled" | "readonly" | undefined;
        color?: "primary" | "primary-inverse" | "secondary" | "success" | "danger" | undefined;
        focusColor?: "info" | "inverse" | undefined;
        shape?: "circle" | "rectangle" | undefined;
        withBackground?: boolean | undefined;
        withBorder?: boolean | undefined;
        margin?: import("@instructure/emotion/types/styleUtils/ThemeablePropValues").Spacing | undefined;
        cursor?: import("@instructure/ui-prop-types/types/cursor").Cursor | undefined;
        href?: string | undefined;
        onClick?: ((event: React.KeyboardEvent<import("@instructure/ui-view/types/View/props").ViewProps> | React.MouseEvent<import("@instructure/ui-view/types/View/props").ViewProps, MouseEvent>) => void) | undefined;
    })[];
    static defaultProps: {
        type: string;
        size: string;
        as: string;
        interaction: undefined;
        color: string;
        shape: string;
        withBackground: boolean;
        withBorder: boolean;
        margin: string;
        cursor: string;
    };
    _baseButton: BaseButton | null;
    ref: Element | null;
    handleRef: (el: Element | null) => void;
    get focused(): boolean | null;
    focus(): void;
    render(): JSX.Element;
}
export default IconButton;
export { IconButton };
//# sourceMappingURL=index.d.ts.map