import React from 'react';
import type { Spacing, WithStyleProps } from '@instructure/emotion';
import type { ToProp, AsElementType, PropValidators, BaseButtonTheme, OtherHTMLAttributes } from '@instructure/shared-types';
import type { Cursor } from '@instructure/ui-prop-types';
import type { ViewProps } from '@instructure/ui-view';
declare type IconButtonOwnProps = {
    /**
     * An icon, or function returning an icon (identical to the `renderIcon` prop).
     */
    children?: React.ReactNode | (() => React.ReactNode);
    /**
     * An icon, or function that returns an icon (identical to the `children` prop).
     */
    renderIcon?: React.ReactNode | (() => React.ReactNode);
    /**
     * An accessible label for the `IconButton`.
     */
    screenReaderLabel: string;
    /**
     * Specifies the type of the `IconButton`'s underlying html element.
     */
    type?: 'button' | 'submit' | 'reset';
    /**
     * The size of the `IconButton`
     */
    size?: 'small' | 'medium' | 'large';
    /**
     * Provides a reference to the `IconButton`'s underlying html element.
     */
    elementRef?: (element: Element | null) => void;
    /**
     * The element to render as the component root, `button` by default.
     */
    as?: AsElementType;
    /**
     * Specifies if interaction with the `IconButton` is enabled, disabled, or readonly.
     */
    interaction?: 'enabled' | 'disabled' | 'readonly';
    /**
     * Specifies the color for the `IconButton`.
     */
    color?: 'primary' | 'primary-inverse' | 'secondary' | 'success' | 'danger';
    /**
     * Override the `Button`'s default focus outline color.
     */
    focusColor?: 'info' | 'inverse';
    /**
     * Specifies if the `IconButton` shape should be a circle or rectangle.
     */
    shape?: 'rectangle' | 'circle';
    /**
     * Specifies if the `IconButton` should render with a solid background. When false, the background is transparent.
     */
    withBackground?: boolean;
    /**
     * Specifies if the `IconButton` should render with a border.
     */
    withBorder?: boolean;
    /**
     * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
     * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
     * familiar CSS-like shorthand. For example: `margin="small auto large"`.
     */
    margin?: Spacing;
    /**
     * Specify a mouse cursor to use when hovering over the button.
     * The `pointer` cursor is used by default.
     */
    cursor?: Cursor;
    /**
     * Specifies an href attribute for the `IconButton`'s underlying html element.
     */
    href?: string;
    /**
     * Callback fired when the `Button` is clicked.
     */
    onClick?: (event: React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>) => void;
};
declare type PropKeys = keyof IconButtonOwnProps;
declare type AllowedPropKeys = Readonly<Array<PropKeys>>;
declare type IconButtonProps = IconButtonOwnProps & WithStyleProps<BaseButtonTheme, null> & OtherHTMLAttributes<IconButtonOwnProps> & ToProp;
declare const propTypes: PropValidators<PropKeys>;
declare const allowedProps: AllowedPropKeys;
export type { IconButtonProps };
export { propTypes, allowedProps };
//# sourceMappingURL=props.d.ts.map