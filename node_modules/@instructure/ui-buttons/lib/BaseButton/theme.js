"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _alpha = require("@instructure/ui-color-utils/lib/alpha.js");

var _darken = require("@instructure/ui-color-utils/lib/darken.js");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
const activeShadow = 'inset 0 0 0.1875rem 0.0625rem';

const generateButtonThemeVars = _ref => {
  let style = _ref.style,
      textColor = _ref.textColor,
      ghostTextColor = _ref.ghostTextColor,
      backgroundColor = _ref.backgroundColor,
      borderColor = _ref.borderColor,
      _ref$ghostBorderColor = _ref.ghostBorderColor,
      ghostBorderColor = _ref$ghostBorderColor === void 0 ? borderColor : _ref$ghostBorderColor;
  return {
    [`${style}Color`]: textColor,
    [`${style}BorderColor`]: (0, _darken.darken)(borderColor, 10),
    [`${style}Background`]: backgroundColor,
    [`${style}HoverBackground`]: (0, _darken.darken)(backgroundColor, 10),
    [`${style}ActiveBackground`]: (0, _darken.darken)(backgroundColor, 10),
    [`${style}ActiveBoxShadow`]: `${activeShadow} ${(0, _darken.darken)(borderColor, 20)}`,
    [`${style}GhostColor`]: ghostTextColor,
    [`${style}GhostBorderColor`]: ghostBorderColor,
    [`${style}GhostBackground`]: 'transparent',
    [`${style}GhostHoverBackground`]: (0, _alpha.alpha)(ghostTextColor, 10),
    [`${style}GhostActiveBackground`]: 'transparent',
    [`${style}GhostActiveBoxShadow`]: `${activeShadow} ${(0, _alpha.alpha)(ghostBorderColor, 28)}`
  };
};
/**
 * Generates the theme object for the component from the theme and provided additional information
 * @param  {Object} theme The actual theme object.
 * @return {Object} The final theme object with the overrides and component variables
 */


const generateComponentTheme = theme => {
  const borders = theme.borders,
        colors = theme.colors,
        forms = theme.forms,
        spacing = theme.spacing,
        typography = theme.typography,
        themeName = theme.key;
  const themeSpecificStyle = {
    canvas: { ...generateButtonThemeVars({
        style: 'primary',
        backgroundColor: theme['ic-brand-button--primary-bgd'],
        borderColor: theme['ic-brand-button--primary-bgd'],
        textColor: theme['ic-brand-button--primary-text'],
        ghostTextColor: theme['ic-brand-button--primary-bgd']
      }),
      primaryGhostHoverBackground: (0, _alpha.alpha)(theme['ic-brand-button--primary-bgd'], 10)
    },
    'canvas-high-contrast': {
      secondaryBorderColor: colors === null || colors === void 0 ? void 0 : colors.borderMedium,
      primaryInverseBorderColor: colors === null || colors === void 0 ? void 0 : colors.borderMedium
    },
    instructure: {
      borderRadius: '999em',
      smallPaddingTop: '0.5rem',
      smallPaddingBottom: '0.4375rem',
      mediumPaddingTop: '0.75rem',
      mediumPaddingBottom: '0.75rem',
      largePaddingTop: '1rem',
      largePaddingBottom: '1rem',
      largeFontSize: '1.125rem'
    }
  };
  const componentVariables = {
    transform: 'none',
    hoverTransform: 'none',
    fontFamily: typography === null || typography === void 0 ? void 0 : typography.fontFamily,
    fontWeight: typography === null || typography === void 0 ? void 0 : typography.fontWeightNormal,
    textTransform: 'none',
    letterSpacing: 'normal',
    borderRadius: borders === null || borders === void 0 ? void 0 : borders.radiusMedium,
    borderStyle: borders === null || borders === void 0 ? void 0 : borders.style,
    borderWidth: borders === null || borders === void 0 ? void 0 : borders.widthSmall,
    smallHeight: forms === null || forms === void 0 ? void 0 : forms.inputHeightSmall,
    smallFontSize: typography === null || typography === void 0 ? void 0 : typography.fontSizeSmall,
    smallPaddingHorizontal: spacing === null || spacing === void 0 ? void 0 : spacing.xSmall,
    smallPaddingTop: '0.375rem',
    smallPaddingBottom: '0.3125rem',
    mediumHeight: forms === null || forms === void 0 ? void 0 : forms.inputHeightMedium,
    mediumFontSize: typography === null || typography === void 0 ? void 0 : typography.fontSizeMedium,
    mediumPaddingHorizontal: spacing === null || spacing === void 0 ? void 0 : spacing.small,
    mediumPaddingTop: '0.5625rem',
    mediumPaddingBottom: '0.5625rem',
    largeHeight: forms === null || forms === void 0 ? void 0 : forms.inputHeightLarge,
    largeFontSize: typography === null || typography === void 0 ? void 0 : typography.fontSizeLarge,
    largePaddingHorizontal: spacing === null || spacing === void 0 ? void 0 : spacing.medium,
    largePaddingTop: '0.6875rem',
    largePaddingBottom: '0.6875rem',
    lineHeight: typography === null || typography === void 0 ? void 0 : typography.lineHeightFit,
    iconSizeSmall: '1rem',
    iconSizeMedium: '1.25rem',
    iconSizeLarge: '1.625rem',
    iconTextGap: spacing.xSmall,
    iconTextGapCondensed: spacing.xxSmall,
    ...generateButtonThemeVars({
      style: 'primary',
      backgroundColor: colors === null || colors === void 0 ? void 0 : colors.backgroundBrand,
      borderColor: colors === null || colors === void 0 ? void 0 : colors.borderBrand,
      textColor: colors === null || colors === void 0 ? void 0 : colors.textLightest,
      ghostTextColor: colors === null || colors === void 0 ? void 0 : colors.textBrand
    }),
    ...generateButtonThemeVars({
      style: 'secondary',
      backgroundColor: colors === null || colors === void 0 ? void 0 : colors.backgroundLight,
      borderColor: colors === null || colors === void 0 ? void 0 : colors.borderLight,
      ghostBorderColor: colors === null || colors === void 0 ? void 0 : colors.borderDarkest,
      textColor: colors === null || colors === void 0 ? void 0 : colors.textDarkest,
      ghostTextColor: colors === null || colors === void 0 ? void 0 : colors.textDarkest
    }),
    ...generateButtonThemeVars({
      style: 'success',
      backgroundColor: colors === null || colors === void 0 ? void 0 : colors.backgroundSuccess,
      borderColor: colors === null || colors === void 0 ? void 0 : colors.borderSuccess,
      textColor: colors === null || colors === void 0 ? void 0 : colors.textLightest,
      ghostTextColor: colors === null || colors === void 0 ? void 0 : colors.textSuccess
    }),
    ...generateButtonThemeVars({
      style: 'danger',
      backgroundColor: colors === null || colors === void 0 ? void 0 : colors.backgroundDanger,
      borderColor: colors === null || colors === void 0 ? void 0 : colors.borderDanger,
      textColor: colors === null || colors === void 0 ? void 0 : colors.textLightest,
      ghostTextColor: colors === null || colors === void 0 ? void 0 : colors.textDanger
    }),
    ...generateButtonThemeVars({
      style: 'primaryInverse',
      backgroundColor: colors === null || colors === void 0 ? void 0 : colors.backgroundLightest,
      borderColor: colors === null || colors === void 0 ? void 0 : colors.borderLightest,
      textColor: colors === null || colors === void 0 ? void 0 : colors.textDarkest,
      ghostTextColor: colors === null || colors === void 0 ? void 0 : colors.textLightest
    }),
    // Overrides for primary-inverse to match what was previously the `light` button variant
    primaryInverseBorderColor: (0, _darken.darken)(colors === null || colors === void 0 ? void 0 : colors.borderLight, 10),
    primaryInverseHoverBackground: (0, _darken.darken)(colors === null || colors === void 0 ? void 0 : colors.backgroundLightest, 5),
    primaryInverseActiveBackground: colors === null || colors === void 0 ? void 0 : colors.backgroundLightest,
    primaryInverseActiveBoxShadow: `${activeShadow} ${(0, _darken.darken)(colors === null || colors === void 0 ? void 0 : colors.borderLightest, 25)}`,
    // Overrides for ghost hover states to ensure correct color contrast for a11y
    successGhostHoverBackground: (0, _alpha.alpha)(colors === null || colors === void 0 ? void 0 : colors.textSuccess, 1)
  };
  return { ...componentVariables,
    ...themeSpecificStyle[themeName]
  };
};

var _default = generateComponentTheme;
exports.default = _default;