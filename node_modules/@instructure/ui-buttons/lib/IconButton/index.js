"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.IconButton = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _passthroughProps = require("@instructure/ui-react-utils/lib/passthroughProps.js");

var _ScreenReaderContent = require("@instructure/ui-a11y-content/lib/ScreenReaderContent");

var _emotion = require("@instructure/emotion");

var _theme = _interopRequireDefault(require("./theme"));

var _BaseButton = require("../BaseButton");

var _props = require("./props");

const _excluded = ["children", "renderIcon", "screenReaderLabel", "type", "size", "elementRef", "as", "interaction", "color", "focusColor", "shape", "withBackground", "withBorder", "margin", "cursor", "href"];

var _dec, _dec2, _class, _class2;

/**
---
category: components
---
@tsProps
**/
// needed for listing the available theme variables on docs page
let IconButton = (_dec = (0, _emotion.withStyle)(null, _theme.default), _dec2 = (0, _testable.testable)(), _dec(_class = _dec2(_class = (_class2 = class IconButton extends _react.Component {
  constructor() {
    super(...arguments);
    this._baseButton = null;
    this.ref = null;

    this.handleRef = el => {
      const elementRef = this.props.elementRef;
      this.ref = el;

      if (typeof elementRef === 'function') {
        elementRef(el);
      }
    };
  }

  get focused() {
    return this._baseButton && this._baseButton.focused;
  }

  focus() {
    this._baseButton && this._baseButton.focus();
  }

  render() {
    const _this$props = this.props,
          children = _this$props.children,
          renderIcon = _this$props.renderIcon,
          screenReaderLabel = _this$props.screenReaderLabel,
          type = _this$props.type,
          size = _this$props.size,
          elementRef = _this$props.elementRef,
          as = _this$props.as,
          interaction = _this$props.interaction,
          color = _this$props.color,
          focusColor = _this$props.focusColor,
          shape = _this$props.shape,
          withBackground = _this$props.withBackground,
          withBorder = _this$props.withBorder,
          margin = _this$props.margin,
          cursor = _this$props.cursor,
          href = _this$props.href,
          props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
    const themeOverride = this.props.themeOverride;
    return /*#__PURE__*/_react.default.createElement(_BaseButton.BaseButton, Object.assign({}, (0, _passthroughProps.passthroughProps)(props), {
      type: type,
      size: size,
      elementRef: this.handleRef,
      as: as,
      interaction: interaction,
      color: color,
      focusColor: focusColor,
      shape: shape,
      withBackground: withBackground,
      withBorder: withBorder,
      margin: margin,
      cursor: cursor,
      href: href,
      renderIcon: children || renderIcon,
      themeOverride: themeOverride,
      ref: component => {
        this._baseButton = component;
      }
    }), /*#__PURE__*/_react.default.createElement(_ScreenReaderContent.ScreenReaderContent, null, screenReaderLabel));
  }

}, _class2.displayName = "IconButton", _class2.componentId = 'IconButton', _class2.propTypes = _props.propTypes, _class2.allowedProps = _props.allowedProps, _class2.defaultProps = {
  type: 'button',
  size: 'medium',
  as: 'button',
  // Leave interaction default undefined so that `disabled` and `readOnly` can also be supplied
  interaction: void 0,
  color: 'secondary',
  shape: 'rectangle',
  withBackground: true,
  withBorder: true,
  margin: '0',
  cursor: 'pointer'
}, _class2)) || _class) || _class);
exports.IconButton = IconButton;
var _default = IconButton;
exports.default = _default;