"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Button = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _getInteraction = require("@instructure/ui-react-utils/lib/getInteraction.js");

var _passthroughProps = require("@instructure/ui-react-utils/lib/passthroughProps.js");

var _emotion = require("@instructure/emotion");

var _theme = _interopRequireDefault(require("./theme"));

var _BaseButton = require("../BaseButton");

var _props = require("./props");

const _excluded = ["children", "type", "size", "as", "color", "focusColor", "display", "textAlign", "withBackground", "margin", "cursor", "href", "renderIcon"];

var _dec, _dec2, _class, _class2;

/**
---
category: components
---
@tsProps
**/
// needed for listing the available theme variables on docs page
let Button = (_dec = (0, _emotion.withStyle)(null, _theme.default), _dec2 = (0, _testable.testable)(), _dec(_class = _dec2(_class = (_class2 = class Button extends _react.Component {
  constructor() {
    super(...arguments);
    this._buttonComponent = null;
    this.ref = null;

    this.handleElementRef = el => {
      const elementRef = this.props.elementRef;
      this.ref = el;

      if (typeof elementRef === 'function') {
        elementRef(el);
      }
    };

    this.handleButtonRef = component => {
      this._buttonComponent = component;
    };
  }

  get focused() {
    return this._buttonComponent && this._buttonComponent.focused;
  }

  focus() {
    this._buttonComponent && this._buttonComponent.focus();
  }

  render() {
    const _this$props = this.props,
          children = _this$props.children,
          type = _this$props.type,
          size = _this$props.size,
          as = _this$props.as,
          color = _this$props.color,
          focusColor = _this$props.focusColor,
          display = _this$props.display,
          textAlign = _this$props.textAlign,
          withBackground = _this$props.withBackground,
          margin = _this$props.margin,
          cursor = _this$props.cursor,
          href = _this$props.href,
          renderIcon = _this$props.renderIcon,
          props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
    const interaction = (0, _getInteraction.getInteraction)({
      props
    });
    const themeOverride = this.props.themeOverride;
    const buttonProps = { ...(0, _passthroughProps.passthroughProps)(props),
      type,
      size,
      elementRef: this.handleElementRef,
      ref: this.handleButtonRef,
      as,
      color,
      interaction,
      focusColor,
      display,
      textAlign,
      withBackground,
      margin,
      cursor,
      href,
      renderIcon,
      themeOverride
    };
    return /*#__PURE__*/_react.default.createElement(_BaseButton.BaseButton, buttonProps, children);
  }

}, _class2.displayName = "Button", _class2.componentId = 'Button', _class2.propTypes = _props.propTypes, _class2.allowedProps = _props.allowedProps, _class2.defaultProps = {
  type: 'button',
  size: 'medium',
  as: 'button',
  // Leave interaction default undefined so that `disabled` and `readOnly` can also be supplied
  interaction: void 0,
  color: 'secondary',
  display: 'inline-block',
  textAlign: 'center',
  withBackground: true,
  margin: '0',
  cursor: 'pointer'
}, _class2)) || _class) || _class);
exports.Button = Button;
var _default = Button;
exports.default = _default;