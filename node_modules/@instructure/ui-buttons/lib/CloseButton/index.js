"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.CloseButton = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = require("react");

var _IconXSolid = require("@instructure/ui-icons/lib/IconXSolid.js");

var _ScreenReaderContent = require("@instructure/ui-a11y-content/lib/ScreenReaderContent");

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _getInteraction = require("@instructure/ui-react-utils/lib/getInteraction.js");

var _passthroughProps = require("@instructure/ui-react-utils/lib/passthroughProps.js");

var _emotion = require("@instructure/emotion");

var _styles = _interopRequireDefault(require("./styles"));

var _theme = _interopRequireDefault(require("./theme"));

var _BaseButton = require("../BaseButton");

var _props = require("./props");

const _excluded = ["screenReaderLabel", "elementRef", "size", "onClick", "margin", "placement", "offset", "type", "as", "href", "cursor", "tabIndex", "styles"];

var _dec, _dec2, _class, _class2;

/**
---
category: components
---
@tsProps
**/
let CloseButton = (_dec = (0, _emotion.withStyle)(_styles.default, _theme.default), _dec2 = (0, _testable.testable)(), _dec(_class = _dec2(_class = (_class2 = class CloseButton extends _react.Component {
  constructor() {
    super(...arguments);
    this.ref = null;

    this.handleRef = el => {
      const elementRef = this.props.elementRef;

      if (typeof elementRef === 'function') {
        elementRef(el);
      }
    };
  }

  componentDidMount() {
    var _this$props$makeStyle, _this$props;

    (_this$props$makeStyle = (_this$props = this.props).makeStyles) === null || _this$props$makeStyle === void 0 ? void 0 : _this$props$makeStyle.call(_this$props);
  }

  componentDidUpdate() {
    var _this$props$makeStyle2, _this$props2;

    (_this$props$makeStyle2 = (_this$props2 = this.props).makeStyles) === null || _this$props$makeStyle2 === void 0 ? void 0 : _this$props$makeStyle2.call(_this$props2);
  }

  get interaction() {
    return (0, _getInteraction.getInteraction)({
      props: this.props
    });
  }

  get color() {
    const color = this.props.color;
    return color === 'primary' ? 'secondary' : color;
  }

  render() {
    const _this$props3 = this.props,
          screenReaderLabel = _this$props3.screenReaderLabel,
          elementRef = _this$props3.elementRef,
          size = _this$props3.size,
          onClick = _this$props3.onClick,
          margin = _this$props3.margin,
          placement = _this$props3.placement,
          offset = _this$props3.offset,
          type = _this$props3.type,
          as = _this$props3.as,
          href = _this$props3.href,
          cursor = _this$props3.cursor,
          tabIndex = _this$props3.tabIndex,
          styles = _this$props3.styles,
          props = (0, _objectWithoutProperties2.default)(_this$props3, _excluded);
    return (0, _emotion.jsx)("span", Object.assign({}, (0, _passthroughProps.passthroughProps)(props), {
      css: styles === null || styles === void 0 ? void 0 : styles.closeButton,
      ref: el => this.ref = el
    }), (0, _emotion.jsx)(_BaseButton.BaseButton, {
      renderIcon: _IconXSolid.IconXSolid,
      elementRef: this.handleRef,
      interaction: this.interaction,
      type: type,
      color: this.color,
      size: size,
      onClick: onClick,
      margin: margin,
      withBorder: false,
      withBackground: false,
      as: as,
      href: href,
      cursor: cursor,
      tabIndex: tabIndex
    }, (0, _emotion.jsx)(_ScreenReaderContent.ScreenReaderContent, null, screenReaderLabel)));
  }

}, _class2.displayName = "CloseButton", _class2.componentId = 'CloseButton', _class2.propTypes = _props.propTypes, _class2.allowedProps = _props.allowedProps, _class2.defaultProps = {
  // Leave interaction default undefined so that `disabled` and `readOnly` can also be supplied
  interaction: void 0,
  type: 'button',
  placement: 'static',
  offset: 'x-small',
  size: 'small',
  margin: '0',
  as: 'button',
  cursor: 'pointer'
}, _class2)) || _class) || _class);
exports.CloseButton = CloseButton;
var _default = CloseButton;
exports.default = _default;